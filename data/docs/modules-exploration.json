[{"name":"README.md","content":"\r\n# @sap/modules-exploration\r\n\r\nThis is an npm package which provides the ability to explore the available modules/generators installed in a specific predefined folder at runtime.\r\nIt provides two main APIs. One to get a list of explored modules and API to display the explored modules to the user in a yeoman-base prompt. <br>\r\n\r\nExplored Modules should follow the following guidelines: <br>\r\n\r\n1. Installed in /extbin/[MODULES-TYPE] specific folder (e.g generators will be installed in /extbin/generators)\r\n2. Include metadata file: modules.json\r\n   The modules.json for generators should include the following parameters:\r\n\r\n```javascript\r\n{\r\n  templates: [\r\n      \"name\": string, //This name will be displayed in the yeoman-base prompt as part of templates option list. (e.g \"SAPUI5 Application\")\r\n      \"path\": string, //Relative path to the template's package. (e.g. \"/generators/\")\r\n      \"features\" : [{name : string, values :string[]}], // an array of key-value objects. declares the generator supported features in which this generator can be filtered (e.g [{name:\"protocol\" : value : [\"odataV4\"]}])\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThe modules.json for service-provider should include the following parameters:\r\n\r\n```javascript\r\n{\r\n  \"serviceProviders\":[\r\n    {\r\n      \"name\": string,//This name will be displayed in the yeoman-base prompt as part of service providers option list. (e.g \"Steam Punk\")\r\n      \"path\": string, //Path to the service providers package. (e.g. \"/extbin/serviceProviders/OdataProviders/SteamPunk-service-provider\",\r\n      \"features\" : [{name : string, values :string[]}], //an array of key-value objects. declares the service-provider supported features in which this module can be filtered (e.g [{name:\"protocol\" : value : [\"odataV4\"]}])\r\n      \"entryPoint\" :{ //The main entry point to trigger the specific service provider logic\r\n         \"class\" : \"ServiceProviderExample \", //The main object\r\n         \"method\" : \"dummyServiceProviderPrompt\" //The main method\r\n      }\r\n   }\r\n  ]\r\n}\r\n```\r\n\r\n\r\n# API\r\n\r\n**getExploredModules** <br>\r\nReturns an array of explored modules metadata <br> <br>\r\nthe return metatadata is of type ''IModuleInfo[]\r\n**promptExploredModules** <br>\r\nExplores installed modules and prompt their metadata (name) to the user using the given generator. The prompt question can be passed as an input.\r\nIf not passed, a generic question will be displayed <br>\r\n"}]