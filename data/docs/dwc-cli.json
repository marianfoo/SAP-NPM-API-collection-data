[{"name":"CHANGELOG.md","content":"# Changelog\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\r\n\r\n## 2022.13.0\r\n\r\n### Added\r\n\r\n- **Option --pretty**: You can now control whether to pretty-format the output. For all commands that return content you can optionally specify option `--pretty` to `JSON.stringify(content, null, 2)` the output. If omitted, the content will be returned as is. This also changes the default behavior when not specifying option `--output`, but showing the content directly in the terminal. Previously, the content was always formatted when printed to the terminal. Now, you have to explicitly add option `--pretty` in this case, too.\r\n\r\n## 2022.9.1\r\n\r\n### Fixed\r\n\r\n- **Local cache issue**: After initializing the CLI using `cache-init`, no additional commands like `spaces` was available. The downloaded discovery document for the tenant in question was effectively ignored.\r\n\r\n## 2022.9.0\r\n\r\n### Fixed\r\n\r\n- **Respect HTTP protocol of tenant entered by user**: No matter what the protocol of the tenant (`https` or `http`), the HTTP request send to the backend service of the respective tenant was always using `https`. This can cause issues if the client using the CLI is hidden behind a HTTP proxy which only allows for `http` requests. This addresses cases where commands failed with errors like _\"self signed certificate in certificate chain\"_.\r\n- **The CLI could not be used as a regular Node.js dependency** using the `requires` or `import` syntax within a Node.js project. Users of the CLI always had to use Node.js' `exec` functionality to work with the CLI. For more information, see [_As a Node.js module dependency_](README.md#as-a-nodejs-module-dependency).\r\n"},{"name":"README.md","content":"# @sap/dwc-cli\r\n\r\nCommand-Line Interface (CLI) for SAP Data Warehouse Cloud.\r\n\r\n## Content\r\n\r\n1. [Installation](#installation)\r\n2. [Update the CLI](#update-the-cli)\r\n3. [Versioning](#versioning)\r\n4. [Authentication](#authentication)\r\n5. [Usage](#usage)\r\n   1. [From the command line](#from-the-command-line)\r\n   2. [As a Node.js module dependency](#as-a-nodejs-module-dependency)\r\n6. [Help & Documentation](#help-documentation)\r\n7. [Community & Feedback](#community--feedback)\r\n8. [License](#license)\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install -g @sap/dwc-cli\r\n```\r\n\r\nor\r\n\r\n```bash\r\n$ yarn global add @sap/dwc-cli\r\n```\r\n\r\n## Update the CLI\r\n\r\nSee [Installation](#installation).\r\n\r\nIn case of structural changes applied to the service document (see [Initialize the CLI](#initialize-the-cli)) with a new version of Data Warehouse Cloud you need to update the CLI. In this case, after you executed a command, the CLI issues a warning:\r\n\r\n```bash\r\n$ dwc <command>\r\nYour local CLI installation is outdated. Run 'npm install @sap/dwc-cli [-g]' to update\r\n```\r\n\r\n## Versioning\r\n\r\nThe semantic versioning of the CLI is handled according to SAP Data Warehouse Cloud versions and follows the same structure for major and minor versions.\r\n\r\n```bash\r\n$ dwc -v\r\n2021.21.0\r\n```\r\n\r\nFor an in-depth explanation see the blog post on [blogs.sap.com](https://blogs.sap.com/2021/09/21/new-command-line-for-sap-data-warehouse-cloud-code-way-to-the-cloud/).\r\n\r\n## Authentication\r\n\r\nPasscodes are used for authenticating commands sent from the CLI to your SAP Data Warehouse Cloud tenant. Passcodes can be provided explicitly using the `-p, --passcode` option in case the URL to retrieve a passcode is known, or implictly using an interactive session by omitting the `-p, --passcode` option.\r\n\r\nWhen omitting the `-p, --passcode` option the CLI prompts you to provide a passcode by navigating to the passcode authentication URL for your tenant. The URL is calculated based on the provided `-H, --host` value.\r\n\r\n```bash\r\n$ dwc cache-init -H https://mytenant.eu10.hcs.cloud.sap/\r\n✔ Do you want to retrieve a passcode from https://mytenant.authentication.eu10.hana.ondemand.com/passcode? … yes\r\n✔ Enter your temporary authentication code: … **********\r\n...\r\n```\r\n\r\nThe displayed URL can be used for retrieving more passcodes by refreshing the page when sending multiple commands which can then be fed to the `-p, --passcode` option.\r\n\r\nYou can retrieve the URL directly by running the `passcode-url` command:\r\n\r\n```bash\r\n$ dwc passcode-url -H https://mytenant.eu10.hcs.cloud.sap/\r\nhttps://mytenant.authentication.eu10.hana.ondemand.com/passcode\r\n```\r\n\r\n## Usage\r\n\r\nYou can either use the CLI from the terminal or command line, or use the module as a regular dependency in your code of your Node.js project.\r\n\r\n### From the command line\r\n\r\n#### Initialize the CLI\r\n\r\nBefore you can list and run commands against your SAP Data Warehouse Cloud tenant you need to initialize the CLI first. When initializing the CLI a service document is downloaded from your SAP Data Warehouse Cloud tenant which describes the commands your tenant is able to understand. To initialize the CLI run\r\n\r\n```bash\r\n$ dwc cache-init -H https://mytenant.eu10.hcs.cloud.sap/ -p somepasscode\r\n```\r\n\r\nYou can refresh the local copy of the service document by running the `cache-init` command again.\r\n\r\nAfter you executed a command the CLI issues a warning in case the local version of the service document is outdated. In that case, run the `cache-init` command again.\r\n\r\n```bash\r\n$ dwc <command>\r\nYour local CLI cache is outdated. Run 'dwc cache-init' to update\r\n```\r\n\r\n#### List available commands\r\n\r\nTo list available commands and required or optional options attach the `-h, --help` to the top-level `dwc` command or any subcommand of `dwc`:\r\n\r\n```bash\r\n$ dwc -h\r\nUsage: dwc [options] [command]\r\n\r\nCommand-Line Interface for SAP Data Warehouse Cloud.\r\n\r\nOptions:\r\n  -v, --version           output the current version\r\n  -H, --host <host>       specifies the url host where the tenant is hosted\r\n  -h, --help              display help for command\r\n\r\nCommands:\r\n  cache-clean             clean the local CLI cache\r\n  cache-init [options]    initialize the local CLI cache\r\n  passcode-url [options]  print the passcode url\r\n  help [command]          display help for command\r\n```\r\n\r\nTo list commands for a tenant for which the CLI was initialized, add the `-H, --host` option (notice the additional command `spaces`):\r\n\r\n```bash\r\n$ dwc -H https://mytenant.eu10.hcs.cloud.sap/ -h\r\nUsage: dwc [options] [command]\r\n\r\nCommand-Line Interface for SAP Data Warehouse Cloud.\r\n\r\nOptions:\r\n  -v, --version           output the current version\r\n  -H, --host <host>       specifies the url host where the tenant is hosted\r\n  -h, --help              display help for command\r\n\r\nCommands:\r\n  cache-clean             clean the local CLI cache\r\n  cache-init [options]    initialize the local CLI cache\r\n  spaces                  manage and orchestrate spaces\r\n  passcode-url [options]  print the passcode url\r\n  help [command]          display help for command\r\n```\r\n\r\nTo show available subcommands for a top-level command, run eg:\r\n\r\n```bash\r\n$ dwc spaces -H https://mytenant.eu10.hcs.cloud.sap/ -h\r\nUsage: dwc spaces [options] [command]\r\n\r\nmanage and orchestrate spaces\r\n\r\nOptions:\r\n  -H, --host <host> specifies the url host where the tenant is hosted\r\n  -h, --help        display help for command\r\n\r\nCommands:\r\n  create [options]  creates or updates space details based on an import file\r\n  read [options]    fetches space details for a specified space\r\n  delete [options]  delete an existing space\r\n  help [command]    display help for command\r\n```\r\n\r\n```bash\r\n$ dwc spaces create -H https://mytenant.eu10.hcs.cloud.sap/ -h\r\nUsage: dwc spaces create [options]\r\n\r\ncreates or updates space details based on an import file\r\n\r\nOptions:\r\n  -f, --filePath <filePath>  specifies the file to use as input for the command\r\n  -V, --verbose              print detailed log information to console (optional)\r\n  -H, --host <host>          specifies the url host where the tenant is hosted\r\n  -p, --passcode <passcode>  passcode for interactive session authentication (optional)\r\n  -h, --help                 display help for command\r\n```\r\n\r\nThe list of available commands differs based on the content of the service document you downloaded when running `cache-init`.\r\n\r\n### As a Node.js module dependency\r\n\r\nRequire the module as usual. You can also use it in your TypeScript project using the `import` syntax.\r\n\r\n```javascript\r\nconst dwc = require(\"@sap/dwc-cli\");\r\n```\r\n\r\n#### Work with commands\r\n\r\nThe module exports a `getCommands` function which returns a map of available commands. Make sure to always specify the `host` to receive `host`-specific commands. Otherwise, when omitting the `host` information, you will only get the list of general commands like `cache-clean`, `cache-init`, ...\r\n\r\n```javascript\r\nconst MY_HOST = \"https://mytenant.eu10.hcs.cloud.sap/\";\r\n\r\nconst commands = await dwc.getCommands(MY_HOST);\r\n\r\nconsole.log(commands);\r\n// {\r\n//   dwc: [AsyncFunction],\r\n//   'cache-clean': [AsyncFunction],\r\n//   'cache-init': [AsyncFunction],\r\n//   'passcode-url': [AsyncFunction],\r\n//   'cache-show': [AsyncFunction]\r\n//   'spaces create': [AsyncFunction]\r\n//   'spaces read': [AsyncFunction]\r\n//   'spaces delete': [AsyncFunction]\r\n// }\r\n```\r\n\r\nYou can call any available command and provide required options as follows:\r\n\r\n```javascript\r\nconst MY_HOST = \"https://mytenant.eu10.hcs.cloud.sap/\";\r\n\r\nconst options = {\r\n  \"--host\": MY_HOST,\r\n  \"--passcode\": \"somepasscode\",\r\n};\r\n\r\nawait commands[\"cache-init\"](options);\r\n```\r\n\r\n`options` is a map of available options for the respective command. You have to supply either the short flag or long name of the option, including `-` or `--` for the short flag or long name.\r\n\r\n#### Handle errors during command execution\r\n\r\nIf the command fails, an error is thrown you can catch and process as usual:\r\n\r\n```javascript\r\ntry {\r\n  await commands[\"cache-show\"]();\r\n} catch (err) {\r\n  // ops, the command failed!\r\n  console.log(err);\r\n}\r\n```\r\n\r\n#### Provide custom logger function\r\n\r\nAny output of a command you execute is forwarded to the `logger.output` function. To handle the result yourself, you can provide a custom `logger.output` function implementation:\r\n\r\n```javascript\r\nlet result = [];\r\nconst output = (...args) => result.push(args);\r\ndwc.configure({ customLogger: { output } });\r\n\r\nawait commands[\"spaces read\"]({\r\n  \"--space\": \"MYSPACE\",\r\n  \"--host\": \"https://mytenant.eu10.hcs.cloud.sap/\",\r\n  \"--passcode\": \"mypasscode\",\r\n});\r\n\r\nconsole.log(result);\r\n// [\r\n//   [\r\n//     '{\\n' +\r\n//       '  \"MYSPACE\": {\\n' +\r\n//       '    \"spaceDefinition\": {\\n' +\r\n//       '      \"version\": \"1.0.4\",\\n' +\r\n// ...\r\n//       '    }\\n' +\r\n//       '  }\\n' +\r\n//       '}'\r\n//   ]\r\n// ]\r\n```\r\n\r\n#### Provide custom passcode retrieval function\r\n\r\nYou can also provide a custom passcode retrieval function which is called every time before a command is executed. The function is expected to return a promise resolving into a string, the passcode. This way you can, for example, make use of programmatic passcode retrieval as described in [this blog](https://blogs.sap.com/2021/09/27/automatically-add-members-to-spaces-in-sap-data-warehouse-cloud-using-sap-dwc-cli/) using a headless browser and can omit the `--passcode` option when executing commands. The function needs to be configured only once before executing the first command.\r\n\r\n```javascript\r\nconst logger = {\r\n  customLogger: { output: console.log },\r\n};\r\n\r\nconst passcodeFunction = () => {\r\n  // instantiate headless browser, retrieve passcode, return it\r\n};\r\n\r\ndwc.configure(logger, passcodeFunction);\r\n\r\n// no --passcode option required\r\nawait commands[\"spaces read\"]({\r\n  \"--space\": \"MYSPACE\",\r\n  \"--host\": \"https://mytenant.eu10.hcs.cloud.sap/\",\r\n});\r\n```\r\n\r\n## Help Documentation\r\n\r\nFind the full documentation on [help.sap.com](https://help.sap.com/viewer/9f804b8efa8043539289f42f372c4862/cloud/en-US/5eac5b71e2d34c32b63f3d8d47a0b1d0.html), check out the blog post on [blogs.sap.com](https://blogs.sap.com/2021/09/21/new-command-line-for-sap-data-warehouse-cloud-code-way-to-the-cloud/) or use option `-h, --help`:\r\n\r\n```bash\r\n$ dwc <command> -h\r\n```\r\n\r\n## Community & Feedback\r\n\r\nSAP Community provides a forum where you can ask and answer questions, and comment and vote on the questions of others and their answers.\r\n\r\nSee [SAP Data Warehouse Cloud community](https://community.sap.com/topics/data-warehouse-cloud) for more details and use the tag _dwc-cli_ for questions concerning the CLI.\r\n\r\n## License\r\n\r\nThis package is provided under the terms of the [SAP Freeware License Agreement](https://tools.hana.ondemand.com/sap-freeware-license.txt).\r\n"}]