[{"name":"CHANGELOG.md","content":"# Change Log\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## [0.9.6] - 2020-10-16\r\n\r\n- added: support for message-queuing\r\n\r\n## [0.9.5] - 2020-06-26\r\n\r\n- added: license file for new delivery channel\r\n- fixed: newer Node.js version for unit tests and coverage\r\n\r\n## [0.9.4] - 2019-02-11\r\n\r\n## [0.9.3] - 2019-02-11\r\n\r\n## [0.9.2] - 2019-02-11\r\n\r\n## [0.9.1] - 2019-02-06\r\n\r\n### Added\r\n- amqp-v100 protocol support\r\n\r\n### Changed\r\n- adapt to new enterprise-messaging VCAP structure\r\n\r\n### Removed\r\n"},{"name":"README.md","content":"# xb-msg-env\r\nProvides functions to setup messaging client options from CF (or XSA) environment variables.\r\n\r\nThe following clients are supported:\r\n* `@sap/xb-msg`, protocol-agnostic API, multiple destinations per single client\r\n* `@sap/xb-msg-amqp-v100`, protocol-specific, single connection per client\r\n* `@sap/xb-msg-amqp-v091`, protocol-specific, single connection per client\r\n* `@sap/xb-msg-mqtt-v311`, protocol-specific, single connection per client.\r\n\r\nThe following environment variables are used:\r\n* `VCAP_SERVICES` with bindings to RabbitMQ or Enterprise Messaging,\r\n* `SAP_XBEM_SERVICE_LABEL` to use an alternative service label for Enterprise Messaging,\r\n* `SAP_XBEM_BINDINGS` to define incoming and/or outgoing message streams.\r\n \r\n## Table of contents\r\n\r\n* [Install](#install)\r\n* [API](#api)\r\n* [Examples](#examples)\r\n* [Limitations](#limitations)\r\n\r\n## Install\r\n\r\nSee also:\r\n[https://www.npmjs.com/package/@sap/xb-msg-env](https://www.npmjs.com/package/@sap/xb-msg-env)\r\n\r\nTo add it to your project run:\r\n```bash\r\nnpm i @sap/xb-msg-env\r\n```\r\n\r\nTo generate complete API documentation run inside the library package folder\r\n```bash\r\nnpm run doc\r\n```\r\n\r\n## API\r\n\r\n### Environment Variables \r\nThe following parameters exist in the SAP_XBEM_BINDINGS environment variable.\r\nSAP_XBEM_BINDINGS contains an input and an output map.\r\n\r\n```\r\n\"SAP_XBEM_BINDINGS\": {\r\n    \"outputs\": {\r\n    },\r\n    \"inputs\": {\r\n    }\r\n}\r\n```\r\n\r\nA single input or output can have the following properties:\r\n\r\n| Parameter | Type | Input | Output | Description |\r\n| --- | --- | --- | --- | --- |\r\n| service | string | yes | yes | Name of the messaging service to which this item is assigned |\r\n| address | string | yes | yes | Queue name (e.g. `queue:q001`) or topic in unified syntax (e.g. `topic:BO/Sales/Order/Released`) |\r\n| reliable | boolean | yes | yes | Indicates whether acknowledgements are used for reliable message transfers |\r\n| exclusive | boolean | yes | no | Indicates whether only one single consumer is allowed at a time |\r\n| persistent | boolean | no | yes | Indicates whether the message broker persists messages |\r\n| maxMsgInFlight | number | yes | no | The maximum number of unacknowledged messages the broker sends to the consumer |\r\n\r\n### Create xb-msg Client Options\r\nCreate a messaging client and start consuming messages.\r\n````\r\nconst msg = require('@sap/xb-msg');\r\nconst env = require('@sap/xb-msg-env');\r\n\r\n/* get options from cf/xsa environment */\r\nconst options = env.msgClientOptions('msg-instance-01', ['MyInpA'], []);\r\n\r\n/* start messaging */\r\nconst client = new msg.Client(options);\r\n\r\nclient.istream('MyInpA')\r\n    .on('subscribed', () => {\r\n        console.log('subscribed');\r\n    })\r\n    .on('data', (message) => {\r\n        console.log('message: ' + message.payload.toString());\r\n        message.done();\r\n    });\r\n\r\nclient.connect();\r\n````\r\n\r\n### Create xb-msg-amqp-v100 Client Options without SAP_XBEM_BINDINGS\r\nCreate an AMQP 1.0 messaging client and start consuming messages, receiving each at-least-once.\r\n````\r\nconst msg = require('@sap/xb-msg-amqp-v100');\r\nconst env = require('@sap/xb-msg-env');\r\n\r\n/* get options from cf/xsa environment */\r\nconst options = env.amqpV100ClientOptions('my-service');\r\n\r\n/* start messaging */\r\nconst client = new msg.Client(options);\r\nconst stream = client.receiver('MyLinkA').attach('MyQueue1');\r\n\r\nstream\r\n    .on('subscribed', () => {\r\n        console.log('subscribed');\r\n    })\r\n    .on('data', (message) => {\r\n        console.log('message: ' + message.payload.toString());\r\n        message.done();\r\n    });\r\n\r\nclient.connect();\r\n````\r\n\r\n### Create xb-msg-amqp-v091 Client Options\r\nCreate an AMQP v091 messaging client and start consuming messages.\r\n````\r\nconst msg = require('@sap/xb-msg-amqp-v091');\r\nconst env = require('@sap/xb-msg-env');\r\n\r\n/* get options from cf/xsa environment */\r\nconst options = env.amqpV091ClientOptions('msg-instance-02', ['MyInpB'], []);\r\n\r\n/* start messaging */\r\nconst client = new msg.Client(options);\r\n\r\nclient.channel(1)\r\n    .on('opened', () => {\r\n        console.log('opened');\r\n    })\r\n    .on('flow', (active) => {\r\n        console.log(active ? 'continue' : 'wait');\r\n    })\r\n    .on('closed', (hadError) => {\r\n        console.log('closed');\r\n        client.disconnect();\r\n    });\r\n\r\nclient.istream('MyInpB')\r\n    .on('subscribed', () => {\r\n        console.log('subscribed');\r\n    })\r\n    .on('data', (message) => {\r\n        console.log('message: ' + message.payload.toString());\r\n        message.done();\r\n    });\r\n\r\nclient.connect();\r\n````\r\n\r\n### Create xb-msg-mqtt-v311 Client Options\r\nCreate an MQTT v311 messaging client and start consuming messages.\r\n````\r\nconst msg = require('@sap/xb-msg-mqtt-v311');\r\nconst env = require('@sap/xb-msg-env');\r\n\r\n/* get options from cf/xsa environment */\r\nconst options = env.mqttV311ClientOptions('msg-instance-03', ['MyInpC'], []);\r\n\r\n/* start messaging */\r\nconst client = new msg.Client(options);\r\n\r\nclient.istream('MyInpC')\r\n    .on('subscribed', () => {\r\n        console.log('subscribed');\r\n    })\r\n    .on('data', (message) => {\r\n        console.log('message: ' + message.payload.toString());\r\n        message.done();\r\n    });\r\n\r\nclient.connect();\r\n````\r\n\r\n## Examples\r\nBelow is an example of 'Environment Variables'. There is one Rabbit MQ instance named 'myService'.\r\nThe messaging service inputs and outputs are maintained via another environment variable named SAP_XBEM_BINDINGS. \r\nHere, one output name 'myOutA' is defined.\r\n\r\n```json\r\n{\r\n  \"VCAP_SERVICES\": {\r\n    \"rabbitmq\": [\r\n        {\r\n            \"credentials\": {\r\n                \"hostname\": \"10.11.11.11\",\r\n                \"ports\": {\r\n                    \"15672/tcp\": \"8888\",\r\n                    \"5672/tcp\": \"9999\"\r\n                },\r\n                \"port\": \"9999\",\r\n                \"username\": \"user\",\r\n                \"password\": \"pwd\",\r\n                \"uri\": \"amqp://user:pwd@10.11.11.11:9999\"\r\n            },\r\n            \"syslog_drain_url\": null,\r\n            \"volume_mounts\": [],\r\n            \"label\": \"rabbitmq\",\r\n            \"provider\": null,\r\n            \"plan\": \"v3.6-container\",\r\n            \"name\": \"myService\",\r\n            \"tags\": [\r\n                \"rabbitmq\",\r\n                \"mbus\",\r\n                \"pubsub\",\r\n                \"amqp\"\r\n            ]\r\n        }\r\n    ]\r\n  },\r\n  \"SAP_XBEM_BINDINGS\": {\r\n    \"outputs\": {\r\n      \"myOutA\" : {\r\n        \"service\": \"myService\",\r\n        \"address\": \"topic:Cars/Velocity/milesPerHour\",\r\n        \"reliable\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThe following call:\r\n\r\n```javascript\r\nconst env = require('@sap/xb-msg-env');\r\nconst opt = env.msgClientOptions('myService', [], ['myOutA']);\r\n```\r\nwill provide the client options for `@sap/xb-msg`:\r\n\r\n```json\r\n{\r\n  \"destinations\": [\r\n    {\r\n      \"name\": \"myService\",\r\n      \"type\": \"amqp-v091\",\r\n      \"net\": {\r\n        \"host\": \"10.11.11.11\",\r\n        \"port\": 9999\r\n      },\r\n      \"sasl\": {\r\n        \"user\": \"user\",\r\n        \"password\": \"pwd\"\r\n      },\r\n      \"amqp\": {\r\n        \"vhost\": \"/\"\r\n      },\r\n      \"istreams\": {\r\n      },\r\n      \"ostreams\": {\r\n        \"out\": { \r\n          \"channel\": 1, \r\n          \"exchange\": \"amq.topic\", \r\n          \"routingKey\": \"Cars.Velocity.milesPerHour\",\r\n          \"confirms\": false \r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n"}]