[{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n<a name=\"6.6.4\"></a>\r\n## 6.6.4 - 2022-06-03\r\n\r\n### Fixed\r\n- Creats new set of connections when using followUp functionality\r\n\r\n### Added\r\n- Added maxpoolsize to default DB options. \r\n\r\n<a name=\"6.6.3\"></a>\r\n## 6.6.3 - 2022-05-03\r\n\r\n### Update\r\n- Update @sap/hana-client to v2.12.20\r\n\r\n<a name=\"6.6.2\"></a>\r\n## 6.6.2 - 2022-04-26\r\n\r\n### Update\r\n- Update _moment_ to v2.29.2\r\n- Update _async_ to v3.2.2\r\n\r\n<a name=\"6.6.1\"></a>\r\n## 6.6.1 - 2022-04-26\r\n\r\n### Update\r\n- Update _@sap/xsodata_ to v7.5.5\r\n\r\n<a name=\"6.6.0\"></a>\r\n## 6.6.0 - 2022-04-01\r\n\r\n### Update\r\n- Updated the way multipart/related WebRequests are handled.\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.5.0\r\n- Update _body-parser_ to v1.19.2\r\n\r\n<a name=\"6.5.5\"></a>\r\n## 6.5.5 - 2022-03-17\r\n\r\n### Added\r\n- Support for multipart request handling in Client.\r\n\r\n<a name=\"6.5.4\"></a>\r\n## 6.5.4 - 2022-03-11\r\n\r\n### Added\r\n- Added support for WebEntityRequest creation via .create() on $.web.WebRequest.entities.\r\n\r\n<a name=\"6.5.3\"></a>\r\n## 6.5.3 - 2022-03-08\r\n\r\n### Fixed\r\n- Update _@sap/audit-logging_ to v5.0.0\r\n- Update _@sap/xssec_ to v3.2.13\r\n\r\n<a name=\"6.5.2\"></a>\r\n## 6.5.2 - 2022-02-25\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.11.20\r\n\r\n<a name=\"6.5.1\"></a>\r\n## 6.5.1 - 2022-02-07\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.4.5\r\n\r\n<a name=\"6.5.0\"></a>\r\n## 6.5.0 - 2021-12-16\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.11.14\r\n- Update _@sap/hdbext_ to v7.5.0\r\n\r\n<a name=\"6.4.1\"></a>\r\n## 6.4.1 - 2021-11-25\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.10.20\r\n- Update _@sap/hdbext_ to v7.4.1\r\n\r\n<a name=\"6.4.0\"></a>\r\n## 6.4.0 - 2021-10-05\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.10.13\r\n- Update _@sap/hdbext_ to v7.4.0\r\n\r\n<a name=\"6.3.1\"></a>\r\n## 6.3.1 - 2021-08-09\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.9.28\r\n- Update _@sap/hdbext_ to v7.3.1\r\n\r\n\r\n<a name=\"6.3.0\"></a>\r\n## 6.3.0 - 2021-07-21\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.9.23\r\n- Update _@sap/hdbext_ to v7.3.0\r\n- Update _@sap/xsodata_ to v7.4.4\r\n\r\n<a name=\"6.2.2\"></a>\r\n## 6.2.2 - 2021-07-13\r\n\r\n### Fixed\r\n- Update _nodemailer_ to v6.6.1\r\n\r\n<a name=\"6.2.1\"></a>\r\n## 6.2.1 - 2021-06-28\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.8.22\r\n\r\n<a name=\"6.2.0\"></a>\r\n## 6.2.0 - 2021-05-07\r\n\r\n### Fixed\r\n- Update _@sap/hdbext_ to v7.2.0\r\n- Update _@sap/hana-client_ to v2.8.20\r\n- Update _@sap/xsodata_ to v7.4.2\r\n\r\n<a name=\"6.1.1\"></a>\r\n## 6.1.1 - 2021-02-25\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.3.7\r\n\r\n<a name=\"6.1.0\"></a>\r\n## 6.1.0 - 2021-02-22\r\n\r\n### Added\r\n- Node.js 14.x support\r\n\r\n### Fixed\r\n- Update _@sap/audit-logging_ to v4.2.0\r\n- Update _@sap/e2e-trace_ to v3.0.0\r\n- Update _@sap/fibers_ to v5.0.0-0\r\n- Update _@sap/fibrous_ to v0.5.0-6\r\n- Update _@sap/hana-client_ to v2.7.23\r\n- Update _@sap/hdbext_  to v7.1.3\r\n- Update _@sap/logging_ to v6.0.3\r\n- Update _@sap/node-jwt_ to v1.6.14\r\n- Update _@sap/node-vsi_ to v1.4.21\r\n- Update _lodash_ to v4.17.21\r\n- Update _multiparty_ to v4.2.2\r\n\r\n<a name=\"6.0.8\"></a>\r\n## 6.0.8 - 2020-11-25\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.3.5\r\n- Update _@sap/logging_ to v6.0.0\r\n- Update _@sap/jobs-client_ to v1.6.1\r\n- Update _@sap/xss-secure_ to v4.0.0\r\n- Update _@sap/xsenv_ to v3.1.0\r\n- Update _@sap/xssec_ to v3.0.10\r\n- Update _@sap/node-jwt_ to v1.6.13\r\n- Update _@sap/node-vsi_ to v1.4.20\r\n- Update _@sap/hdbext_ to v7.0.1\r\n- Update _@sap/hana-client_ to v2.6.58\r\n- Update _nodemailer_ to v6.4.16\r\n- Reduced installation size significantly.\r\n\r\n<a name=\"6.0.7\"></a>\r\n## 6.0.7 - 2020-10-15\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.3.4\r\n\r\n<a name=\"6.0.6\"></a>\r\n## 6.0.6 - 2020-10-02\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.5.109\r\n- Update _@sap/xsodata_ to v7.3.3\r\n- Update _lodash_ to v4.17.20\r\n\r\n<a name=\"6.0.5\"></a>\r\n## 6.0.5 - 2020-08-14\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.5.104\r\n- Update _@sap/xss-secure_ to v3.1.0\r\n- Update _@sap/hdbext_ to v7.0.0\r\n- Update _@sap/audit-logging_ to v3.1.1\r\n- Update _@sap/e2e-trace_ to v2.1.0\r\n- Update _@sap/instance-manager_ to v2.2.0\r\n- Update _@sap/logging_ to v5.3.1\r\n- Update _@sap/node-jwt_ to v1.6.11\r\n- Update _@sap/node-vsi_ to v1.4.19\r\n- Update _@sap/textbundle_ to v3.1.0\r\n- Update _@sap/xsenv_ to v3.0.0\r\n- Update _async_ to v3.2.0\r\n- Update _lodash_ to v4.17.19\r\n- Update _request_ to v2.88.2\r\n\r\n<a name=\"6.0.4\"></a>\r\n## 6.0.4 - 2020-06-01\r\n\r\n### Fixed\r\n- Crash when executing a `CALL` procedure statement with `$.hdb.Connection.executeQuery` or `$.hdb.Connection.executeUpdate` when there are no output tables\r\n- Document some known incompatibilities in regard to jobs\r\n- Add missing entry in CHANGELOG.md in regard to dropping support for PowerPC big endian in v6.0.0\r\n- Update _@sap/node-jwt_ to v1.6.9 (contains binaries for PowerPC little endian)\r\n- Update _@sap/node-vsi_ to v1.4.18 (contains binaries for PowerPC little endian)\r\n\r\n<a name=\"6.0.3\"></a>\r\n## 6.0.3 - 2020-05-18\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.0.2\r\n\r\n<a name=\"6.0.2\"></a>\r\n## 6.0.2 - 2020-04-29\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v7.0.0\r\n- Update _@sap/node-jwt_ to v1.6.8\r\n- Update _@sap/node-vsi_ to v1.4.17\r\n- Update _@sap/hdbext_ to v6.2.2\r\n- Update _@sap/hana-client_ to v2.4.196\r\n\r\n<a name=\"6.0.1\"></a>\r\n## 6.0.1 - 2020-04-16\r\n\r\n### Fixed\r\n- Adjustments to avoid _IsGlobalEmpty_ crash with `$.db` and `$.hdb` have been added\r\n- Performance when executing queries with `$.db` and `$.hdb` has been improved\r\n\r\n<a name=\"6.0.0\"></a>\r\n## 6.0.0 - 2020-03-13\r\n\r\n### Added\r\n- Node.js 12.x support.\r\n\r\n### Removed\r\n- Support for Node.js versions 6.x and 8.x\r\n- Support (pre-built binaries) for PowerPC big endian.\r\n\r\n### Fixed\r\n- Update _@sap/xssec_ to v2.2.5\r\n- Update _@sap/xsodata_ to v6.0.0\r\n- Update _@sap/hana-client_ to v2.4.182\r\n- Update _@sap/hdbext_ to v6.2.0\r\n- Update _@sap/fibers_ to v4.0.3-0\r\n- Update _@sap/fibrous_ to v0.5.0-5\r\n- Update _@sap/node-jwt_ to v1.6.7\r\n- Update _@sap/node-vsi_ to v1.4.16\r\n\r\n<a name=\"5.3.1\"></a>\r\n## 5.3.1 - 2019-12-17\r\n\r\n### Fixed\r\n- Update _@sap/xsenv_ to v2.2.0\r\n- Update _@sap/xsodata_ to v5.0.0\r\n\r\n<a name=\"5.3.0\"></a>\r\n## 5.3.0 - 2019-11-20\r\n\r\n### Added\r\n- Audit logging could be disabled now (providing audit log configuration is optional).\r\n\r\n### Fixed\r\n- Update _@sap/hana-client_ to v2.4.167\r\n\r\n<a name=\"5.2.3\"></a>\r\n## 5.2.3 - 2019-10-31\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v4.7.0\r\n\r\n<a name=\"5.2.2\"></a>\r\n## 5.2.2 - 2019-10-25\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v4.6.0\r\n- Update _@sap/hdbext_ to v6.1.0 (adds support for synonyms as table parameters in procedures)\r\n\r\n<a name=\"5.2.1\"></a>\r\n## 5.2.1 - 2019-09-19\r\n\r\n### Fixed\r\n- Integrate _nodemailer_ v6.2.1\r\n- Update dependencies\r\n- Locale of database connections when no locale information is present in the incoming request (the driver's default is now used)\r\n- `var`s and `function`s from `xsjslib`s are now enumerable\r\n\r\n<a name=\"5.2.0\"></a>\r\n## 5.2.0 - 2019-06-06\r\n\r\n### Added\r\n- Node 10 support\r\n\r\n### Fixed\r\n- Updated dependencies\r\n\r\n<a name=\"5.1.0\"></a>\r\n## 5.1.0 - 2019-05-20\r\n\r\n### Fixed\r\n- Remove `x-powered-by` response header\r\n- Update `nodemailer` to v4.3.1\r\n- Update `express` to v4.16.4\r\n\r\n### Added\r\n- Adopt *@sap/hana-client* v2.4.139\r\n\r\n<a name=\"5.0.0\"></a>\r\n## 5.0.0 - 2019-02-05\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v4.4.0\r\n- Update _@sap/fibers_ to 3.1.1-1\r\n- Update _@sap/fibrous_ to 0.5.0-4\r\n\r\n### Removed\r\n- The support for Node.js v4.x\r\n\r\n<a name=\"4.0.2\"></a>\r\n## 4.0.2 - 2019-01-21\r\n\r\n### Added\r\n- Flag to disable setting XS_APPLICATIONUSER\r\n\r\n### Fixed\r\n- Update _@sap/hdbext_ to v5.1.0.\r\n\r\n## 4.0.1 - 2018-10-22\r\n\r\n### Fixed\r\n- Update _@sap/xsodata_ to v4.3.0.\r\n\r\n## 4.0.0 - 2018-10-04\r\n\r\n### Changed\r\n- Providing `auditLog` options is now mandatory.\r\n- Underlying database driver is now *@sap/hana-client*.\r\n- Due to the changed driver, precision and scale in metadata may differ for some data types (e.g. REAL, FLOAT, DOUBLE, BLOB).\r\n- `$.db.ResultSetMetaData.getCatalogName` now throws an exception instead of returning a value.\r\n- `$.db.ResultSetMetaData.getColumnDisplaySize` now throws an exception instead of returning a value.\r\n- String representations of SECONDDATE and TIMESTAMP are in a different format (without 'T'). The format now is: *YYYY-MM-DD HH24:MI:SS.FF*, the format in previous versions was: *YYYY-MM-DDTHH24:MI:SS.FF*.\r\n- `$.hdb`, calling stored procedures with input table parameters: since default data type conversions are not performed over input table parameters,\r\nand since *@sap/hana-client* is more restrictive on values provided for DATE and TIME types compared to the hdb driver,\r\nscenarios with input table parameters and table content provided as an array of objects will now throw if the input table parameter has DATE or TIME columns and the values  are provided as Date objects.\r\n- `$.db.ResultSet.close` does not close the result set. All results will be closed when the corresponding statement is closed.\r\n\r\n### Added\r\n- `typeName` property in result set metadata of `$.hdb`.\r\n\r\n### Fixed\r\n- `$.db`, string representations of TIMESTAMPs have all the digits from the fractional seconds that are stored in the database.\r\n- Return values of `$.db.ParameterMetaData.getParameterMode` is now aligned with XS Classic.\r\n- `$.db`, parameter and result set metadata - prior to this version `getPrecision` returned the scale and `getScale` returned the precision. These methods are now fixed.\r\n- `$.db.PreparedStatement.executeBatch` now returns a value - an array with integers representing the number of updated rows per batch.\r\n- Type of ALPHANUM columns is now ALPHANUM instead of NVARCHAR.\r\n- Type of SECONDDATE columns is now SECONDDATE instead of TIMESTAMP.\r\n- Type of SHORTTEXT columns in result set metadata is now SHORTTEXT instead of NVARCHAR. Note that parameter metadata returns NSTRING for SHORTTEXT as in versions prior to this one.\r\n- Type of TEXT columns is now TEXT instead of NCLOB.\r\n- Type of BINTEXT columns is now BINTEXT instead of NCLOB.\r\n\r\n## 3.7.0 - 2018-10-04\r\n\r\n### Added\r\n- Integration with Audit log service.\r\n\r\n## 3.6.0 - 2018-09-20\r\n\r\n### Added\r\n- Support for CF Log format (via adopting _@sap/logging_ v4).\r\n\r\n### Fixed\r\n- Updated dependencies.\r\n\r\n## 3.5.0 - 2018-09-04\r\n\r\n### Added\r\n- `enableColumnIndices` option in `$.hdb.getConnection` with which column indices for result sets can be turned off (improves performance).\r\nDefaults to `true`.\r\n- Warning log for aborted requests.\r\n\r\n### Fixed\r\n- Conversion of input strings for binary data types.\r\n- Documentation improvements.\r\n- Updated dependencies.\r\n\r\n## 3.4.2 - 2018-07-10\r\n\r\n### Fixed\r\n- Updated @sap/hdbext to 4.7.3\r\n- Fix regression caused by performance optimization in `$.import` for Node.js 6 and up ( this optimization has been removed )\r\n- Clean up acquired database connections for aborted requests\r\n\r\n## 3.4.1 - 2018-06-26\r\n\r\n### Fixed\r\n- Imported (via `$.import`) but unused `xsjslib`s are no longer loaded\r\n(applicable to Node.js 6 and up)\r\n- Performance during attaching column indices for `$.hdb` result sets\r\n(applicable to Node.js 6 and up)\r\n\r\n## 3.4.0 - 2018-05-28\r\n\r\n### Added\r\n- Enable setting maxBodySize\r\n\r\n### Fixed\r\n- Use @sap/xsodata feature for lazy db connection creation\r\n- Updated dependencies\r\n\r\n## 3.3.7 - 2018-04-23\r\n\r\n### Fixed\r\n- Updated @sap/xsodata to 3.6.0\r\n\r\n## 3.3.6 - 2018-04-20\r\n\r\n### Fixed\r\n- Update @sap/xssec to 2.1.10\r\n\r\n## 3.3.5 - 2018-04-19\r\n\r\n### Fixed\r\n- Update @sap/fibers to 2.0.2-0\r\n- Update @sap/fibrous to 0.5.0-3\r\n\r\n## 3.3.4 - 2018-04-06\r\n\r\n### Added\r\n- A note in the documentation regarding the `redirectUrl` option.\r\n\r\n### Fixed\r\n- Update dependencies\r\n\r\n## 3.3.3 - 2018-03-12\r\n\r\n### Fixed\r\n- Improved performance of $.hdb.\r\n\r\n## 3.3.2 - 2018-03-02\r\n\r\n### Fixed\r\n- Fix callable statement output params.\r\n\r\n## 3.3.1 - 2018-02-26\r\n\r\n### Fixed\r\n- Incorrect milliseconds in TIMESTAMPS.\r\n\r\n## 3.3.0 - 2018-02-21\r\n\r\n### Changed\r\n- `@sap/xsodata` version.\r\n\r\n### Added\r\n- DSR metrics.\r\n\r\n### Fixed\r\n- Trailing zeros of decimals will not be removed.\r\n- Performance issue for string to date conversions in $.hdb.\r\n\r\n## 3.2.1 - 2018-02-13\r\n\r\n### Changed\r\n- `@sap/xsodata` version.\r\n\r\n### Fixed\r\n- `sqlcc` user overrides default one.\r\n- Returned error code in batch affected rows.\r\n\r\n## 3.2.0 - 2018-01-23\r\n\r\n### Added\r\n- npm-shrinkwrap.json\r\n\r\n## 3.1.0 - 2018-01-16\r\n\r\n### Added\r\n- Result set indices in $.hdb after output type conversions.\r\n- Support for gzipped and deflated requests.\r\n- Expose security context to XSJS code.\r\n- Documentation for `redirectUrl` and `libraryCache`.\r\n\r\n### Fixed\r\n- Missing $.request.body in some requests.\r\n- Always return array result for batch update.\r\n\r\n## 3.0.0 - 2017-12-06\r\n\r\n### Changed\r\n- An array of affected rows is returned for failed batch inserts via $.hdb instead of throwing an error.\r\n\r\n### Added\r\n- Node 8 support.\r\n- Support for tilde (`~`) headers (except for `~server` headers).\r\n\r\n### Fixed\r\n- Update dependencies.\r\n\r\n## 2.1.2 - 2017-11-27\r\n\r\n### Fixed\r\n- Updated dependencies.\r\n- Apply compatible formatting for decimal strings.\r\n- Warning messages for files that will be ignored.\r\n\r\n## 2.1.1 - 2017-10-17\r\n\r\n### Changed\r\n- Dependencies' versions.\r\n\r\n## 2.1.0 - 2017-10-13\r\n\r\n### Added\r\n- The authorization header is now exposed to application code.\r\n- Improvements to documentation.\r\n\r\n### Fixed\r\n- Locale handling in OData.\r\n\r\n### Changed\r\n- Dependencies' versions.\r\n\r\n## 2.0.0 - 2017-08-28\r\n\r\n### Changed\r\n- Missing UAA configuration when anonymous access is not enabled results in an error during application startup.\r\n- Not valid files (e.g. .xsjs files with syntax errors) cause an error during application startup.\r\n- $.hdb.ResultSetMetadata has been incompatibly changed (compared to @sap/xsjs v1) in order to become more compatible with XS Classic.\r\n\r\n### Removed\r\n- The deprecated xsjs.extend function.\r\n- The support for the 'jwt' option (use the 'uaa' option instead).\r\n- The support for Node.js v0.12.x.\r\n\r\n### Fixed\r\n- `$.session.language` now fallbacks to the value of `$.request.language` if `xsSessionLanguage` cookie is not present.\r\n\r\n## 1.16.4 - 2017-07-28\r\n\r\n### Added\r\n- Provide a request-specific logger to @sap/xsodata.\r\n\r\n### Fixed\r\n- Upload of binary files.\r\n\r\n## 1.16.3 - 2017-07-17\r\n\r\n### Fixed\r\n- $.session missing in OData exits.\r\n- Errors from `.xsjs` files not handled properly.\r\n\r\n## 1.16.2 - 2017-07-04\r\n\r\n### Fixed\r\n- `.xsaccess` rewrite rules scope.\r\n- Default conversions on input parameters.\r\n- Retrieval of job logs\r\n- `$.hdb.rollback` is executed synchronously.\r\n\r\n## 1.16.1 - 2017-06-02\r\n\r\n### Added\r\n- Support for HTTP method PATCH in $.request.method.\r\n\r\n### Fixed\r\n- Fix database connection pooling.\r\n- Trace uncaught exceptions stack trace.\r\n- Log package version and Node version.\r\n- Improvements in README.md.\r\n\r\n## 1.16.0 - 2017-05-09\r\n\r\n### Added\r\n- Support for Date objects as input parameters in $.hdb.\r\n- Support for the treatDateAsUTC flag for $.hdb connections.\r\n- Performance improvements via adopting @sap/logging version 3.\r\n\r\n### Fixed\r\n- Typo in the name of the category used for logging.\r\n- Getting null values from $.db.ResultSet.\r\n- Automatic closing of database connections.\r\n\r\n### Changed\r\n- The entry point of the application being accessed is used as a location of $.trace API entries.\r\n\r\n## 1.15.1 - 2017-04-13\r\n\r\n### Fixed\r\n - Allow query parameters for OData $batch requests\r\n\r\n## 1.15.0 - 2017-04-06\r\n\r\n### Added\r\n - API for clearing OData model cache.\r\n\r\n## 1.14.2 - 2017-04-04\r\n\r\n### Fixed\r\n - http compression was not enabled when configured.\r\n\r\n### Added\r\n - README.md table of content.\r\n\r\n## 1.14.1 - 2017-03-20\r\n\r\n### Fixed\r\n -\tResultSet::getTimestamp regression when getting `null` values.\r\n -\t`xsjob` can refer `.xsjs` files placed in the application root directory.\r\n\r\n## 1.14.0 - 2017-03-13\r\n\r\n### Added\r\n- Multitenancy support via integration with Instance Manager\r\n\r\n## 1.13.1 - 2017-02-21\r\n\r\n### Fixed\r\n- Fix jobs execution with authentication.\r\n- Improve ResultSet getters parameter validation and functionallity.\r\n- Fix $.session.hasAppPrivilege when using anonymous access.\r\n\r\n## 1.13.0 - 2017-01-30\r\n\r\n### Added\r\n- Adding, altering and deleting entries from Zip objects.\r\n- Log error for jobs without HANA config.\r\n\r\n### Changed\r\n- Rename package to use @sap scope\r\n\r\n### Fixed\r\n- npm restriction.\r\n\r\n## 1.12.0 - 2017-01-06\r\n\r\n### Added\r\n- Column indexing functionality for $.hdb.ResultSet\r\n- SAP passport support when connecting to db\r\n\r\n### Fixed\r\n- Jobs callback url\r\n- Direct execution of queries in $.hdb\r\n\r\n## 1.11.4 - 2016-11-25\r\n\r\n### Fixed\r\n- Fix in xsodata: use same quoting semantic for input parameters of calcviews as in XS Classic\r\n\r\n## 1.11.3 - 2016-11-16\r\n\r\n### Fixed\r\n- Adapt Zip objects in xsjs APIs\r\n- Align TupelList behavior\r\n- Fix ReDoS issue in negotiator\r\n- Use getter/setter for library execution result property assignment\r\n- Do not trace an error stack for 4xx status codes\r\n- Document decimal column incompatibility\r\n- Use default previous component name in SAP passport\r\n\r\n## 1.11.2 - 2016-10-14\r\n\r\n### Fixed\r\n - Fixes database connectivity\r\n\r\n## 1.11.1 - 2016-10-13\r\n\r\n### Fixed\r\n - Fixes in xsodata\r\n\r\n## 1.11.0 - 2016-10-11\r\n\r\n### Fixed\r\n - Minor fixes and improvements\r\n\r\n## 1.10.1 - 2016-09-28\r\n\r\n### Fixed\r\n - Fixes in xsodata\r\n\r\n## 1.10.0 - 2016-09-28\r\n\r\n### Added\r\n - $.util.Zip\r\n - $.util.SAXParser\r\n\r\n### Fixed\r\n - Align content-type header values with XS Classic\r\n - Minor bug fixes\r\n\r\n## 1.9.0 - 2016-08-29\r\n\r\n### Added\r\n - HANA connection pooling\r\n - Support for Node.js v6\r\n\r\n## 1.8.0 - 2016-08-05\r\n\r\n### Added\r\n - 'context' property in xsjs bootstrap options which can be used if you want to extend the xsjs scripts with additional global variables\r\n\r\n### Fixed\r\n - Fixes in database connectivity\r\n\r\n## 1.7.0 - 2016-07-13\r\n\r\n### Added\r\n - $.util.compression\r\n - $.text.mining support\r\n - Support for compression\r\n"},{"name":"differences.md","content":"# Differences between XSJS on Node.js and HANA XS Classic\r\n\r\n<!-- toc -->\r\n\r\n- [Legacy Database API ($.db)](#legacy-database-api-db)\r\n- [Database API ($.hdb)](#database-api-hdb)\r\n- [Jobs API ($.jobs)](#jobs-api-jobs)\r\n- [Network API ($.net)](#network-api-net)\r\n- [Security API ($.security)](#security-api-security)\r\n- [Session API ($.session)](#session-api-session)\r\n- [Text Analysis and Text Mining ($.text)](#text-analysis-and-text-mining-text)\r\n- [Trace API ($.trace)](#trace-api-trace)\r\n- [Util API ($.util)](#util-api-util)\r\n- [Request Processing API ($.web)](#request-processing-api-web)\r\n- [ODATA](#odata)\r\n- [Repository access ($.repo)](#repository-access-repo)\r\n- [JavaScript VM](#javascript-vm)\r\n- [Other](#other)\r\n\r\n<!-- tocstop -->\r\n\r\n## Legacy Database API ($.db)\r\n* getX functions where X is some type\r\n  * do not perform as many type conversions as in HANA XS Classic\r\n* `$.db.ResultSet.getString()`\r\n  * works for unicode characters (e.g. if the column from the ResultSet is NSTRING)\r\n* `$.db.ResultSet.getClob()`\r\n  * works for unicode characters (e.g. if the column from the ResultSet is NCLOB)\r\n* `$.db.ResultSet.close` does not close the result set.\r\n* ParameterMetaData\r\n  * getParameterType and getParameterTypeName may return different values from HANA XS Classic, e.g.\r\n    * NSTRING returned instead of SHORTTEXT\r\n    * DECIMAL returned instead of SMALLDECIMAL\r\n  * table output parameters from stored procedures are not described in ParameterMetaData\r\n  * isNullable - Not supported\r\n  * isSigned - Not supported\r\n  * hasDefault - Not supported\r\n* ResultSetMetaData\r\n  * getColumnType and getColumnTypeName may return different values from HANA XS Classic, similarly to ParameterMetaData\r\n  * getCatalogName - Not supported\r\n  * getColumnDisplaySize - Not supported\r\n* PreparedStatement, CallableStatement - setDate, setTime, setTimestamp\r\n  * not all date/time formats are supported\r\n\r\n## Database API ($.hdb)\r\n* The ResultSet metadata object does not contain the following properties:\r\n  * catalogName\r\n  * displaySize\r\n* The ResultSet metadata uses `true` and `false` instead of `1` and `0` for the isNullable property\r\n* Date objects received for the TIME data type may have arbitrary values for year, month and day.\r\n* Values returned for the TEXT and BINTEXT data types are strings instead of ArrayBuffers.\r\n* Objects representing a date-time value via a string and optionally a format for parsing (for example, `{ '$date': '...' }` or `{ '$timestamp': '...', '$format': '...' }`) are not supported as input parameters.\r\n* Default conversions are not applied for input table parameters.\r\n* `$.hdb.ResultSet`\r\n  * if there is a column with a numeric name (e.g. \"99\") and this number is equal\r\nor greater than the number of columns, accessing this column by name (e.g. `row[\"99\"]`)\r\nin XS Classic returns `undefined` while in XS Advanced it returns the column value.\r\n  * columns with numeric names which are within the range of possible column indices\r\n  are non-enumerable in XS Advanced.\r\n* Values of INOUT/OUT procedure parameters are retrieved using upper case parameter names.\r\n* It is possible to execute a `CALL` procedure statement with `$.hdb.Connection.executeQuery` or `$.hdb.Connection.executeUpdate`.\r\nOutput parameters cannot be retrieved from the result of such a call,\r\nonly the first output table is returned (if there are any output tables).\r\n**Note** that this is not supported in XS Classic and is not recommended to be used in _@sap/xsjs_.\r\n`$.hdb.Connection.loadProcedure` or `$.db.Connection.prepareCall` should be used instead.\r\n\r\n## Jobs API ($.jobs)\r\n* All jobs (defined in `.xsjob` files) are active by default\r\n* `$.jobs.Job`\r\n  * `sqlcc` property in the constructor parameter is not supported\r\n  * `getConfiguration` method is not supported\r\n* In XS Classic the ID of a job schedule is a number, while in XSJS it is a uuid (a string with 36 characters)\r\n* In XSJS only a Date object is accepted for a date/time property, while XS Classic accepts also an object with `value` and `format` properties allowing custom date formats\r\n* The `JobLogObject` does not support the following properties:\r\n  * host\r\n  * port\r\n  * action\r\n  * user\r\n  * thread_id\r\n\r\n## Network API ($.net)\r\n* Destinations\r\n  * only the following properties are supported - host, port, pathPrefix, useProxy, proxyHost, proxyPort, authType, username, password\r\n* Mail, SMTPConnection\r\n  * proxy support and Digest-MD5 authentication method are not supported\r\n\r\n## Security API ($.security)\r\nSupported.\r\n**Note:** `$.security.Store` - store files are created automatically\r\n\r\n## Session API ($.session)\r\n\r\nOnly the following properties are supported:\r\n  * user\r\n  * language\r\n  * getUsername()\r\n  * hasAppPrivilege()\r\n  * assertAppPrivilege()\r\n\r\n**Note:** `$.session.language` - holds the same value as `$.request.language` unless `xsSessionLanguage` cookie is set. In comparison to XS Classic, XSJS does not set this cookie. In case the `xsSessionLanguage` cookie is provided, it will be honored in the same manner as in XS Classic.\r\n\r\nNew properties supported:\r\n  * securityContext - holds the security context provided by `@sap/xssec` security library. This property will be `undefined` in case there is no authenticated user, e.g. the application does not require authentication. The security context provides synchronous and asynchronous functions. Calling sync functions is straight forward, while calling async functions should be done by adding `.sync` property. See [NPM packages support](README.md#npm-packages-support).\r\n\r\n\r\n## Text Analysis and Text Mining ($.text)\r\n$.text.mining supported.<br />\r\n$.text.analysis supported when _@sap/xsjs_ is connected to HANA 2.0.\r\n\r\n## Trace API ($.trace)\r\nSupported.\r\n\r\n## Util API ($.util)\r\n * $.util.Zip is partially supported:\r\n    * Originally in XS Classic the Zip constructor accepts setting object with two properties: `password` and `maxUncompressedSizeInBytes`.\r\n      Currently password-protected zips are not supported so the `password` property is forbidden.\r\n    * If an entry is added to a Zip object its value no longer gets converted to ArrayBuffer, but remains the same.\r\n\r\n * $.util.compression.gunzip does not support the `maxUncompressedSizeInBytes` parameter.\r\n * $.util.SAXParser - partial support.\r\n    * `stop` and `resume` methods are not supported.\r\n    * `currentByteIndex`, `currentColumnNumber` and `currentLineNumber` properties are not supported.\r\n    * `attlistDeclHandler`, `endDoctypeDeclHandler`, `endNameSpaceDeclHandler`, `entityDeclHandler`, `externalEntityRefHandler`, `notationDeclHandler`, `processingInstructionHandler`, `startDoctypeDeclHandler`, `startNameSpaceDeclHandler`, `xmlDeclHandler` handlers are not supported.\r\n    * namespaces and entities are not supported.\r\n\r\n## Request Processing API ($.web)\r\nSupported with the following differences:\r\n- Headers starting with _~server_ are not available.\r\n- Duplicated custom incoming request headers are represented as joined headers. For example, if a client sends a header `abc` once with value of `1` and second time with a value of `2`,\r\n`$.request.headers.get('abc')` will result into `'1, 2'` instead of `['1', '2']`.\r\n- webResponse.setBody(body) - In XS Classic if body is null, undefined or object, an exception is thrown. In XS Advanced the response is 'null', 'undefined' and JSON.stringify(object), respectively.\r\n\r\n## ODATA\r\nSupported, including SQL and JavaScript exists.\r\n\r\n## Repository access ($.repo)\r\nNot supported.\r\n\r\n## JavaScript VM\r\nNode.js uses V8 from Google, while HANA XS uses SpiderMonkey from Mozilla.\r\n* In XS Classic xsjs:\r\n  * always runs implicitly in strict mode.\r\n  * supports conditional catches (non-standard):\r\n    ```js\r\n    try {\r\n        willfail() // throws FooException\r\n    } catch (e if e instanceof FooException) {\r\n        //do something\r\n    }\r\n    ```\r\n    Node.js / V8 does not support this `if` construct in the catch statement - you can only provide a single parameter name, e.g. 'e'.\r\n\r\n* `instanceof` - `.xsjs` files run in isolated contexts which have different references for the built-in Node.js types.\r\n This will cause `instanceof` not to work as expected. You can take a look on [this issue](https://github.com/nodejs/node-v0.x-archive/issues/1277) in Node.js.\r\n This issue applies for built-in types like:  **Array**, **String**, **RegExp**, **Number**, etc.<br />\r\n For **Array**, you should use `Array.isArray` instead of `instanceof Array`.<br />\r\n For **String** it is suitable to use `typeof`.\r\n* With newer versions of Node.js (and V8 respectively), there might be fixes in the time zone offsets which can result in different string representations of `Date` objects (which take the timezone offset into consideration) compared to XS Classic.\r\n\r\n## Other\r\n * DXC (Direct Extractor Connection) and xsxmla are not supported.\r\n * Constants inside `.xsjslib` (defined with `const`) are not visible outside the library.\r\n"},{"name":"README.md","content":"@sap/xsjs\r\n===========\r\n\r\nCompatibility layer for SAP HANA extended application services, classic model (SAP HANA XS Classic) applications to run on Node.js in SAP HANA extended application services, advanced model.\r\n\r\n<!-- toc -->\r\n\r\n- [Usage](#usage)\r\n  * [Options](#options)\r\n    + [hana](#hana)\r\n    + [secureStore](#securestore)\r\n    + [formData](#formdata)\r\n    + [mail](#mail)\r\n    + [destinationProvider](#destinationprovider)\r\n    + [auditLog](#auditlog)\r\n    + [context](#context)\r\n    + [libraryCache](#librarycache)\r\n    + [Multitenant usage](#multitenant-usage)\r\n- [OData support](#odata-support)\r\n  * [Clear OData model cache](#clear-odata-model-cache)\r\n- [NPM packages support](#npm-packages-support)\r\n- [Destinations support](#destinations-support)\r\n    + [Via user provided services](#via-user-provided-services)\r\n    + [Via custom provider function](#via-custom-provider-function)\r\n- [Accessing column values by index in *$.hdb.ResultSet* rows](#accessing-column-values-by-index-in-hdbresultset-rows)\r\n- [Tracing via *$.trace* API](#tracing-via-trace-api)\r\n- [Troubleshooting](#troubleshooting)\r\n- [Differences with HANA XS Classic](#differences-with-hana-xs-classic)\r\n\r\n<!-- tocstop -->\r\n\r\nFor the API of XS Engine\r\n  * [SAP HANA XS JavaScript Reference](http://help.sap.com/hana/SAP_HANA_XS_JavaScript_API_Reference_en/)\r\n\r\n\r\n## Usage\r\nIt is as simple as it could be.\r\n```js\r\n'use strict';\r\n\r\nvar xsenv = require('@sap/xsenv');\r\nvar xsjs = require('@sap/xsjs');\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar options = xsenv.getServices({\r\n    uaa: 'xsuaa',\r\n    hana: 'hana-hdi',\r\n    jobs: 'scheduler',\r\n    mail: 'mail',\r\n    secureStore: 'secureStore',\r\n    auditLog: 'audit-log'\r\n});\r\nxsjs(options).listen(port);\r\n\r\nconsole.log('Node XS server listening on port %d', port);\r\n```\r\n\r\nThe starting function takes an object that contains service credentials and application options.\r\n\r\nYou will need to setup the Application Router for authentication.\r\nFor a step by step tutorial see *Use the XSJS Compatibility Layer in XS Advanced*\r\nin *SAP HANA Developer Guide for SAP HANA XS Advanced Model*.\r\n\r\nFor local testing you can set `options.anonymous = true` to disable authentication.\r\n\r\n### Options\r\n\r\nHere is a list with options you can provide:\r\n\r\n| property | default | usage |\r\n| -------- | ------- | ----- |\r\n| rootDir | 'lib' | xsjs files location |\r\n| rootDirs |  | same as above, but array of directories can be provided, overrides rootDir if provided |\r\n| uaa |  | UAA configuration necessary to enable JWT token authentication and business user propagation to HANA |\r\n| [hana](#hana) |  | object containing HANA DB connection parameters, used for DB connectivity |\r\n| [secureStore](#secureStore) |  | object containing HANA DB connection parameters, used for secure store connectivity |\r\n| jobs |  | Job scheduler connection parameters used to register jobs during application startup and later for updating job execution status when job finished |\r\n| [mail](#mail) |  | Mail options, used by $.net.Mail API |\r\n| maxBodySize | '1mb' | Maximum body size accepted by xsjs. The value is passed to the [bytes library](https://www.npmjs.com/package/bytes) for parsing. |\r\n| anonymous | false | Enable anonymous access, i.e. without credentials |\r\n| [formData](#formdata) |  | Special restrictions over form-data submitted to server |\r\n| [destinationProvider](#destinationProvider) |  | Custom function, synchronous or asynchronous, to be used when $.net.http.readDestination is called in XSJS code. For more information on destinations support, check the detailed description for this configuration option. |\r\n| ca | certificates listed in `XS_CACERT_PATH` env var | Trusted SSL certificates for any outgoing HTTPS connections. Should be an array of loaded certificates. |\r\n| compression | true | By default text resources over 1K are compressed. |\r\n| [auditLog](#auditlog) |  | Object containing Audit log service credentials. If not provied audit logging will be disabled. If set to `{ logToConsole: true }` audit log messages will be written on the console (only suitable for non-productive setup, e.g. local development).|\r\n| [context](#context) | {} | Extend the default context in xsjs scripts. |\r\n| [libraryCache](#librarycache) | {} | Contains the xsjslibs that should be cached. |\r\n| redirectUrl | | If specified, a redirect to this url is triggered when the root path is requested. **Note**: When xsjs is behind a reverse proxy (Application Router for instance), the value of this property should be aligned with the path rewriting rules that may apply. |\r\n| xsApplicationUser | true | If set to false, the session variable `XS_APPLICATIONUSER` will not be set. |\r\n\r\n**Note:** When there are several rootDirs (for example: repo1 and repo2) and their file strucutre is equivalent (/repo1/hello.xsjs and /repo2/hello.xsjs) the file from the first directory (as listed in the 'rootDirs' property) will be used (/repo1/hello.xsjs) and the file from the second directory (/repo2/hello.xsjs) will be ignored with a warning message in the logs.\r\n\r\nSAP HANA XS Advanced applications connect to HANA with a fixed technical user provided via CloudFoundry service (environment variables). The actual (business) user of the application is retrieved from the JWT token and propagated to HANA.\r\n\r\nThe connection to Job scheduler service is done with a fixed technical user provided by the CloudFoundry service binding.\r\n\r\n\r\n#### hana\r\n\r\n| property | mandatory | usage |\r\n| -------- | ----- | -------- |\r\n| host | x | DB host |\r\n| port | x | DB port |\r\n| user | x | Technical user used for DB connection |\r\n| password | x | Technical user password |\r\n| schema |  | If provided will be set as current schema to DB connection |\r\n| connectWithLoggedUser |  | Possible values are `true` / `false`, default is `false`. If provided the DB connection will be done with the SAML assertion contained in the JWT token of the logged user. **Note:** This option is provided only for HANA cockpit transition to SAP HANA XS Advanced. In general this option should be avoided. |\r\n| sqlcc |  | Object containing all SQLCC configurations as properties with name after  SQLCC name used in XSJS code |\r\n| ca |  | Trusted SSL certificates explicitly for HANA connection. Should be an array of loaded certificates. If not provided, certificate from service binding will be used. If none are available HANA connection will not be encrypted. |\r\n\r\n- `sqlcc` - referring to the example above, SQLCC property can be initialized from the bound services like this:\r\n\r\n```js\r\n...\r\noptions.hana.sqlcc = xsenv.getServices({\r\n  'com.sap.my.sqlcc_config': 'SQLCC__NAME',\r\n  'com.sap.my.other_sqlcc_config': 'OTHER_SQLCC_UPS_NAME'\r\n  });\r\n...\r\n```\r\n\r\nand used later in xsjs code like:\r\n```js\r\nvar connection = $.db.getConnection('com.sap.my.sqlcc_config');\r\n```\r\n\r\n\r\n#### secureStore\r\n\r\n| property | mandatory | usage |\r\n| -------- | ----- | -------- |\r\n| host | x | DB host |\r\n| port | x | DB port |\r\n| user | x | Technical user used for DB connection |\r\n| password | x | Technical user password |\r\n| schema |  | If provided will be set as current schema to DB connection |\r\n\r\n\r\n\r\n#### formData\r\n\r\nobject with following properties:\r\n\r\n| property | default | usage |\r\n| -------- | ------- | ----- |\r\n| maxFilesSizeInBytes | `10485760` | It restricts the total size of all the uploaded files. |\r\n\r\n\r\n#### mail\r\n\r\nobject with following properties:\r\n\r\n| property | mandatory | usage |\r\n| -------- | ----- | -------- |\r\n| host | x | SMTP server host. |\r\n| port | x | SMTP server port. |\r\n| ignoreTLS |  | Could be `true` or `false`. This represents whether a STARTTLS command should be invoked if available by the mail server. Defaults to `false`. |\r\n| secure |  | Could be `true` or `false`. This represents whether the connection should be over TLS/SSL. Defaults to `false`. |\r\n| connectionTimeout |  | Connection timeout in ms. Defaults to 60000. |\r\n| authMethod |  | Authentication method to use. Could be 'PLAIN' / 'LOGIN' / 'CRAM-MD5'. |\r\n| auth |  | Authentication credentials. Example: {user: 'user', pass: 'pass'} The default is no authentication. |\r\n\r\n\r\n#### destinationProvider\r\n\r\nIf your application requires different mechanism for destination configuration for example dynamic configuration changes or dynamically adding new destinations to your application, you can provide own function that retrieves these configurations from your storage.\r\n\r\nFor convenience we support synchronous and asynchronous destination provider function. Depending on the number of parameters your function has we call it synchronously or asynchronously.\r\n\r\nHere are the signatures for both:\r\n\r\n```js\r\nfunction getDestinationSync(packagename, objectname, dtDescriptor) {\r\n}\r\n\r\nfunction getDestinationAsync(packagename, objectname, dtDescriptor, callback) {\r\n}\r\n```\r\n\r\n\r\n| parameter | description |\r\n| -------- | --------- |\r\n| packagename | the package of the destination supplied to $.net.http.readDestination |\r\n| objectname | the object name of the destination supplied to $.net.http.readDestination |\r\n| dtDescriptor | object containing all properties contained in the corresponding .xshttpdest file, if such file is available, otherwise __undefined__ |\r\n| callback | provided only in the asynchronous case - should be called by your provider function to return the destination or report error  |\r\n\r\n#### auditLog\r\n\r\nThis package audit logs entries in the following cases:\r\n- when the validation of the incoming JWT token fails\r\n- when the token in the request used to trigger a job does not contain the required scope\r\n\r\nApplications can also write audit log messages:\r\n\r\n```js\r\nvar xsjs = require('@sap/xsjs');\r\nvar xsenv = require('@sap/xsenv');\r\nvar auditLogging = require('@sap/audit-logging');\r\n\r\nvar port = process.env.PORT || 3000;\r\nvar options = xsenv.getServices({ auditLog: 'audit-log', uaa: 'xsuaa', hana: 'hana-hdi' });\r\n\r\n// Using Audit log REST API v2\r\nauditLogging.v2(options.auditLog, function (err, auditLog) {\r\n  if (err) {\r\n    return console.log('Could not create audit log client:', err);\r\n  }\r\n\r\n  options.context = { auditLog: auditLog };\r\n  xsjs(options).listen(port);\r\n});\r\n```\r\n\r\n**Note**: Check in advance whether the Audit log service to be used supports REST API v2\r\n(note the invocation of the `v2` method of `auditLogging`).\r\nOtherwise instantiate a client object that works with Audit log REST API v1:\r\n\r\n```js\r\n// Using Audit log REST API v1\r\nvar auditLog = auditLogging(options.auditLog);\r\n```\r\n\r\nIt is recommended to use Audit log REST API v2 if available.\r\nRefer to the documentation of the _@sap/audit-logging_ package for more information.\r\n\r\nThe audit log client object can then be used as following:\r\n\r\n```js\r\nauditLog\r\n  .securityMessage('Content of the message')\r\n  .by($.session.getUsername())\r\n  .sync.log();\r\n```\r\n\r\n**Note**: The usage of `sync` before `log` - this ensures that the call to the Audit log service is synchronous.\r\n\r\n**Note**: `$.session.getUsername()` returns `undefined` in case `anonymous` mode is used. It is up to applications whether to use another string as user or not audit log at all.\r\n\r\n\r\n#### context\r\n\r\nThis option can be used if you want to extend the xsjs scripts with additional global variables.\r\n\r\nExample:\r\n\r\n```js\r\nvar xsjs = require('@sap/xsjs');\r\nvar options = {\r\n  anonymous: true,\r\n  context: { answer: 42 }\r\n};\r\nxsjs(options).listen(3000);\r\n```\r\n\r\nThis configuration extends the context of xsjs scripts with one additional variable called `answer`.\r\nEvery time an xsjs script is executed it will not only have the `$` variable in it's context, but it will also include variable `answer` with value `42`.\r\n\r\nLets have a file `answer.xsjs` with the following content:\r\n```js\r\n$.response.setBody(answer);\r\n```\r\nA request to `http://<your_domain>:3000/answer.xsjs` will respond with `42`.\r\n\r\nWith the `context` property set, you can expose Node.js packages and variables:\r\n```js\r\nvar options = {\r\n  anonymous: true,\r\n  context: { environment: process.env, _: require('lodash') }\r\n};\r\n```\r\n\r\nCurrently we are aware of a limitation, which causes `<variable> instanceof <constructor_function>` used in a xsjs script to have odd behaviour.\r\nAlso stubbing or mocking constructor functions such as `Date`, `String`, etc in a xsjs script won't affect other xsjs files.\r\n\r\nThe `context` property also finds usage in a workaround for this limitations. Setting:\r\n```js\r\nvar options = {\r\n  anonymous: true,\r\n  context: { Array: Array, String: String }\r\n};\r\n```\r\nwill fix these problems, but has side effects:\r\n\r\n* Creating an array in xsjs script and checking it's instance will now return false:\r\n```js\r\n  var myArray = [1, 2, 3];\r\n  $.response.setBody(myArray instanceof Array); // Responds with false\r\n```\r\n* Monkey-patching built-in types won't work as expected, if they are exposed through the `context` property:\r\n```js\r\n  String.prototype.contains = function(str) { return this.indexOf(str) >= 0; };\r\n  var stringLiteral = 'Abc';\r\n  var stringObject = new String('Abc');\r\n  console.log(stringLiteral.contains); // undefined\r\n  console.log(stringObject.contains); // [Function]\r\n```\r\nSince there might be other side effects, **use this feature at your own risk.**\r\n\r\n#### libraryCache\r\n\r\nAn object that contains the xsjslibs that will be cached. Example:\r\n\r\n```js\r\n{\r\n  'my.libs.utility': 'global'\r\n}\r\n```\r\n\r\nIn XSJS code the import looks like:\r\n\r\n```js\r\nvar utility = $.import('my.libs', 'utility');\r\n```\r\n\r\n**Note:** it is recommended to use this feature only when necessary because keeps the cached content until the application is running.\r\nIt might have side effects in case the xsjslib keeps state. It also leads to extensive memory consumption and this should be considered while calculating application memory limits.\r\n\r\n#### Multitenant usage\r\n\r\nIn multitenant scenarios, the `hana` and `secureStore` properties can contain an object with the credentials of a _managed-hana_ (Instance Manager) service (created with the appropriate service plan)\r\ninstead of the credentials of a _hana_ service. In this case the application will connect to a HANA system depending on the tenant (identity zone) of the incoming request.\r\nA managed service instance for the particular tenant should be created in advance and the corresponding database artefacts should be deployed prior to requesting the application with this tenant.\r\nOtherwise the processing of the request will be terminated with an error.\r\n\r\n**Note**: Currently jobs are not multitenant-aware. Jobs are shared between tenants and a connection to a HANA database cannot be established.\r\nA job executing xsjs code can still connect to a specific HANA service instance using SQLCC configuration.\r\n\r\n## OData support\r\n\r\nOData support is provided by OData package @sap/xsodata. Details on what features are provided can be found in the project itself. The compatibility layer scans for .xsodata files in the specified source directory and registers OData endpoints for each valid descriptor. Both JavaScript and SQL script exits are supported.\r\n\r\n### Clear OData model cache\r\n\r\nFor each OData service the model is loaded and cached in memory upon first request.\r\nIn case the schema of the underlying db objects is changed at runtime, it is necessary to reload the model. Here is an example:\r\n```js\r\nvar app = xsjs(options);\r\n\r\nfunction onSchemaChange(tenant) {\r\n  app.clearODataCache(tenant);\r\n}\r\n```\r\n`clearODataCache(tenant)` clears the OData model cache for the given tenant.\r\n`tenant` argument is optional. If not provided, the cache for all tenants will be cleared.\r\n\r\n**Note:** Each application instance contains a cache of OData models. Clearing the cache in one of those instances does not automatically trigger cache invalidation in the others. The application itself is responsible for calling `clearODataCache` in each instance. Since an HTTP request is received only by a single instance, it cannot be used to trigger clearing the cache in a consistent manner for the whole application. Other solutions, like messaging, are more suitable for that purpose.\r\n\r\n## NPM packages support\r\nAs an extension in the dollar API we included support for all the available NPM packages. <br />\r\nFor example, in your xsjs file you can add the following code:\r\n\r\n```js\r\nvar _ = $.require('underscore');\r\n// Count to ten\r\nvar count = '';\r\n_.range(11).forEach(function(number) {\r\n  count += number + ' ';\r\n});\r\n$.response.setBody(count);\r\n```\r\n\r\n__NOTE__: If you require an npm package that is asynchronous, you have to use the `sync` property to make it synchronous. See [fibrous](https://github.com/goodeggs/fibrous) package for details.\r\n\r\nLet's take for example the [request](https://github.com/request/request/blob/master/request.js) module from npm. The standard Node.js approach for using the module will be:\r\n\r\n```js\r\nvar request = $.require('request');\r\nrequest('http://google.com', function(error, response) {\r\n  if (error) {\r\n    $.trace.error(error);\r\n    return;\r\n  }\r\n  $.response.setBody(response.body);\r\n});\r\n```\r\nThis snippet won't work in a xsjs file. The right xsjs approach would be:\r\n\r\n```js\r\nvar request = $.require('request');\r\ntry {\r\n  var response = request.sync('http://google.com');\r\n  $.response.setBody(response.body);\r\n} catch(error) {\r\n  $.trace.error(error.message);\r\n}\r\n```\r\n\r\nYou can also require a file relatively. The required file will execute in Node.js context. This means you will have access to global Node.js variables, such as `__dirname`, `process`, etc. in it.\r\nFor example, if we have a file called myAPI.js with content:\r\n\r\n```js\r\n// myAPI.js\r\nmodule.exports = {\r\n  getDirname: function() {\r\n    return __dirname;\r\n  }\r\n};\r\n```\r\n\r\nLet's say myAPI.js is located in a parent directory for the following xsjs file:\r\n```js\r\nvar myAPI = $.require('../myAPI.js');\r\n$.response.setBody(myAPI.getDirname());\r\n```\r\n\r\n## Destinations support\r\n\r\n#### Via user provided services\r\nBy default the compatibility layer supports destinations configuration via user provided services. The destination name (the repo resource id, e.g. package + '.' + xshttpdest name) is matched to service name.\r\n\r\nExample content of VCAP_SERVICES:\r\n\r\n```js\r\n\"VCAP_SERVICES\": {\r\n  \"user-provided\": [\r\n    {\r\n      \"label\": \"user-provided\",\r\n      \"name\": \"foobar.httpdest.mydest\",\r\n      \"credentials\": {\r\n        \"host\": \"some.host\",\r\n        \"port\": 8088,\r\n        \"username\": \"user\",\r\n        \"password\": \"secret\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\nExample usage in XSJS code:\r\n```js\r\nvar destination = $.net.http.readDestination('foobar.httpdest', 'mydest');\r\n```\r\nIf there is no service in VCAP_SERVICES with same name as the destination requested, an exception is thrown.\r\n\r\nWhen destination is read the content of the design time descriptor is merged with the properties provided in the user provided service. Property values of the UP service override DT descriptor values.\r\n\r\n\r\n#### Via custom provider function\r\n\r\nIf the default support is not enough for your use case, you can provide custom destination provider function. For details how to do that, see the __destinationProvider__ configuration option explained above.\r\n\r\n## Accessing column values by index in *$.hdb.ResultSet* rows\r\n\r\nColumn values from within a row of a *$.hdb.ResultSet* in XS Classic can be accessed either by column name or by column index.\r\nIf an application does not make use of accessing columns by index, then this capability can be turned off which will result in\r\nimproved performance:\r\n\r\n```js\r\nvar connection = $.hdb.getConnection({ enableColumnIndices: false });\r\n```\r\n\r\n## Tracing via *$.trace* API\r\n\r\nEach trace entry is associated with a location. The entry point being accessed is used as a location:\r\n- All application trace entries produced during OData handling (entries produced by exits and the imported `.xsjslib` scripts, _@sap/xsodata_ entries) use the location of the `.xsodata` service itself, e.g. '/odata/service.xsodata'.\r\n- All application trace entries produced during job execution (entries from `.xsjs` scripts and the imported `.xsjslib`s) use the location of the `.xsjob` descriptor, e.g '/jobs/my-job.xsjob'.\r\n- All application trace entries produced by `.xsjs` code (including the imported `.xsjslib` scripts) use the location of the `.xsjs` file itself, e.g. '/xsjs/service.xsjs'. The same applies to scripts referenced from `$.response.followUp`.\r\n\r\nThis allows easier changing of the tracing level (only of the entry point - a `.xsodata`, a `.xsjob` or a `.xsjs`) without doing so for every single script involved in the execution or by using wildcards. The trace message can be used to find the source line that has produced it.\r\n\r\n**Note:** Regarding request-ids for jobs - the run-id received from the jobscheduler is used as the request-id instead of an auto-generated one.\r\n\r\n## Troubleshooting\r\n\r\nThis package uses _@sap/logging_ package so all of its features are available to control logging.\r\nFor example to set all logging and tracing to finest level set `XS_APP_LOG_LEVEL` environment variable to `debug`.\r\n\r\nIf the application is deployed on XS Advanced On-premise Runtime, you can change the log level without restarting the application.\r\nFor example this command will set all logging and tracing to finest level.\r\n```sh\r\nxs set-logging-level <application-name> \"*\" debug\r\n```\r\nSee @sap/logging documentation for details.\r\n\r\nSome of the libraries used by this package employ other tracing mechanisms. For example many use the popular [debug](https://www.npmjs.com/package/debug) package. This means that by setting `DEBUG` environment variable, you can enable additional traces. Set it to `*` to enable all of them, but be careful as the output may be overwhelming.\r\nIn addition internal Node.js traces can be enabled via `NODE_DEBUG` environment variable. [This post](http://www.juliengilli.com/2013/05/26/Using-Node.js-NODE_DEBUG-for-fun-and-profit/) describes it in more detail.\r\n\r\n**Warning:** Enabling some of these options may trace security sensitive data, so use with caution.\r\n\r\n## Differences with HANA XS Classic\r\n\r\nSee the differences [here](differences.md).\r\n<br/>"}]