[{"name":"CHANGELOG.md","content":"# Change Log\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](https://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/).\r\n\r\n## [2.4.2] - 2020-06-17\r\n\r\n### Added\r\n- license file: developer-license-3.1.txt\r\n\r\n## [2.4.1] - 2020-05-27\r\n\r\n### Fixed\r\n- handling of escaped backslashed and doublequotes in search phrases\r\n- parsing of aliases in paths of expressions\r\n\r\n## [2.4.0] - 2020-04-15\r\n\r\n### Added\r\n- support for navigation properties in complex properties\r\n\r\n## [2.3.2] - 2020-03-06\r\n\r\n### Fixed\r\n- stricter determination of related entity set\r\n\r\n## [2.3.1] - 2020-02-21\r\n\r\n### Fixed\r\n- handling of Path for navigation-property binding and EntitySetPath for bound actions and functions\r\n\r\n## [2.3.0] - 2020-02-11\r\n\r\n### Added\r\n- support for node.js version 12\r\n- complete support of specified Unicode range in URI parsing of identifiers\r\n- URI parsing of search words according to OData 4.01 CS02\r\n\r\n### Removed\r\n- support for node.js version 8 due to its end of life\r\n\r\n## [2.2.0] - 2020-01-14\r\n\r\n### Added\r\n- support for EDM singletons\r\n\r\n## [2.1.3] - 2019-09-19\r\n\r\n### Fixed\r\n- npm-shrinkwrap.json remains unchanged during xmake build\r\n\r\n## [2.1.2] - 2019-09-17\r\n\r\n### Fixed\r\n- result type of $apply with aliases for custom aggregates\r\n\r\n## [2.1.1] - 2019-06-18\r\n\r\n### Fixed\r\n- URI parsing of identifiers starting with null, INF, NaN, true, false \r\n\r\n## [2.1.0] - 2019-05-08\r\n\r\n### Added\r\n- support in URI resource-path parsing for key-as-segment convention\r\n\r\n## [2.0.1] - 2019-04-09\r\n\r\n## [2.0.0] - 2019-03-15\r\n\r\n### Changed\r\n- PrimitiveValue(En|De)coder replace ValueText(S|Des)erializer and ValueConverter in API\r\n\r\n## [1.2.0] - 2019-03-08\r\n\r\n## [1.1.0] - 2019-02-25\r\n\r\n### Changed\r\n- Adapt to OASIS Issue 1221:\r\n    - All $...Path Expressions except $Path are now wrapped with Csdl-/EdmUnkwownExpression\r\n    - All string-based expressions are now Csdl-/EdmUnknownExpressions\r\n    - All type-based ConstantExpressions are now treated as UnknownExpressions\r\n\r\n## [1.0.5] - 2019-02-08\r\n\r\n## [1.0.4] - 2019-01-18\r\n\r\n## [1.0.3] - 2019-01-17\r\n\r\n## [1.0.2] - 2019-01-17\r\n\r\n## [1.0.1] - 2019-01-17\r\n\r\n### Added\r\n- OnDelete support for EdmNavigationProperty\r\n\r\n## [1.0.0] - 2019-01-15\r\n\r\nInitial delivery for @sap/odata-server module\r\n"},{"name":"lib","nodes":[{"name":"uri","nodes":[{"name":"info.md","content":"# Components\r\n\r\n## How to use the UriParser\r\n\r\nThe UriParser takes the EDM provider instance and returns an UriInfo object\r\non calling the `.parse(uri)` method. Each original URI path segment has a\r\ncorresponding UriResource path segment after parsing the URI.\r\n\r\n```js\r\nconst UriParser = require('./lib/uri/UriParser');\r\nconst edm = getEdmProviderInstanceSomehow();\r\nconst uriParser = new UriParser(edm);\r\n\r\nconst uriInfo = uriParser.parseRelativeUri(\r\n    \"/YourEntitySetName(KeyName=1,Key2Name='2')/YourNavigationProperty/AnyProperty\",\r\n    queryOptions);  // only used for aliases\r\n\r\nuriInfo.getPathSegments() // --> [UriResource, UriResource, UriResource]\r\n\r\n// First path segment\r\nconst first = uriInfo.getPathSegments()[0]; // Returns UriResource\r\nfirst.getKind() // --> UriResource.ResourceKind.ENTITY\r\nfirst.getEntitySet() // --> EdmEntitySet\r\nfirst.getKeyPredicates() // --> [UriParameter, UriParameter]\r\nfirst.getKeyPredicates()[1].getValue() // --> '2'\r\nfirst.getKeyPredicates()[1].getEdmRef() // --> Returns the corresponding edm reference object\r\n\r\n// Second path segment\r\nconst second = uriInfo.getPathSegments()[1]; // Returns UriResource\r\nsecond.getKind() // --> UriResource.ResourceKind.NAVIGATION_TO_[ONE|MANY]\r\nsecond.getNavigationProperty() // --> EdmNavigationProperty\r\nsecond.getTarget() // --> The target of the navigation\r\n\r\n// Third path segment\r\nconst third = uriInfo.getPathSegments()[2]; // Returns UriResource\r\nthird.getKind() // --> UriResource.ResourceKind.[PRIMITIVE|COMPLEX|COMPLEX_COLLECTION|...]_PROPERTY\r\nthird.getProperty() // --> EdmProperty\r\n```\r\n\r\n## Filter Query Option\r\n\r\nAccessing the filter query option gets the root node of the filter\r\nexpression tree.\r\n\r\n## Orderby Query Option\r\n\r\nAccessing the orderby query option gets an array of orderby-item objects.\r\nEach of these objects can be queried for the root of its expression tree and\r\nfor the sorting direction.\r\n\r\n## Expand Query Option\r\n\r\nAccessing the expand query option gets an array of expand-item objects.\r\nEach of these objects can be queried for its path segments, whether all\r\nnavigation properties have to be expanded, and for options.\r\n\r\n## Select Query Option\r\n\r\nAccessing the select query option gets an array of select-item objects.\r\nEach of these objects can be queried for its path segments, whether all\r\nproperties have been selected, and whether all operations in a schema\r\nnamespace have been selected (in this case the namespace also can be\r\nretrieved).\r\n\r\n## Search Query Option\r\n\r\nAccessing the search query option gets the root node of the search expression\r\ntree. Three different kinds of nodes are possible: binary-expression nodes\r\n(where only AND and OR operators can occur), unary-expression nodes (where\r\nonly NOT is possible as operator) and literal nodes.\r\n\r\n## Expressions\r\n\r\n### Expression Kinds\r\n\r\nThere are different kinds of expressions. Each kind of expression is\r\nimplemented in a separate class with specialized access methods. But all have\r\na method to get their EDM type.\r\n\r\n### Literal Expression\r\n\r\nA literal expression represents a literal directly written in the expression.\r\n\r\n### Alias Expression\r\n\r\nAn alias expression represents a parameter alias. Written as an at-sign\r\nfollowed by an identifier, it represents a reference to an expression given\r\nas separate query option in the URI. The alias expression has a method to\r\naccess this referenced expression.\r\n\r\n### Unary Expression\r\n\r\nA unary expression represents an OData built-in unary operator.\r\nIts operand (an expression) can be accessed as well.\r\n\r\n### Binary Expression\r\n\r\nA binary expression represents an OData built-in binary operator.\r\nIts left and right operands (also expressions) can be accessed as well.\r\n\r\n### Method Expression\r\n\r\nA method expression represents an OData built-in method. Its parameters\r\n(which can in turn be expressions) can be accessed as well.\r\n\r\n### Member Expression\r\n\r\nA member expression represents a path expression to access, in the easiest\r\ncase, a member property of the entity the expression refers to. It has a\r\nmethod to access the URI resource elements the path consists of.\r\n\r\n### Type Literal Expression\r\n\r\nA type-literal expression represents a type name written literally in the\r\nexpression, used in the built-in type-related methods. A type cast used in\r\na path (member expression) does not result in a type-literal expression.\r\n"}]}]},{"name":"README.md","content":"# odata-commons\r\n\r\nThe commons module is used from the odata-server and odata-client modules and\r\nshall not be used by service developers directly.\r\n\r\n## Table of Contents\r\n\r\n- [Releases and Milestones](#releases-and-milestones)\r\n\r\n## Releases and Milestones\r\n\r\n[Changelog](./CHANGELOG.md)\r\n"}]