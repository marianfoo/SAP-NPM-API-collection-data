[{"name":"CHANGELOG.md","content":"# ChangeLog for cds compiler and backends\r\n\r\n<!-- markdownlint-disable MD024 -->\r\n<!-- markdownlint-disable MD004 -->\r\n<!-- (no-duplicate-heading)-->\r\n\r\nNote: `beta` fixes, changes and features are usually not listed in this ChangeLog but [here](doc/CHANGELOG_BETA.md).\r\nThe compiler behavior concerning `beta` features can change at any time without notice.\r\n\r\n## Version 3.0.0 - 2022-06-23\r\n\r\n### Added\r\n\r\n- Instead of requiring all files on startup, they are required on an as-needed basis to reduce startup times.\r\n- Allow `*` as argument in SQL functions `count`, `min`, `max`, `sum`, `avg`, `stddev`, `var`.\r\n\r\n### Changed\r\n\r\n- cds-compiler now requires Node 14.\r\n- `compile()` and its derivates now use `fs.realpath.native()` instead of `fs.realpath()`.\r\n- Multi-line doc comments without leading `*` were inconsistently trimmed.\r\n- `@cds.persistence.skip` and `@cds.persistence.exists` are both copied to generated child artifacts\r\n  such as localized convenience views, texts entities and managed compositions.\r\n- As before, a structure value for an annotation assignment in a CDL source is flattened,\r\n  i.e. `@Anno: { foo: 1, @bar: 2 }` becomes `@Anno.foo: 1 @Anno.@bar: 2`.\r\n  Now, the structure property name `$value` is basically ignored:\r\n  `@Anno: { $value: 1, @bar: 2 }` becomes `@Anno: 1 @Anno.@bar: 2`.\r\n  The advantage is that overwriting or appending the annotation value works as expected.\r\n- Update OData vocabularies 'Common', 'UI'.\r\n- Keywords `not null` is only valid after `many String enum {...}` and no longer after `String`.\r\n- (Sub-)Elements of localized convenience views can now be annotated, e.g. `annotate localized.E:elem`.\r\n- `getArtifactCdsPersistenceName` now enforces the `csn` argument and can optionally have the `sqlDialect` passed in.\r\n- `getElementCdsPersistenceName` can optionally have the `sqlDialect` passed in.\r\n\r\n### Removed\r\n\r\n- All v2 deprecated flags.\r\n- Keyword `masked`.\r\n- `*` as generic argument to SQL functions/expressions.\r\n- All non-SNAPI options.\r\n\r\n## Version 2.15.4 - 2022-06-09\r\n\r\n### Fixed\r\n\r\n- for.odata:\r\n  + Fix derived type to scalar type resolution with intermediate `many`.\r\n- to.edm(x):\r\n  + (V4 structured) Fix key paths in combination with `--odata-foreign-keys`.\r\n  + Add `Edm.PrimitiveType` to `@odata.Type`.\r\n  + (V4 JSON) Render constant expressions for `Edm.Stream` and `Edm.Untyped`.\r\n  + Fix a bug in target path calculation for `NavigationPropertyBinding`s to external references.\r\n  + Render inner annotations even if `$value` is missing.\r\n- Update OData vocabularies 'Common', 'UI'.\r\n- to.sql/to.hdbcds/to.hdi: \"type of\"s in `cast()`s could lead to type properties being lost.\r\n\r\n## Version 2.15.2 - 2022-05-12\r\n\r\n### Fixed\r\n\r\n- Option `cdsHome` can be used instead of `global.cds.home` to specify the path to `@sap/cds/`.\r\n- to.edm(x):\r\n  + Set anonymous nested proxy key elements to `Nullable:false` until first named type is reached.\r\n  + Enforce `odata-spec-violation-key-null` on explicit foreign keys of managed primary key associations.\r\n  + Proxies/service cross references are no longer created for associations with arbitrary ON conditions.\r\n    Only managed or `$self` backlink association targets are proxy/service cross reference candidates.\r\n  + Explicit foreign keys of a managed association that are not a primary key in the target are exposed in the the proxy.\r\n  + If an association is primary key, the resulting navigation property is set to `Nullable:false` in structured mode.\r\n\r\n## Version 2.15.0 - 2022-05-06\r\n\r\n### Added\r\n\r\n- A new warning is emitted if `excluding` is used without a wildcard, since this does\r\n  not have any effect.\r\n- All scalar types can now take named arguments, e.g. `MyString(length: 10)`.\r\n  For custom scalar types, one unnamed arguments is interpreted as length, two arguments are interpreted\r\n  as precision and scale, e.g. `MyDecimal(3,3)`.\r\n- If the type `sap.common.Locale` exists, it will be used as type for the `locale` element\r\n  of generated texts entities.  The type must be a `cds.String`.\r\n- to.cdl: Extend statements (from `extensions`) can now be rendered.\r\n- Add OData vocabulary 'Hierarchy'.\r\n- CDL: New associations can be published in queries, e.g. `assoc : Association to Target on assoc.id = id`\r\n\r\n### Changed\r\n\r\n- to.edm(x):\r\n  + perform inbound qualification and spec violation checks as well as most/feasible EDM preprocessing steps\r\n    on requested services only.\r\n  + Open up `@odata { Type, MaxLength, Precision, Scale, SRID }` annotation.  \r\n    The annotations behavior is defined as follows:\r\n    + The element/parameter must have a scalar CDS type. The annotation is not applied on named types\r\n      (With the V2 exception where derived type chains terminating in a scalar type are resolved).\r\n    + The value of `@odata.Type` must be a valid `EDM` type for the rendered protocol version.\r\n    + If `@odata.Type` can be applied, all canonic type facets (`MaxLength`, `Precision`, `Scale`, `SRID`) are\r\n      removed from the Edm Node and the new facets `@odata { MaxLength, Precision, Scale, SRID }` are applied.\r\n      Non Edm type conformant facets are ignored (eg. `@odata { Type: 'Edm.Decimal', MaxLength: 10, SRID: 0 }`).\r\n    + Type facet values are not evaluated.\r\n  + V2: Propagate `@Core.MediaType` annotation from stream element to entity type if not set.\r\n- to.edm: Render constant expressions in short notation.\r\n- Update OData Vocabularies: 'Common', 'Graph', 'Validation'.\r\n\r\n### Fixed\r\n\r\n- to.cdl:\r\n  + Annotations of elements of action `returns` are now rendered as `annotate` statements.\r\n  + Annotations on columns (query sub-elements) were not always rendered.\r\n  + Doc comments on bound actions were rendered twice.\r\n  + Unapplied annotations for action parameters were not rendered.\r\n  + Unions and joins are correctly put into parentheses.\r\n  + Add parentheses around certain expressions in function bodies that require it, such as `fct((1=1))`.\r\n- to.edm(x):\r\n  + Fix a bug in top level and derived type `items` exposure leading to undefined type rendering.\r\n  + Fix a naming bug in type exposure leading to false reuse types, disguising invididual type\r\n    modifications (such as annotations, (auto-)redirections, element extensions).\r\n  + Ignore `@Aggregation.default`.\r\n  + Consolidate message texts and formatting.\r\n  + Fix navigation property binding in cross service rendering mode.\r\n  + Remove partner attribute in proxy/cross service navigations.\r\n- Core engine (function `compile`):\r\n  + Annotations for new columns inside `extend projection` blocks were not used.\r\n  + Extending an unknown select item resulted in a crash.\r\n  + Extending a context/service with columns now correctly emits an error.\r\n  + Unmanaged `redirected to` in queries did not check whether the source is an association.\r\n- parseCdl: `extend <art> with enum {...}` incorrectly threw a compiler error.\r\n- API: `compile()` used a synchronous call `fs.realpathSync()` on the input filename array.  \r\n  Now the asynchronous `fs.realpath()` is used.\r\n- On-conditions in localized convenience views may be incorrectly rewritten if an element\r\n  has the same as a localized entity.\r\n- to.sql/hdi/hdbcds:\r\n  + No referential constraint is generated for an association if its parent\r\n  or target entity are annotated with `@cds.persistence.exists: true`.\r\n  + Fix rendering of virtual elements in subqueries\r\n  + Correctly process subqueries in JOINs\r\n- to.sql/hdi: Queries with `UNION`, `INTERSECT` and similar in expressions are now enclosed in parentheses.\r\n\r\n## Version 2.14.0 - 2022-04-08\r\n\r\n### Added\r\n\r\n- cdsc:\r\n  + `--quiet` can now be used to suppress compiler output, including messages.\r\n  + `--options <file.json>` can be used to load compiler options. A JSON file is expected. Is compatible to CDS `package.json`\r\n    and `.cdsrc.json` by first looking for `cdsc` key in `cds`, then for a `cdsc` key and otherwise uses the full JSON file.\r\n  + `--[error|warn|info|debug] id1,id2` can be used to reclassify specific messages.\r\n- Add OData Vocabularies: 'DataIntegration', 'JSON'.\r\n  \r\n### Changed\r\n\r\n- Update OData Vocabularies: 'UI'.\r\n\r\n### Fixed\r\n\r\n- to.cdl:\r\n  + Delimited identifiers as the last elements of arrays in annotation values are now\r\n    rendered with spaces in between, to avoid accidentally escaping `]`.\r\n  + Identifiers in includes and redirection targets were not quoted if they are reserved keywords.\r\n- to.edm(x): Correctly rewrite `@Capabilities.ReadRestrictions.ReadByKeyRestrictions` into\r\n  `@Capabilities.NavigationPropertyRestriction` in containment mode.\r\n\r\n## Version 2.13.8 - 2022-03-29\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql: Correctly handle `localized` in conjunction with `@cds.persistence.exists` and `@cds.persistence.skip`\r\n\r\n## Version 2.13.6 - 2022-03-25\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql: Correctly handle `localized` in conjunction with `@cds.persistence.exists`\r\n\r\n## Version 2.13.4 - 2022-03-22\r\n\r\nNo changes compared to Version 2.13.0; fixes latest NPM tag\r\n\r\n## Version 2.13.2 - 2022-03-22\r\n\r\nNo changes compared to Version 2.13.0; fixes latest NPM tag\r\n\r\n## Version 2.13.0 - 2022-03-22\r\n\r\n### Added\r\n\r\n- CDL syntax:\r\n  + Allow to `extend E:elem` and `annotate E:elem` instead of having to write deeply nested statements.\r\n  + Enable `default` values as part of scalar type definitions.\r\n  + The following `extend` syntax variants are now possible:\r\n    ```cds\r\n    extend … with elements { … }\r\n    extend … with definitions { … }\r\n    extend … with columns { … }\r\n    extend … with enum { … }\r\n    extend … with actions { … }\r\n    ```\r\n    This syntax expresses _how_ an artifact is extended instead of _what_ is extended.\r\n  + Using `ORDER BY` in generic functions such as SAP HANA's `first_value` is now possible.\r\n- Make API function `compileSources` accept CSN objects as file content\r\n- to.edm(x): Annotate view parameters with `@sap.parameter: mandatory` (V2) and `@Common.FieldControl: #Mandatory` (V4).\r\n- to.sql/hdi/hdbcds: Introduce the annotations `@sql.prepend` and `@sql.append` that allow inserting user-written SQL\r\n  snippets into the compiler generated content. Changes in annotations `@sql.prepend` and `@sql.append` are now reflected\r\n  in the output of `to.hdi.migration`. This enables CDS Build to produce `.hdbmigrationtable` files translating such model\r\n  changes into schema changes.\r\n- API: Lists of keywords for various backends are available as `to.<backend>[.<config>].keywords`, e.g. `to.sql.sqlite.keywords`.\r\n- for.odata/to.edm(x): The draft composition hull is now also taking into account compositions in subelements.\r\n\r\n### Changed\r\n\r\n- In query entities inside services, only auto-redirect associations and compositions\r\n  in the main query of the entity.\r\n- An element now inherits the property `notNull` from its query source (as\r\n  before) or its type (like it does for most other properties);\r\n  `notNull` is then not further propagated to its sub elements anymore.\r\n- A structure element inherits the property `virtual` from its query source (as\r\n  before), but does not further propagate `virtual` to its sub elements\r\n  (semantically of course, but the CSN is not cluttered with it);\r\n  there is a new warning if a previously `virtual` query entity\r\n  element is now considered to be non-virtual.\r\n- Do not propagate annotation value `null`.\r\n  The value `null` of an annotation (and `doc`) is used to stop the inheritance\r\n  of an annotation value.  This means than other than that, a value `null` should\r\n  not be handled differently to not having set that annotation.\r\n- In the effective CSN, the structure type is only expanded if something has changed\r\n  for associations: the `target` (`keys` does not change if the `target` does not change)\r\n  unmanaged associations as sub elements are not supported anyway.\r\n- In the effective CSN, “simple” type properties like `length`, `precision`,\r\n  `scale` and `srid` are propagated even for a propagation via type.\r\n- Update OData Vocabularies: 'Capabilities', 'Common', 'Core', 'UI'.\r\n- to.sql:\r\n  + For SQL dialect `hana` referential constraints are now appended\r\n    as `ALTER TABLE ADD CONSTRAINT` clause to the end of `schema.sql`.\r\n    With option `constraintsInCreateTable` constraints are rendered into the\r\n    `CREATE TABLE` statement.\r\n  + Referential constraint names are now prefixed with `c__`.\r\n\r\n### Fixed\r\n\r\n- Properly resolve references inside anonymous aspects:\r\n  + references starting with `$self.` made the compiler dump.\r\n  + a simple `$self` did  not always work as expected (it represents the entity created via the anonymous aspect).\r\n  + other references inside deeply nested anonymous aspects induced a compilation error.\r\n- compiler: `()` inside `ORDER BY` clause was not correctly set.\r\n- parse.cdl: References in `ORDER BY` and filters are now correctly resolved.\r\n- Issue error when trying to introduce managed compositions of aspects in `mixin`s\r\n- Issue error in all cases for type references to unmanaged associations.\r\n- Avoid dump when extending an illegal definition with a name starting with `cds.`.\r\n- to.sql/to.cdl/to.hdbcds/to.hdi: Render `cast()` inside `ORDER BY`, `GROUP BY` and `HAVING` properly.\r\n- to.sql/hdi/hdbcds:\r\n  + `$self` was incorrectly treated as a structured path step.\r\n  + Correctly handle table alias in on-condition of mixin in `exists` expansion.\r\n  + Correctly handle table `$self` references to aliased fields in on-condition of mixin association\r\n    during `exists` expansion.\r\n- to.edm: Don't escape `&` as `&amp;`.\r\n- to.edmx: Escaping compliant to XML specification:\r\n  + `&` and `<` are always escaped.\r\n  + `>` is not escaped, unless it appears in text values as `]]>`.\r\n  + `\"` is escaped in attribute values only.\r\n  + Control characters are always escaped.\r\n- Ellipsis (`...`) in annotations in different layers but without base annotation now produces an error.\r\n  The old but incorrect behavior can be re-enabled with option `anno-unexpected-ellipsis-layers`.\r\n\r\n## Version 2.12.0 - 2022-01-25\r\n\r\n### Added\r\n\r\n- CDL parser: You can now use multiline string literals and text blocks.  \r\n  Use backticks (\\`) for string literals that can span multiple lines and can use JavaScript-like escape\r\n  sequences such as `\\u{0020}`.  You can also use three backticks (\\`\\`\\`) for strings (a.k.a. text blocks)\r\n  which are automatically indentation-stripped and can have an optional language identifier that is used\r\n  for syntax highlighting, similar to markdown.  In difference to the former, text blocks require the\r\n  opening and closing backticks to be on separate lines.\r\n  Example:\r\n  ````\r\n  @annotation: `Multi\r\n   line\\u{0020}strings`\r\n\r\n  @textblock: ```xml\r\n              <summary>\r\n                <detail>The root tag has no indentation in this example</detail>\r\n              </summary>\r\n              ```\r\n  ````\r\n\r\n- Enhance the ellipsis operator `...` for array annotations by an `up to ‹val›`:\r\n  only values in the array of the base annotation up to (including) the first match\r\n  of the specified `‹val›` are included at the specified place in the final array value.\r\n  An array annotation can have more than on `... up to ‹val›` items and must also\r\n  have a pure `...` item after them.  \r\n  A structured `‹val›` matches if the array item is also a structure and all property\r\n  values in `‹val›` are equal to the corresponding property value in the array value;\r\n  it is not necessary to specify all properties of the array value items in `‹val›`.\r\n  Example\r\n  ```\r\n  @Anno: [{name: one, val: 1}, {name: two, val: 2}, {name: four, val: 4}]\r\n  type T: Integer;\r\n  @Anno: [{name: zero, val: 0}, ... up to {name: two}, {name: three, val: 3}, ...]\r\n  annotate T;\r\n  ```\r\n- for.odata: Support `@cds.on {update|insert}` as replacement for deprecated `@odata.on { update|insert }` to\r\n  set `@Core.Computed`.\r\n\r\n### Changed\r\n\r\n- Update OData Vocabularies 'Aggregation', 'Capabilities', 'Common', 'Core', PersonalData, 'Session', 'UI'\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds: With `exists`, ensure that the precedence of the existing association-on-conditions and where-conditions is kept by adding braces.\r\n- to.sql/hdi: Window function suffixes are now properly rendered.\r\n- to.sql: `$self` comparisons inside aspects are not checked and won't result in an error anymore.\r\n- to.hdbcds:\r\n  + Correctly apply the \".\"-to-\"_\"-translation algorithm to artifacts that are marked with `@cds.persistence.exists`.\r\n  + Message with ID `anno-hidden-exists` (former `anno-unstable-hdbcds`) is now\r\n    only issued if the compiler generates a SAP HANA CDS artifact which would hide\r\n    a native database object from being resolved in a SAP HANA CDS `using … as …`.\r\n- to.cdl: Annotation paths containing special characters such as spaces or `@` are now quoted, e.g. `@![some@annotation]`.\r\n- compiler: A warning is emitted for elements of views with localized keys as the localized property is ignored for them.\r\n\r\n\r\n\r\n## Older Versions\r\n\r\nThe change log for older entries can be found at\r\n[`doc/CHANGELOG_ARCHIVE.md`](doc/CHANGELOG_ARCHIVE.md).\r\n"},{"name":"doc","nodes":[{"name":"ApiMigration.md","content":"# API Migration\r\n\r\n> Status Oct 2019: this document is still valid, but the recommended API will change (again) in the near future.\r\n> The future version of this document (renamed to `API.md`) will basically explain the recommended API,\r\n> the migration will only be a minor aspect and explained in a later section.\r\n\r\n<!-- The option handling might also change: -->\r\n<!-- the backend-specific structure is overly complex and not always appriopriate (e.g. naming mode). -->\r\n\r\nWith revision 1.0.24, the CDS compiler offers new API backend functions, i.e. new functions for the\r\ngeneration of output from (augmented) CSN models. The new functions and their options are closely\r\naligned with the new command line interface `cdsc`. The old backend functions are deprecated, will\r\nnot be extended with new features, and will be removed in a subsequent release. Note that only these\r\nAPI functions from `lib/main.js` are supported - **all internal functions are subject to change without\r\nnotice**.\r\n\r\nPlease see the function headers in `lib/backends.js` for a description of the new API functions (for a\r\nsnapshot of the current version, see below).\r\n\r\n## Some helpful hints\r\n\r\nPlease note the following general concepts regarding the new API functions:\r\n- The behavior of the compiler and of all backend API functions is controlled by a common `options` object,\r\n  with subsections for each backend function, e.g. `options: {toHana: {src: true}, toOdata: {version: 'v2'}}`.\r\n- Options can either be specified with one of the `compile` functions (transported within the model to the\r\n  backends), or explicitly at the invocation of a backend API function.\r\n- Options are merged, with precedence given to those specified explicitly at the backend API functions.\r\n- When invoking a backend function with options that all belong to this backend function, the subsection wrapper\r\n  can be omitted, i.e. `toHana(model, {toHana: {src: true}})` is equivalent to `toHana(model, {src: true})`.\r\n- Most backend API functions have a combination of options controlling _what_ is generated\r\n  (e.g. `toHana: {src: true}`) and options modifying  _how_ things are generated (e.g. `toOdata: {version: 'v2'}`).\r\n\r\n## Migration guide\r\n\r\nThe following table shows replacements for the deprecated API functions (relying on default options where possible):\r\n\r\n| Deprecated function call   | New function call                           |\r\n| -------------------------- | ------------------------------------------- |\r\n| `toHanaCdl(model)` | `toHana(model)`|\r\n| `forHana(model)` | `toHana(model, {csn: true})`|\r\n| `toOdataOutput(model, {oDataVersion: 'v2'}` | `toOdata(model, {version: 'v2', xml: true, json: true, separate: true, combined: true, csn: true})`|\r\n| `toSqlDdl(model)` | `toSql(model)`|\r\n| `compactJson(model)` | `toCsn(model)`|\r\n\r\n## Changes in behavior\r\n\r\nThe following changes have been made to the behavior of `toOdata` in comparison to `toOdataOutput`:\r\n- Output is now generated either for ODATA V2 or for V4. The old `toOdataOutput` function produced the `annotations` output with\r\n  an extra invocation of the backend using `oDataVersion: 'v4'` even if the original invocation specified `oDataVersion: 'v2'`,\r\n  resulting in slightly different output. The `combined` output always had the correct versioning.\r\n- The `metadata_json` output is now an object, not a string.\r\n\r\n## Snapshot of backend API function documentation\r\n\r\nNote that these backend API functions are all exposed in `lib/main.js` (which is **the only external API**), but\r\ntheir documentation is currently located in `lib/backends.js` (this will likely change).\r\n\r\n### `toHana(model, options)`\r\n\r\n```\r\n// Transform an augmented CSN 'model' into HANA-compatible CDS source.\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     toHana.names        : either 'plain' (generate uppercased flattened entity names with\r\n//                           underscores) or 'quoted' (default, generate entity names with nested\r\n//                           contexts as in CDL)\r\n//     toHana.associations : either 'assocs' (default, keep associations as they are if possible)\r\n//                           or 'joins' (replace associations by joins)\r\n//     toHana.src          : if true, generate HANA CDS source files (default)\r\n//     toHana.csn          : if true, generate the transformed CSN model\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\n// If 'toHana.names' is not provided, 'quoted' is used.\r\n// If 'toHana.associations' is not provided, 'assocs' is used.\r\n// If neither 'toHana.src' nor 'toHana.csn' are provided, the default is to generate only HANA CDS\r\n// source files.\r\n// If all provided options are part of 'toHana', the 'toHana' wrapper can be omitted.\r\n// The result object contains the generation results as follows (as enabled in 'options'):\r\n//   result : {\r\n//     csn               : the (compact) transformed CSN model\r\n//     _augmentedCsn     : (subject to change): the augmented CSN model\r\n//     hdbcds            : a dictionary of top-level artifact names, containing for each name 'X':\r\n//       <X>             : the HANA CDS source string of the artifact 'X'. Please note that the\r\n//                         name of 'X' may contain characters that are not legal for filenames on\r\n//                         all operating systems (e.g. ':', '\\' or '/').\r\n//     messages          : an array of strings with warnings (if any)\r\n//   }\r\nfunction toHana(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toOdata(model, options)`\r\n\r\n```\r\n// Generate ODATA for augmented CSN `model` using `options`.\r\n// Before anything is generated, the following transformations are applied to 'model':\r\n// FIXME: Verify that this is still correct\r\n// - Flatten structured elements (and foreign keys of managed associations pointing to\r\n//   keys that are themselves managed associations).\r\n// - Generate foreign key fields for entities with managed associations (annotated with\r\n//   '@odata.foreignKey4'). Propagate along projections accordingly. Names are built using\r\n//   <assoc>_<key>, conflicts are checked.\r\n// - Complete the 'foreignKeys' property for all managed associations, so that there\r\n//   is always a 'generatedFieldName' for the corresponding generated foreign key field.\r\n// - Implicitly redirect associations based on exposure\r\n// - Check that exposed associations do not point to non-exposed targets\r\n// - Unravel derived type chains, propagating annotations upwards.\r\n// - Rename annotations according to a fixed list of short-hands\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     toOdata.version     : either 'v2' or 'v4' (default)\r\n//     toOdata.xml         : if true, generate XML output (default)\r\n//     toOdata.json        : if true, generate JSON output (not available for ODATA V2)\r\n//     toOdata.separate    : if true, generate XML 'metadata' and XML 'annotations' separately\r\n//     toOdata.combined    : if true, generate XML metadata and XML annotations together as\r\n//                           'combined' (default)\r\n//     toOdata.csn         : if true, generate the transformed CSN model\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\n// If 'toOdata.version' is not provided, 'v4' is used.\r\n// If neither 'toOdata.xml' nor 'toOdata.json' nor 'toOdata.csn' are provided, the default is\r\n// to generate only XML output. If neither 'toOdata.separate' nor 'toOdata.combined' are provided,\r\n// the default is to generate only combined XML output.\r\n// If all provided options are part of 'toOdata', the 'toOdata' wrapper can be omitted.\r\n//\r\n// The result object contains the generation results as follows (as enabled in 'options'):\r\n//   result : {\r\n//     csn               : the (compact) transformed CSN model including all services\r\n//     _augmentedCsn     : (subject to change): the augmented CSN model including all services\r\n//     services          : a dictionary of service names, containing for each name:\r\n//       <servicename> : {\r\n//         annotations   : an XML string with EDMX annotations for service 'svc'\r\n//         metadata      : an XML string with EDMX metadata for service 'svc'\r\n//         combined      : an XML string with both EDMX metadata and annotations for service 'svc'\r\n//         metadata_json : a JSON object (not a string!) with EDM metadata for service 'svc'\r\n//       }\r\n//     messages          : an array of strings with warnings (if any)\r\n//   }\r\n// If 'model' does not contain any services, 'csn' will still contain the transformed model, but\r\n// 'services' will be an empty dictionary.\r\n//\r\n// Throws a CompilationError on errors.\r\nfunction toOdata(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toCdl(model, options)`\r\n\r\n```\r\n// Generate CDS source text for augmented CSN model 'model'.\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     FIXME: This option should be removed and something like 'toCdl.dialect: 'hana' be\r\n//            used instead.\r\n//     hanaFlavor : if true, HANA-specific source dialect is generated (affects e.g. the\r\n//                  translation of '$self.foo' in paths and ::-ish namespace declarations)\r\n//   }\r\n// One source is created per top-level artifact.\r\n// Return a dictionary of top-level artifacts\r\n// by their names, like this:\r\n// { \"foo\" : \"using XY; context foo {...};\",\r\n//   \"bar::wiz\" : \"namespace bar::; entity wiz {...};\"\r\n// }\r\n// Throws a CompilationError on errors.\r\nfunction toCdl(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toSwagger(model, options)`\r\n\r\n```\r\n// Generate OpenAPI JSON version 3 for the augmented CSN 'model'.\r\n// Return an object representing the Swagger JSON:\r\n// {\r\n//   openapi: '3.0.0',\r\n//   info: { ... },\r\n//   paths: { ...},\r\n//   components: {\r\n//     schemas: { ... }\r\n//   }\r\n// }\r\n//\r\n// Throws a CompilationError on errors.\r\nfunction toSwagger(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toSql(model, options)`\r\n\r\n```\r\n// Generate SQL DDL statements for augmented CSN 'model'.\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     toSql.names         : either 'plain' (generate uppercased flattened table/view names with\r\n//                           underscores) or 'quoted' (default, generate quoted table/view names\r\n//                           with dots as in CDL)\r\n//     toSql.associations  : either 'assocs' (default, keep associations as they are if possible)\r\n//                           or 'joins' (replace associations by joins)\r\n//     toSql.src           : if 'sql', generate SQL DDL source files (default)\r\n//     toSql.csn           : if true, generate the transformed CSN model\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\n// If 'toSql.names' is not provided, 'quoted' is used.\r\n// If 'toSql.associations' is not provided, 'assocs' is used.\r\n// If neither 'toSql.src' nor 'toSql.csn' are provided, the default is to generate only SQL DDL\r\n// source files.\r\n// If all provided options are part of 'toSql', the 'toSql' wrapper can be omitted.\r\n// The result object contains the generation results as follows (as enabled in 'options'):\r\n//   result : {\r\n//     csn               : the (compact) transformed CSN model\r\n//     _augmentedCsn     : (subject to change): the augmented CSN model\r\n//     sql               : a dictionary of top-level artifact names, containing for each name 'X':\r\n//       <X>             : a string with SQL DDL statements for artifact 'X', terminated with ';'.\r\n//                         Please note that the name of 'X' may contain characters that are not\r\n//                         legal for filenames on all operating systems (e.g. ':', '\\' or '/').\r\n//     messages          : an array of strings with warnings (if any)\r\n//   }\r\n// Throws a CompilationError on errors.\r\n```\r\n\r\n### `toCsn(model, options)`\r\n\r\n```\r\n// Generate compact CSN for augmented CSN 'model'\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     testMode : if true, the result is extra-stable for automated tests (sorted, no 'version')\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\nfunction toCsn(model, options) {\r\n  ...\r\n}\r\n```\r\n"},{"name":"CHANGELOG_ARCHIVE.md","content":"<!-- markdownlint-disable -->\r\n# ChangeLog for cdx compiler and backends (Archive)\r\n\r\nNote: `beta` fixes, changes and features are usually not listed in this ChangeLog.\r\nThe compiler behaviour concerning `beta` features can change at any time without notice.\r\n\r\n## Version 2.11.4 - 2021-12-21\r\n\r\n### Fixed\r\n\r\n- CDL parser: in many situations, improve message when people use reserved keywords as identifier\r\n- Improve error text and error location for ambiguous auto-redirection target\r\n- to.sql/hdi/hdbcds:\r\n  + Correctly detect `exists` in projections\r\n  + Correctly handle elements starting with `$` in the on-condition of associations\r\n  + Correctly handle sub queries in an entity defined with `projection on`\r\n  + Correctly handle associations in sub queries in a `from` of a sub query\r\n  + foreign key constraints: respect @assert.integrity: false for compositions\r\n- to.hdbcds: Correctly quote elements named `$self` and `$projection`\r\n- to.cdl: `when` was added to the keyword list for smart quoting\r\n- Compiler support for code completion for `$user` and `$session` now respect user\r\n  provided variables in `options.variableReplacements`.\r\n- API: `deduplicateMessages()` no longer removes messages for `duplicate` artifact/annotation errors.\r\n  Prior to this version, only one of the duplicated artifacts had a message, leaving the user to\r\n  guess where the other duplicates were.\r\n\r\n\r\n## Version 2.11.2 - 2021-12-06\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds:\r\n  + No foreign key constraint will be rendered for managed `composition of one` if annotated with `@assert.integrity: false`\r\n  + Correctly handle managed associations with other managed associations as foreign keys in conjunction with `exists`\r\n\r\n## Version 2.11.0 - 2021-12-02\r\n\r\n### Added\r\n\r\n- Option `defaultBinaryLength` to set a `length` type facet for all definitions with type `cds.Binary`. This option\r\n  overrides the default binary length in the database backends and is also used as `MaxLength` attribute in Odata.\r\n- If doc-comments are ignored by the compiler, an info message is now emitted.  A doc-comment is ignored,\r\n  if it can't be assigned to an artifact.  For example for two subsequent doc-comments, the first doc-comment\r\n  is ignored.  To suppress these info messages, explicitly set option `docComment` to `false`.\r\n- `cdsc`:\r\n  + `cdsc explain list` can now be used to get a list of message IDs with explanation texts.\r\n  + `cdsc` now respects the environment variable `NO_COLOR`. If set, no ANSI escape codes will be used.\r\n    Can be overwritten by `cdsc --color always`.\r\n- to.sql/hdi: Support SQL Window Functions\r\n- to.sql/hdi/hdbcds:\r\n  + Support configuration of `$session` and `$user` via option `variableReplacements`.\r\n  + Restricted support for SQL foreign key constraints if option `assertIntegrityType` is set to `\"DB\"`.\r\n    The behavior of this feature might change in the future.\r\n\r\n### Changed\r\n\r\n- Updated OData vocabularies 'Common' and 'UI'.\r\n- to.sql/hdi/hdbcds: The default length of `cds.Binary` is set to `5000` similar to `cds.String`.\r\n\r\n### Removed\r\n\r\n- to.hdbcds: Doc comments on view columns are not rendered anymore. Doc comments on string literals will make the deployment fail\r\n  as the SAP HANA CDS compiler concatenates the doc comment with the string literal. Besides that, doc comments on view columns\r\n  are not transported to the database by SAP HANA CDS.\r\n- to.hdbcds/sql/hdi: Forbid associations in filters after `exists` (except for nested `exists`), as the final behavior is not yet specified.\r\n\r\n### Fixed\r\n\r\n- CSN parser: doc-comment extensions are no longer ignored.\r\n- Properly check for duplicate annotation definitions.\r\n- Correctly apply annotations on inherited enum symbols.\r\n- Correctly apply annotations on elements in an inherited structure array.\r\n- Fix a bug in API `defaultStringLength` value evaluation.\r\n- Fix crash if named arguments are used in a function that's inside a `CASE` statement.\r\n- to.sql/hdi/hdbcds:\r\n  + Properly flatten ad-hoc defined elements in `returns` / `params` of `actions` and `functions`.\r\n  + Correctly handle `*` in non-first position.\r\n  + Correctly handle action return types\r\n  + Correctly handle mixin association named `$self`\r\n- to.cdl: doc-comments are no longer rendered twice.\r\n- to.edm(x):\r\n  + Fix a bug in V2/V4 partner ship calculation.\r\n  + Remove warning of unknown types for Open Types in `@Core.Dictionary`.\r\n  + An empty CSN no longer results in a JavaScript type error\r\n\r\n## Version 2.10.4 - 2021-11-05\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds:\r\n  + Correctly complain about `exists` in conjunction with non-associations/compositions\r\n  + Don't resolve types in action returns, as this causes issues with $self-resolution\r\n\r\n- to.edm(x): Be robust against transitively untyped keys in stacked view hierarchies\r\n\r\n## Version 2.10.2 - 2021-10-29\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds: Correctly handle `exists` in conjunction with mixin-associations\r\n\r\n## Version 2.10.0 - 2021-10-28\r\n\r\n### Added\r\n\r\n- Support arbitrary paths after `$user` - similar to `$session`.\r\n- Support scale `floating` and `variable` for `cds.Decimal` in CDL and CSN. Backend specific handling is descibed in their sections.\r\n- Allow select item wildcard (`*`) in a `select`/`projection` at any position, not just the first.\r\n\r\n- to.edm(x):\r\n  + In Odata V4 generate transitive navigation property binding paths along containment hierarchies and terminate on the\r\n    first non-containment association. The association target is either an explicit Edm.EntitySet in the same EntityContainer\r\n    or in a referred EntityContainer (cross service references) or an implicit EntitySet identified by the containment path\r\n    originating from an explicit EntitySet. This enhancement has an observable effect only in structured format with containment\r\n    turned on.\r\n  + Support for scales `variable` and `floating`:\r\n    + V4: `variable` and `floating` are rendered as `Scale=\"variable\"`. Since V4 does not support `floating`, it is aproximated as `variable`.\r\n    + V2: `variable` and `floating` are announced via property annotation `sap:variable-scale=\"true\"`\r\n  \r\n- to.sql/hdi/hdbcds:\r\n  + Reject scale `floating` and `variable`.\r\n  + Reject arbitrary `$user` or `$session` paths that cannot be translated to valid SQL.\r\n  + Following a valid `exists`, further `exists` can be used inside of the filter-expression: `exists assoc[exists another[1=1]]`\r\n  + `exists` can now be followed by more than one association step.\r\n  `exists assoc.anotherassoc.moreassoc` is semantically equivalent to `exists assoc[exists anotherassoc[exists moreassoc]]`\r\n\r\n### Changed\r\n\r\n- to.odata: Inform when overwriting draft action annotations like `@Common.DraftRoot.ActivationAction`.\r\n\r\n## Version 2.9.0 - 2021-10-15\r\n\r\n### Changed\r\n\r\n- to.edm(x): Raise `odata-spec-violation-type` to a downgradable error.\r\n\r\n### Fixed\r\n\r\n- to.edm(x):\r\n  + Fix a bug in annotation propagation to foreign keys.\r\n  + Don't render annotations for not rendered stream element in V2.\r\n- to.hdi:\r\n  + for naming mode \"hdbcds\" and \"quoted\" parameter definitions are not quoted anymore.\r\n- to.hdi/sql/hdbcds:\r\n  + Correctly handle explicit and implicit alias during flattening.\r\n  + Raise an error for `@odata.draft.enabled` artifacts with elements without types - instead of crashing with internal assertions.\r\n\r\n## Version 2.8.0 - 2021-10-07\r\n\r\n### Added\r\n\r\n- Allow defining unmanaged associations in anonymous aspects of compositions.\r\n- Enable extensions of anonymous aspects for managed compositions of aspects.\r\n- When the option `addTextsLanguageAssoc` is set to true and\r\n  the model contains an entity `sap.common.Languages` with an element `code`,\r\n  all generated texts entities additionally contain an element `language`\r\n  which is an association to `sap.common.Languages` using element `local`.\r\n- for.odata:\r\n  + In `--odata-format=flat`, structured view parameters are flattened like elements.\r\n- to.hdbcds\r\n  + Use \"smart quotes\" for naming mode \"plain\" - automatically quote identifier which are reserved keywords or non-regular.\r\n\r\n### Changed\r\n\r\n- for.odata:\r\n  + In `--data-format=structured`, anonymous sub elements of primary keys and parameters are set to `notNull:true`,\r\n    an existing `notNull` attribute is _not_ overwritten. Referred named types are _not_ modified.\r\n- to.edm(x):\r\n  + Improve specification violation checks of (nested) keys:\r\n    + All (sub-)elements must be `Nullable: false` (error).\r\n    + Must represent a single value (error).\r\n    + In V4 must be a specification compliant Edm.PrimitiveType (warning).\r\n- to.hdi/hdbcds/sql: $user.\\<xy\\> now has \\<xy\\> added as alias - \"$user.\\<xy\\> as \\<xy\\>\"\r\n\r\n### Fixed\r\n\r\n- Properly generate auto-exposed entities for associations in parameters.\r\n- Correctly apply extensions to anonymous array item types.\r\n- Correctly apply/render annotations to anonymous action return types.\r\n- With CSN flavor `plain` (`gensrc`), correctly render annotations on elements\r\n  of referred structure types as `annotate` statements in the CSN's `extensions` property.\r\n- to.cdl:\r\n  + Correctly render extensions on array item types\r\n  + Correctly render annotations on action return types\r\n- to/for: Correctly handle CSN input where the prototype of objects is not the \"default\"\r\n- to.hdi:\r\n  + for naming mode \"hdbcds\" and \"quoted\" parameter definitions are now quoted.\r\n  + for naming mode \"plain\", smart quotation is applied to parameter definitions if they are reserved words.\r\n- to.hdi/hdbcds/sql:\r\n  + Ensure that cdl-style casts to localized types do not lose their localized property\r\n  + Fix a small memory leak during rendering of SQL/HDBCDS.\r\n- to.edm(x): Remove ambiguous `Partner` attribute from `NavigationProperty`. A forward association referred\r\n  to by multiple backlinks (`$self` comparisons) is no longer partner to an arbitrary backlink.\r\n\r\n## Version 2.7.0 - 2021-09-22\r\n\r\n### Added\r\n\r\n- to.hdi.migration:\r\n  + Support changes to HANA comments.\r\n\r\n### Changed\r\n\r\n- Updated OData vocabularies 'Common', 'Core'\r\n\r\n### Fixed\r\n\r\n- Fix memory issue: do not keep reference to last-compiled model.\r\n- Fix dump which occured when trying to report that the user has defined an element to be both `key` and `localized` if\r\n  `localized` was inherited via the provided type, or in the generated entity for a managed composition of aspect.\r\n- Properly auto-expose targets of associations in parameters and `many`.\r\n- for.Odata:\r\n  + Fix handling of annotation `@cds.odata.valuelist` in conjunction with associations in structures using flat-mode and sqlMapping set to plain.\r\n  + Set correctly the $localized property in the OData backend resulting CSN for artifacts that have localized convenience views.\r\n- to.edm(x):\r\n  + Fix rendering of structured referential constraints and nested partnerships in combination with `$self` comparisons.\r\n  + Fix merging of `@Capabilities` annotations while transforming them into `NavigationCapabilities` from the containee into the container.\r\n- to.sql/hdi/hdbcds:\r\n  + Fix a bug in Association to Join translation in multi-level association redirection in combination with `$self`.\r\n  + Correctly flatten paths with filters or parameters.\r\n  + Improve error message in case of invalid `exists`.\r\n\r\n## Version 2.6.2 - 2021-08-26\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds/edm(x)/for.odata: Correctly handle tuple expansion in subqueries of Unions.\r\n\r\n## Version 2.6.0 - 2021-08-23\r\n\r\n### Added\r\n\r\n- Support managed associations without foreign keys. Associations targeting a definition without primary keys or with an\r\n  explicit empty foreign key tuple or with empty structured elements as foreign keys and their corresponding `$self`\r\n  comparisons do not describe the relationship between the source and the target entity.\r\n  These associations can be used to establish API navigations but cannot be used to access elements in the target\r\n  entity as they cannot be transformed into a valid JOIN expression.\r\n  Consequently, these associations are not added to the `WITH ASSOCIATIONS` clause or forwarded to HANA CDS.\r\n- to.sql/hdi/hdbcds/edm(x)/for.odata: Structure/managed association comparisons (tuple comparisons) are now\r\n  also expanded in infix filters, all expressions and all on-conditions.\r\n- to.hdbcds: Better locations for messages - mostly concerning keywords and duplicates\r\n\r\n### Changed\r\n\r\n- to.sql/hdi/hdbcds: Invalid (i.e. not expandable) usage of structures is now checked - an error is raised\r\n\r\n### Removed\r\n\r\n- The internal non-enumerable CSN property `$env` has been removed from the compiled CSN.\r\n\r\n### Fixed\r\n\r\n- Make `;` optional before `}` in all circumstances (was not the case with `many`).\r\n- to.sql/hdi/hdbcds/edm(x): More graceful handling of CSN input where associations do not have `keys` or an `on`-condition\r\n\r\n## Version 2.5.2 - 2021-08-10\r\n\r\n### Fixed\r\n\r\n- to.hdbcds: Fixed a bug introduced with 2.5.0 that caused virtual elements to be rendered in views.\r\n\r\n## Version 2.5.0 - 2021-07-28\r\n\r\n### Added\r\n\r\n- Allow to extend existing array annotation values via the ellipsis operator `...`.\r\n  An ellipsis may appear exactly once at an arbitrary position in the top level array\r\n  of an `annotate` directive. Only array values can be merged into arrays and unapplied\r\n  ellipses are removed from the final array value. Annotation layering rules remain unaffected.\r\n- to.sql/hdi/hdbcds:\r\n  + Doc comments are translated into HANA comments (or into `@Comment` annotation for `to.hdbcds`).\r\n  Such comments are possible on entities, views, elements of entities and `to.hdbcds` also supports comments on view columns.\r\n  Generation can be disabled via option `disableHanaComments`. Entites/views (and their elements/columns)\r\n  annotated with `@cds.persistence.journal` for `to.hdi`/`to.sql` will not have comments rendered.\r\n  + Generation of temporal `WHERE` clause can be suppressed by annotating the `validFrom`/`validTo` elements of the projection with `false` or `null`.\r\n- to.sql/hdi/hdbcds/edm(x)/for.odata: Structure/managed association comparisons (tuple comparisons) are now\r\n  also expanded in `WHERE` and `HAVING` - this was previously only supported in on-conditions.\r\n- `cdsc` now internally uses SNAPI.\r\n- to.hdi.migration:\r\n  + Validate that the two supplied CSNs are compatible.\r\n  + Improve delta-mechanism to not render superflous [ALTER|DROP|ADD] statements for unchanged SQL.\r\n\r\n### Changed\r\n\r\n- If the first source provided to the compile command has a `$sources` property\r\n  (whether enumerable or not) which is an array of strings,\r\n  use that instead of calculating one.\r\n- Updated OData vocabularies 'Aggregation', 'Analytics', 'Authorization', 'Capabilities',\r\n  'CodeList', 'Common', 'Communication', 'Core', 'Graph', 'HTML5', 'Measures', 'ODM', 'PersonalData',\r\n  'Repeatability', 'Session', 'UI', 'Validation'\r\n\r\n### Removed\r\n\r\n- Removed internal property `$viaTransform` from CSN produced by OData/HANA transformation\r\n\r\n### Fixed\r\n\r\n- Remove warnings 'Ignoring annotation “@odata.draft.enabled” as the artifact is not part of a service'\r\n  and 'Ignoring draft node for composition target ... because it is not part of a service'\r\n- Doc comments are no longer ignored after enum values and on view columns in parseCdl mode.\r\n- to.cdl:\r\n  + Doc comments for enum values are correctly rendered.\r\n  + Enum value and doc comments are now correctly rendered if the enum is called `doc`.\r\n  + Doc comments at type references are correctly rendered.\r\n  + Empty doc comments are correctly rendered and not left out.\r\n  + Doc comments on view columns are correctly rendered.\r\n- to.edm(x):\r\n  + OData V2: Ignore `@odata.singleton`.\r\n  + OData V4: Do not render an `edm:NavigationPropertyBinding` to a singleton if the association has\r\n    cardinality 'to-many'.\r\n- forOData:\r\n  + Fix automatic renaming of shortcut annotation (eg. `@label`) with value `null`.\r\n- CSN parser:\r\n  + Empty doc comments are correctly parsed and not complained about.\r\n\r\n## Version 2.4.4 - 2021-07-02\r\n\r\n### Fixed\r\n\r\n- Do not remove parentheses around single literals and references on the right-hand side of an `in` and `not in` operator.\r\n\r\n## Version 2.4.2 - 2021-07-01\r\n\r\n- Only changes to beta features. Refer to the [beta ChangeLog](doc/CHANGELOG_BETA.md#version-242) for more.\r\n\r\n## Version 2.4.0 - 2021-06-28\r\n\r\n### Added\r\n\r\n- to.edm(x):\r\n  + Warn if an `edm:Property` has no `Type` attribute.\r\n  + Warn about using the protected names 'Edm', 'odata', 'System', 'Transient' as `edm:Schema` `Namespace` values.\r\n  + Allow `$edmJson` inline annotations in `edm:Collection` and nested annotations.\r\n- to.hdi/sql/hdbcds: Transform a `exists <association>` into a `exists <subselect>`, where the subselect\r\n  selects from the target of `<association>` and establishes the same relation as `<association>` would via the WHERE clause.\r\n  Infix-filters of `<association>` are added to the WHERE clause.\r\n\r\n### Changed\r\n\r\n- Do not inherit `@cds.persistence.skip` when `@cds.persistence.table` is set on entity.\r\n- to.cdl: Opening and closing braces of empty services and contexts are now on the same line.\r\n\r\n### Fixed\r\n\r\n- `cdsc`: Option `--direct-backend` can now be combined with `toCsn`'s option `--with-localized`\r\n- The option `testSortCsn` was erroneously ignored in some compiler backends.\r\n\r\n## Version 2.3.2 - 2021-06-14\r\n\r\n### Fixed\r\n\r\n- for.odata: Propagate the `virtual` attribute correctly while flattening structures.\r\n- If internal relational types are used directly in CDL (e.g. `cds.Association`), an error is emitted.\r\n  In CSN, all artifacts of relational types need a `target` (/`targetAspect`) as well.\r\n- In Association to Join translation don't produce a JOIN node for exposed (transitive) associations in\r\n  combination with their exposed foreign keys. Also resolve foreign keys correctly against the target\r\n  entity allowing to expose renamed foreign keys when aliased.\r\n- The option `testSortCsn` (`--test-sort-csn` in `cdsc`) can be used to sort CSN definitions alphabetically.\r\n  This option is only intended for tests.  This will restore the pre-v2.3.0 ordering in EDMX.\r\n- to.sql:\r\n  + for SQL-dialect `sqlite`, render the string-format-time function (`strftime()`)\r\n    + `$at.from` with date-format: `'%Y-%m-%dT%H:%M:%S.000Z'`\r\n    + `$at.to` with date-format:  `'%Y-%m-%dT%H:%M:%S.001Z'` (**+1ms** compared to `$at.from`)\r\n  + for SQL-dialect `hana` wrap `SESSION_CONTEXT('VALID-TO')` and `SESSION_CONTEXT('VALID-FROM')` in `TO_TIMESTAMP(..)` function\r\n- to.hdbcds:\r\n  + Wrap `SESSION_CONTEXT('VALID-TO')` and `SESSION_CONTEXT('VALID-FROM')` in `TO_TIMESTAMP(..)` function\r\n\r\n## Version 2.3.0 - 2021-06-02\r\n\r\n### Added\r\n\r\n- `cdsc` got a new option `--fallback-parser <cdl|csn>` that is used\r\n  if an unknown or no file extension is used.\r\n- to.hdi/sql: Allow association publishing in UNIONs - this was previously forbidden, but this limitation only applies to HANA CDS.\r\n- to.edm(x): Support dynamic expressions as $edmJson inline code\r\n\r\n### Changed\r\n\r\n- Type `DecimalFloat` is no longer proposed for code-completion.\r\n- Non-string enums without values for their enum elements are warned about.\r\n- OData CSN is no longer sorted by definition names\r\n- to.edm(x): Update OData vocabularies 'Aggregation', 'Analytics', 'CodeList', 'Common', 'Measures', 'Session', 'UI'\r\n\r\n### Removed\r\n\r\n- to.hdbcds: Association publishing in subqueries is not supported by HANA CDS - an error is raised during compile time, instead of waiting for a deployment error.\r\n\r\n### Fixed\r\n\r\n- Correct auto-exposure in model with unscoped projection on deep scoped entity\r\n  (from managed aspect compositions: component in component, like they are common in ODM).\r\n- Internal types `cds.Association` and `cds.Composition` are no longer proposed for code-completion.\r\n- Fix various issues with Association to Join translation:\r\n  + Substitute `$self.alias` expressions and respect prefix paths in foreign key accesses.\r\n- to.hdbcds: In naming mode \"hdbcds\", correctly resolve $self backlinks with aliased foreign keys.\r\n- to.cdl:\r\n  + Correctly traverse subelements when rendering annotations for them.\r\n  + Quote element names (if required) in `annotate with` statements.\r\n- for.odata: Fix regression with detecting collision when generating foreign keys.\r\n- to.edmx: Correctly render final base types in EDMX V2 when called with transformed OData CSN for V4.\r\n\r\n## Version 2.2.8 - 2021-05-20\r\n\r\n### Fixed\r\n\r\n- Fix regression: also for associations _defined_ in a service, try to\r\n  implicitly redirect the provided model target.\r\n\r\n## Version 2.2.6 - 2021-05-12\r\n\r\n### Fixed\r\n\r\n- to.edmx(x):\r\n  + The reverted change \"`array of` elements are now allowed for OData V2, too.\" introduced with v2.2.0 has caused\r\n    regressions in various scenarios that used OData V4 processed CSN for OData V2 EDMX rendering. Therefore\r\n    the error has been lowered to a 'odata-spec-violation-array-of' warning.\r\n  + The fix 'Render constraints only if all principal keys are used in association' introduced with v2.2.2 has\r\n    caused regressions in mocking scenarios. With option `--odata-v2-partial-constr` partial constraint generation\r\n    can be reactivated. A 'odata-spec-violation-constraints' warning is raised.\r\n\r\n### 2.5.0 Addendum to Changed\r\n\r\n- Replace outdated option `length` with `defaultStringLength` which is usable in `for.*` and `to.*` APIs.\r\n\r\n\r\n## Version 2.2.4 - 2021-05-06\r\n\r\nNo changes compared to Version 2.2.2; fixes latest NPM tag\r\n\r\n## Version 2.2.2 - 2021-05-04\r\n\r\n### Fixed\r\n\r\n- Usually reserved names like `in` in references used as annotation values can now really\r\n  be provided without delimited identifiers (if the name is not `true`, `false` or `null`).\r\n- Fixed the implicit redirection of associations to scoped targets (like texts entities).\r\n- Fix regression: Allow virtual structured elements.\r\n- to.edm(x):\r\n  + OData V2:\r\n    + Remove warning about scalar return types.\r\n    + Render constraints only if all principal keys are used in association.\r\n  + OData V4: Don't remove `@Capabilities` annotations from containee.\r\n  + Allow `@Core.MediaType` on all types and raise a warning for those (scalar) types that can't be mapped to `Edm.String` or `Edm.Binary`.\r\n- to.cdl: Also handle subelement-annotations by rendering a `annotate X with Y`.\r\n- to.hdi/sql/hdbcds: Fixed the DB name (with naming mode `quoted`/`hdbcds`) and the `to.hdi` file name of scoped definitions (like `texts` entities)  in services.\r\n- Empty enums no longer result in a syntax error.\r\n\r\n## Version 2.2.0 - 2021-04-28\r\n\r\n### Added\r\n\r\n- The compiler now takes the “definition scope” of associations and compositions into account\r\n  when implicitly redirecting the target and auto-exposing entities.\r\n- odata: The warning `enum-value-ref` is no longer reclassified to an error.\r\n  However, references to other enum values are still not supported.\r\n\r\n### Changed\r\n\r\n- Remove special handling for implicit redirection to auto-exposed entity; consistently\r\n  do not overwrite user-specified target in a service anymore, also in this special case.\r\n- Structured/Arrayed types for enums are now an error and not just a warning.\r\n- to.cdl: Keywords in annotation paths are no longer escaped\r\n\r\n### Removed\r\n\r\n- Consistently reject references to auto-exposed entities except for `annotate`\r\n  (it might have worked before, depending on the sequence of definitions);\r\n  expose an entity manually if you want to refer to it.\r\n\r\n### Fixed\r\n\r\n- Do not omit indirectly annotated or redirected sub elements\r\n  during propagation of expanded sub elements.\r\n- Also auto-expose composition targets of projected compositions,\r\n  not just those target which were used at the original definition of the composition.\r\n- Improve checks for keys which are `array of` or of SAP HANA spatial type (`ST_POINT` & `ST_GEOMETRY`)\r\n  with checking also inside of used user-defined structured type.\r\n- to.edm(x):\r\n  + V2: `OnDelete=Cascade` was set on dependent instead on principal role.\r\n  + V4: ReferentialConstraints Property and ReferencedProperty for managed composition to one were swapped.\r\n\r\n### 2.2.6 Addendum to Changed\r\n\r\n- to.edm(x): Revert 2.1.0 change: \"`array of` elements are now allowed for OData V2, too.\"\r\n  OData V2 does not allow elements to be typed with `Collection()`. Any `many`\r\n  predicate in element definitions is rejected. The only two positions where the `many` predicate\r\n  is allowed are `association to many` and `returns many`.\r\n\r\n## Version 2.1.6 - 2021-04-14\r\n\r\n### Fixed\r\n\r\n- Do not unjustified complain about `$self` comparisons.\r\n- Auto-exposed entities are represented as projections in the CSN.\r\n- to.sql/to.hdi:\r\n  + Revert change \"Default values are no longer propagated from the principal to the generated foreign key element.\" from version 2.1.0\r\n  + Fix regression where localized convenience views for temporal entities used keys in the from clause that did not exist on the texts-entity\r\n  + Mixin associations are properly removed and are not rendered into views anymore\r\n- to.hdi(.migration): Ensure filenames for `.hdbindex` files stay compatible to V1\r\n- for.odata: An association as a type of action's parameter or return type now signals an error\r\n- to.edm(x):\r\n  + `@Capabilities` annotations remain on the containees entity type\r\n  + In containment mode don't render foreign keys of the containment constituting 'up' association in the containee\r\n    as primary key refs.\r\n  + Revert change \"Default values are no longer propagated from the principal to the generated foreign key element.\" from version 2.1.0\r\n  + Allow `--odata-proxies` and/or `--odata-x-service-refs` in combination with `--odata-format=flat` and `--version=v4`\r\n\r\n## Version 2.1.4 - 2021-03-31\r\n\r\n### Fixed\r\n\r\n- The postinstall step now never fails with an exit code != 0. As the postinstall step is optional, it should not break any `npm install` steps.\r\n\r\n## Version 2.1.2 - 2021-03-29\r\n\r\n### Fixed\r\n\r\n- ensure `postinstall` script is part of the shipped `package.json`\r\n\r\n## Version 2.1.0 - 2021-03-26\r\n\r\n### Added\r\n\r\n- Inferred sub elements of a referred structure type can be individually annotated.\r\n- All primitive types except for binary are now allowed as enum value types.\r\n- Allow users to define `A.B` even if there is a definition `A` which is not a context or service.\r\n- You can now provide almost all annotation assignments without delimited identifiers:\r\n  the use of `.`, `@` and `#` is fine for annotation names,\r\n  property names of structures, and in references used as annotation values.\r\n- for.odata:\r\n  + All the artifacts that have localized fields get a `$localized: true` property.\r\n  + Allow the user to define draft actions for annotation purposes\r\n    + `draftPrepare(SideEffectsQualifier: String) returns <ET>`,\r\n    + `draftActivate() returns <ET>`,\r\n    + `draftEdit(PreserveChanges: Boolean) returns <ET>`\r\n- to.edm(x):\r\n  + Warn about non-applicable annotations.\r\n  + Render property default values (only OData V4).\r\n  + Option `odataProxies` exposes association targets outside of the current service.\r\n    These `EntityType`s do only expose their primary keys have no accompanying `EntitySet`.\r\n    The added navigation targets are exposed under their namespace or if not available under namespace `root`.\r\n    `odataProxies` is only available with `--format=structured`.\r\n  + Option `odataXServiceRefs` renders an `edm:Reference` to the service for those navigation targets\r\n    that are defined in another service. `odataXServiceRefs` is only available with `--format=structured`.\r\n  + Duplicate EntityContainer entries with same name will raise an error.\r\n  + `array of` elements are now allowed for OData V2, too.\r\n- to.sql/hdi/hdbcds: Explicitly render the implicit alias for functions without arguments, e.g. `current_date`.\r\n- to.sql:\r\n  + Sort the SQL statements according to the deployment order.\r\n  + New sql dialect `plain`, which now is the default.\r\nsynchronously.\r\n- API:\r\n  + `compileSync()` is now compatible to `compile()`:\r\n    the function can also receive a file cache and will resolve all `using`s\r\n  + New API functions `parse.cql` (prefer it to deprecated `parseToCqn`) and\r\n    `parse.expr` (prefer it to deprecated `parseToExpr`)\r\n  + function `getArtifactCdsPersistenceName` now accepts a CSN as a third parameter (used to be a namespace). With a CSN provided,\r\n    the name can be correctly constructed for naming modes `quoted` and `hdbcds`. Without a CSN, the name is possibly wrong\r\n    if it contains dots. If the CSN is not provided or the third parameter is not a CSN, the old, deprecated, implementation is used.\r\n- `cdsc` and other client tools:\r\n  + Added `--with-localized` to the command `toCsn` which adds convenience views for localized entities to the output.\r\n  + A script `bin/cds_update_identifiers.js` was added. You can use it to update the delimited identifier style in your CDS sources.\r\n  + A script `bin/cdscv2m.js` was added.\r\n    It's command `ria` adds `@cds.redirection.target: false` annotate statements\r\n    for all ambiguous redirection errors.\r\n- Added `deprecated` options; setting any of them disables all `beta` options.\r\n\r\n### Changed\r\n\r\n- CSN representation:\r\n  + CSN Version is set to `2.0`\r\n  + CSN `definitions` are not sorted anymore\r\n  + `$syntax` is non-enumerable\r\n  + increase the use of JS numbers in the CSN for numbers in CDL, especially noticable in annotation values\r\n  + Annotation definitions are to be found in the top-level property `vocabularies`.\r\n  + Introduce `kind: 'aspect'` to replace `kind: 'type', $syntax: 'aspect'` and\r\n    `kind: 'entity', abstract: true` (the deprecated variants are still accepted as input).\r\n  + Projections are rendered via `projection` instead of `query.SELECT`.\r\n  + Parentheses are represented structurally and unnecessary parentheses are omitted.\r\n  + Use `.` instead of `_` for the name suffix of generated texts entities and the calculated entity for managed compositions.\r\n  + The CSN returned by `compile()` does not include localized convenience views anymore.\r\n- Core engine (function `compile`):\r\n  + An assignment `@Foo.Bar` is always `@Foo.Bar`, we do not try to search anymore\r\n    for a local definition of `Foo` probably having a different full name.\r\n  + Localized convenience views are no longer generated by the core compiler but added by the `for.odata`\r\n    and `to.sql/hdi/hdbcds` processing on demand.\r\n  + Minimize name clashes when calculating names for autoexposed entities,\r\n    extends the v1 option `dependentAutoexposed` to sub artifacts of entites (see “Added”).\r\n  + Ambiguities when redirecting associations now always lead to compile errors;\r\n    you might want to use the new annotation `@cds.redirection.target` to solve them.\r\n  + The association `up_` in the calculated entity for managed compositions is now managed.  \r\n    _Limitation_: Nested managed compositions are not activatable via `to.hdbcds --names=hdbcds`.\r\n  + Bound actions and functions are no longer propagated from the main query source to the resulting view or projection.\r\n  + Remove annotation `@cds.autoexpose` from generated `.texts` entity\r\n  + Require `order by` references to start with a table alias when referring to source elements.\r\n  + Infer the type of a `select` item from the type of a top-level `cast`.\r\n- Localized convenience views now also contain `masked` elements of the original artifact.\r\n- for.odata:\r\n  + Even with `--format: structured`, (flat) foreign keys for managed associations are generated.\r\n  + An `entity` or an `aspect` defined outside the current service cannot be used as action parameter or return types.\r\n  + Structured elements are expanded in-place.\r\n  + Foreign keys for managed associations are created in-place.\r\n- to.edm(x):\r\n  + An `Edm.TypeDefinition` is rendered for a derived scalar type and used as type reference instead of\r\n    rendering the final scalar type, including the `array of`/`many` predicates.\r\n  + `enum` type definition as service member is rendered as `edm:TypeDefinition` instead of `edm:EnumType`.\r\n  + Set default source cardinality of compositions to exact one. This is observable in V2 EDM only.\r\n  + Key must not be `nullable=true`, this includes all sub elements of used structured types.\r\n  + Default values are no longer propagated from the principal to the generated foreign key element.\r\n  + `array of array` is rejected, nested Collections `Collection(Collection(...))` are illegal.\r\n  + Temporal rendering:\r\n    + `@cds.valid.from` is not `Edm.KeyRef` anymore.\r\n    + `@cds.valid.key` is rendered as `@Core.AlternateKeys`.\r\n  + Downgrade message \"`<Term>` is not applied\" from warning to info.\r\n  + Update Vocabularies 'Aggregation', 'Capabilities', 'Core', 'Validation'.\r\n- to.sql/to.hdi/to.hdbcds:\r\n  + Reject using associations or compositions in query elements starting with `$self` or `$projection`.\r\n  + Virtual elements are not rendered.\r\n  + Structured elements are expanded in-place.\r\n  + Foreign keys for managed associations are created in-place.\r\n  + Implicit/CDL-style casts are not rendered as SQL CASTs.\r\n  + All association usages in queries are always translated into JOIN expressions\r\n    (except for to.hdbcds `--names=hdbcds`).\r\n- to.sql/to.hdi:\r\n  + Downgrade message `to-many-no-on` from error to warning.\r\n  + Default values are no longer propagated from the principal to the generated foreign key element.\r\n- to.sql:\r\n  + Changed type mappings for `--dialect=sqlite`:\r\n    + `cds.Date` -> `DATE_TEXT`\r\n    + `cds.Time` -> `TIME_TEXT`\r\n    + `cds.Timestamp` -> `TIMESTAMP_TEXT`\r\n    + `cds.DateTime` -> `TIMESTAMP_TEXT`\r\n    + `cds.Binary` -> `BINARY_BLOB`\r\n    + `cds.hana.Binary` -> `BINARY_BLOB`\r\n  + Don't check missing type facets.\r\n- to.hdbcds:\r\n  + References to derived, primitive types are replaced by their final type.\r\n    The derived type definitions are not rendered anymore for hdbcds naming mode.\r\n  + Don't check missing type facets in views.\r\n- to.cdl:\r\n  + Render maximum cardinality as 'to one' or 'to many'.\r\n  + Return at most two files. The first one (named `model.cds`) contains all definitions, simply rendered in order,\r\n    without namespaces or usings. Contexts and services are NOT nested. The second file (named `<namespace>.cds`)\r\n    represents the CSN `namespace` property, simply defining such a namespace and requiring the first file.\r\n- API changes:\r\n  + The API functions `compile()` and `compileSync()` return a CSN and not an XSN,\r\n    `compactModel()` returns the first argument.\r\n  + If `options` does not provide a `messages` property, all messages are printed to standard error.\r\n  + The `options.messages` is kept throughout the compiler and contains all messages from the compiler and all backends.\r\n  + Messages are not sorted anymore; use the API function `sortMessages` to have it sorted.\r\n\r\n### Removed\r\n\r\n- Core engine (function `compile`):\r\n  + Referential integrity issues now always lead to compile errors.\r\n  + The `type of` operator (without `:` in the reference) cannot be used\r\n    for parameters and inside queries anymore.\r\n  + Using `\"…\"` for delimited identifiers leads to a compile error.\r\n  + Issue an error for “smart artifact references”, i.e.\r\n    when using `Definition.elem` instead of `Definition:elem`\r\n  + The definition of annotations is no longer allowed in `context`s and `service`s.\r\n  + Providing an alias name without `as` leads to a compile error or warning.\r\n  + Providing unexpected kind of definitions for `type` or other references leads to a compile error.\r\n  + The ancient CSN 0.1.0 format generation has been removed.\r\n  + The compiler does no longer look for modules whose file extension is `.csn.json`,\r\n    both `.csn` and `.json` is still checked.\r\n- for.odata:\r\n  + With `--format: structured`, the property `$generatedFieldName` in keys of\r\n    managed associations has been removed.\r\n  + Artificially exposed types that are required to make a service self contained are\r\n    removed from the OData processed CSN.\r\n  + Localized convenience views are no longer part of the OData CSN.\r\n- API changes:\r\n  + The deprecated XSN based transformers `forHana`, `forOdata`, `toSwagger`, `toSql`, `toCsn`, `toCdl`\r\n    have now been removed from the code base.\r\n  + Remove `collectSources()` as well as `options.collectSources`.\r\n  + A `CompilationError` usually does not have the property `model` anymore,\r\n    to avoid potential memory issues.\r\n  + CSN compiler messages no longer have a `location` property. Use `$location` instead.\r\n- The following `cdsc` options have been removed:\r\n  + `--old-transformers`.\r\n  + `--hana-flavor` with all corresponding rudimentarily implemented language constructs.\r\n  + `--new-resolve` (the new resolver is now the default).\r\n\r\n### Fixed\r\n\r\n- Core engine (function `compile`):\r\n  + Managed composition in sub elements are now properly redirected,\r\n    even if the sub structure comes from a referred type.\r\n  + Do not dump with sub queries in the `on` condition of `join`s.\r\n  + Properly report that managed aspect composition inside types and as sub elements\r\n    are not supported yet.\r\n  + Make sure that including elements with managed aspect compositions only\r\n    use the provided target aspect, but not the generated target entity.\r\n  + Properly handle the extra keywords in the third argument of the HANA SQL function `round`.\r\n- to.edm(x):\r\n  + Return all warnings to the user.\r\n  + Don't render references and annotations for unexposed associations.\r\n  + Rendering of `@Validation.AllowedValue` for elements of type enum annotated with `@assert.range`:\r\n    + Add `@Core.Description`, if the enum symbol has a `@Core.Description`, `@description` or document comments.\r\n  + Primary key aliases are now the path basenames, colliding aliases are numbered.\r\n  + Fix a bug in constraint calculation if principal has no primary keys.\r\n  + Illegal OData identifiers which are not exposed in the generated edmx schema are not causing errors anymore.\r\n  + Improve non-enum value handling on term definitions based on an enum type by raising a warning and rendering\r\n    the value with appropriate scalar EDM type.\r\n  + Render annotion qualifier in JSON format.\r\n- to.sql/hdi/hdbcds:\r\n  + Reject structured view parameters for HANA.\r\n  + Types are not rendered anymore for HANA in quoted mode.\r\n  + Structured elements in subqueries are now properly expanded.\r\n  + Actions, functions, annotations and events do not have DB specific checks run on them, as\r\n    they will not be part of the resulting artifacts anyways\r\n  + With `--names=quoted` or `hdbcds`, some `.` in artifact names are turned into `_`.\r\n    In general, this happens when part of the name prefix is \"shadowed\" by a non-context/service;\r\n    any `.` after that point is turned into `_`. This change also affects the filenames and the\r\n    `@cds.persistence.name` annotation in the CSN returned by `to.hdi.migration` and `for.odata`.\r\n- to.sql/hdi:\r\n  + Fixed a bug which led to an exception if elements were referenced as types.\r\n  + For the SQLite dialect, date, time and timestamp are rendered as simple string literals instead of function calls.\r\n  + For naming mode \"plain\", date, time and timestamps are rendered as SQL-compliant literals.\r\n- to.sql/hdbcds: Fix issue which led to wrong ON conditions for naming mode `hdbcds`.\r\n- to.sql:\r\n  + SRID of SAP HANA spatial type (`ST_POINT` & `ST_GEOMETRY`) is not rendered as the length of `CHAR`\r\n    for SQL-dialects other than `hana`. The resulting `CHAR` has a default length of 2000.\r\n- to.hdbcds:\r\n  + Nullability constraints on view parameters are not rendered anymore.\r\n  + CDS and HANA CDS types inside cast expressions are mapped to their SQL-counterparts, as the CDS types can't be used in a cast.\r\n- to.cdl: Correctly render `event` typed as `projection`.\r\n- to.hdi.migration: Don't generate `ALTER` for type change from association to composition or vice versa (if the rest stays the same),\r\n  as the resulting SQL is  identical.\r\n\r\n## Version 1.50.10 - 2021-07-30\r\n\r\n### Fixed\r\n\r\n- to.hdi.migration: Check for incompatible CSN versions to avoid wrongly generated ALTER|DROP|ADD statements.\r\n\r\n## Version 1.50.8 - 2021-07-01\r\n\r\n### Fixed\r\n\r\n- to.hdi.migration: Don't generate `ALTER` for type change from association to composition or vice versa (if the rest stays the same), as the resulting SQL is identical.\r\n\r\n## Version 1.50.6 - 2021-05-05\r\n\r\n### Fixed\r\n\r\n- to.edm(x):\r\n  + OData V2: Render constraints only if all principal keys are used in association.\r\n  + OData V4: Don't remove `@Capabilities` annotations from containee.\r\n  + Allow `@Core.MediaType` on all types and raise a warning for those (scalar) types that can't be mapped to `Edm.String` or `Edm.Binary`.\r\n\r\n## Version 1.50.4 - 2021-04-06\r\n\r\n### Fixed\r\n\r\n- to.hdbcds: CDS and HANA CDS types inside cast expressions are mapped to their SQL-counterparts, as the CDS types can't be used in a cast.\r\n\r\n## Version 1.50.2 - 2021-03-19\r\n\r\n### Fixed\r\n\r\n- Correct calculation of dependent autoexposed entity name\r\n  (fixing a potential regression with v1.50.0)\r\n- to.hdi.migration: Correctly handle \"temporal\" and other cases when rendering expressions\r\n- to.edm(x):\r\n  + Improve non-enum value handling on Oasis enum term definitions by raising a warning and rendering\r\n    the value with appropriate scalar EDM type.\r\n  + Render annotion qualifier in JSON format.\r\n- Update OData vocabularies\r\n  'Aggregation', 'Analytics', 'Capabilities', 'CodeList', 'Common', 'Communication',\r\n  'Core', 'Graph', 'HTML5', 'ODM', 'PersonalData', 'Session', 'UI'\r\n\r\n## Version 1.50.0 - 2021-02-25\r\n\r\n### Added\r\n\r\n- Introduce annotation `@cds.redirection.target`.\r\n  With value `false`, the projection is not considered an implicit redirection target;\r\n  with value `true`, is is considered a “preferred” redirection target.\r\n\r\n## Version 1.49.2 - 2021-02-16\r\n\r\n### Fixed\r\n\r\n- to.edm(x): Illegal OData identifiers which are not exposed in the generated edmx schema are not causing errors anymore.\r\n- to.cdl: Annotations are now rendered with the new delimited Identifier syntax\r\n- to.sql/hdi:\r\n  + Fixed a bug which led to an exception if elements were referenced as types.\r\n  + For the SQLite dialect, date, time and timestamp are rendered as simple string literals instead of function calls.\r\n  + For naming mode \"plain\", date, time and timestamps are rendered as SQL-compliant literals.\r\n\r\n## Version 1.49.0 - 2021-01-29\r\n\r\n### Added\r\n\r\n- to.hdi/sql:\r\n  + Updated the list of reserved keywords for HANA and SQLite\r\n  + Use \"smart quoting\" for naming mode \"plain\" - automatically quote reserved keywords\r\n- to.hdi.migration:\r\n  + Supports various kinds of entity changes: entity addition/deletion/change (the latter including element additions/deletions/type changes).\r\n  + Provides option to render any element type change as `ALTER TABLE DROP` to prevent deployment issues due to incompatible data\r\n    (default for length reductions or association/composition changes).\r\n- to.cdl: Smart artifact references are now rendered explicitly via `:` notation\r\n\r\n### Changed\r\n\r\n- OData/EDMX:\r\n  Change the `EntityType` precedence of the OData term definition `AppliesTo=` attribute. If `AppliesTo` contains\r\n  both `EntityType` and `EntitySet`, the annotation was assigned to the entity type. Extending an\r\n  `AppliesTo=[EntitySet]` with `EntityType` would be OData compliant but incompatible for clients\r\n  which still expect the annotation at the set and do not perform the full lookup.\r\n  With this change, `EntitySet` and `EntityType` are treated individually, effectively annotating the type and\r\n  (if available) the set. This fixes both extendability and client behavior.\r\n\r\n### Fixed\r\n\r\n- Structured foreign key and forward association reference paths used in ON condition definitions\r\n  are now translatable into the correct short form ON condition paths in Association to Join translation.\r\n- to.hdbcds: Aliased mixin-associations are now handled correctly\r\n\r\n## Version 1.48.0 - 2021-01-15\r\n\r\n### Changed\r\n\r\n- to.hdbcds/hdi/sql: Reject using associations or compositions in query elements starting with `$self` or `$projection`.\r\n- OData: Update vocabularies 'Common', 'PersonalData', 'UI'.\r\n\r\n### Fixed\r\n\r\n- Using a hex literal like `x'D028'` (in a CSN input) could lead to an error.\r\n- for.odata:\r\n  + Fix a bug in constraint calculation if principal has no primary keys.\r\n  + Don't overwrite user defined `@Core.Computed` annotation.\r\n- to.hdi/sql/hdbcds: Fixed a bug during processing of skipped/otherwise not db-relevant artifacts.\r\n\r\n## Version 1.47.0 - 2020-12-11\r\n\r\n### Changed\r\n\r\n- Update vocabularies 'Aggregation', 'Common'\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql:\r\n  + Types are not rendered anymore for SAP HANA in quoted mode.\r\n  + Aliases are now respected when resolving $self\r\n  + Association clones are now pre-pended with three underscores (`_`) instead of two\r\n    to prevent shadowing of context names or usings\r\n\r\n## Version 1.46.6 - 2020-12-01\r\n\r\n### Fixed\r\n\r\n- OData identifiers can now include all unicode characters which are described in the OData specification.\r\n\r\n## Version 1.46.4 - 2020-11-28\r\n\r\n### Fixed\r\n\r\n- Association to Join translation: Fix using forward association target as table alias in ON condition.\r\n\r\n## Version 1.46.2 - 2020-11-20\r\n\r\n### Fixed\r\n\r\n- to.edm(x) Fix a bug in the alias calculation for key references in structured OData.\r\n\r\n## Version 1.46.0 - 2020-11-20\r\n\r\n### Changed\r\n\r\n- to.edm(x):\r\n  + V4 structured key ref path aliases are now the basenames, colliding aliases are numbered.\r\n  + Lower level to `info` for \"‹Term› is not applied\" message if an annotation cannot be applied.\r\n- OData:\r\n  + Update vocabulary 'UI'\r\n  + Correctly handle `not null` during flattening. Only if the parent and all subelements in the chain\r\n  are `not null`, make the corresponding flat leaf element `not null`.\r\n\r\n### Fixed\r\n\r\n- Do not consider events to be potential targets for implicit redirections:\r\n  strange warnings for multiple projections or other strange errors disappear.\r\n- to.hdbcds/hdi/sql:\r\n  + Reject structured view parameters for HANA.\r\n  + Correctly handle `not null` during flattening.\r\n  Only if the parent and all subelements in the chain are `not null`, make the corresponding flat leaf element `not null`.\r\n- to.edm(x): Render @assert.range enum annotations correctly (enum symbol as value and don't omit zero value).\r\n- Fixed CDS module resolution with option `newResolve` on Windows where a superfluous `\\` was prepended to absolute paths.\r\n\r\n## Version 1.45.0 - 2020-10-30\r\n\r\n### Added\r\n\r\n- OData: Warn about non-applicable annotations.\r\n\r\n### Changed\r\n\r\n- A warning is emitted for annotation definitions inside services/contexts as this won't be\r\n  allowed in the next major cds-compiler release.\r\n- OData: Update vocabularies 'Analytics' and 'Common'.\r\n\r\n### Fixed\r\n\r\n- Association to Join translation: Fill empty select blocks with aliased columns.\r\n- to.edm(x):\r\n  + Some EDM(x) warnings were not properly passed to the user.\r\n  + Don't render references and annotations for unexposed associations.\r\n- to.hdbcds: Warnings during rendering of the hdbcds were not raised to the user.\r\n- Issue which led to wrong on-conditions for `hdbcds` naming mode.\r\n\r\n## Version 1.44.4 - 2020-10-16\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql: The processing of managed associations as foreign keys now works regardless of the order in which the possible chains are resolved.\r\n- OData: Namespaces are brought back into the exposed types. Dots are replaced with underscores in the name.\r\n\r\n## Version 1.44.2 - 2020-10-09\r\n\r\n### Added\r\n\r\n- OData: The annotations `@assert.format` and `@assert.range` now result in adding the\r\n  `@Validation.Pattern` and `@Validation.AllowedValues` in the resulting EDMX.\r\n- A new compiler option `newResolve` is added (`--new-resolve` for `cdsc`).  When set to `true` a new\r\n  module resolver is used which needs fewer file lookups. It will become the default in the future.\r\n- Event definitions can be typed with a reference to an event.\r\n- When the new option `withLocation` is set,\r\n  the property `$location` in the CSN is enumerable instead of non-enumerable;\r\n  the value of `$location` is an object with sub properties `file`, `line` and `col`\r\n  which describes the source position of all definitions, elements and other members.\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + The `namespace` is now not part of the exposed type's name.\r\n  + Update vocabularies 'Aggregation', 'UI' and 'Validation'.\r\n\r\n## Version 1.43.0 - 2020-10-02\r\n\r\n### Added\r\n\r\n- The magic variable `$session` is now supported. All element accesses are unchecked.\r\n- Reference paths as annotation values can now contain identifiers starting with `@`.\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + Raise message level for illegal OData identifiers from warning to error.\r\n  + Update vocabularies 'Aggregation' and 'Common'.\r\n  \r\n### Fixed\r\n\r\n- to.hdi/hdbcds/sql: Correctly process the elements of subqueries in localized view variants\r\n\r\n### Removed\r\n\r\n### Fixed\r\n\r\n- OData: put default value validation under `beta:odataDefaultValues`\r\n\r\n## Version 1.42.2 - 2020-09-29\r\n\r\n### Fixed\r\n\r\n- CDL: Action blocks can now be empty, e.g. `entity E {…} actions { }`.\r\n- An info message is emitted if builtin types are annotated.  Use a custom type instead.\r\n  Annotating builtins in CDL is possible but when transformed into CSN the annotation was silently lost.\r\n  It is now put into the \"extensions\" property of the CSN.\r\n- Fixed `cast()` for simple values like numbers and strings.\r\n\r\n- to.sql:\r\n  + Remove simple default value checks and allow the database to reject default values upon activation.\r\n  + Render empty actual parameter list when selecting from a view with parameters which are fully covered with\r\n  default values and no actual parameters are provided in the query itself.\r\n\r\n- OData:  \r\n  + Correctly render unary operator of default values in EDM.\r\n\r\n## Version 1.42.0 - 2020-09-25\r\n\r\n### Added\r\n\r\n- The compiler now supports the `cast(element as Type)` function in queries.\r\n  Using this function will also result in a `CAST` SQL function call.\r\n- A top-level property `i18n` is now supported. The property can contain translated texts.\r\n  The compiler expects its entries to be objects where each text value is a string.\r\n- CDL: Empty selection lists in views/projections are now allowed and make it possible to extend\r\n  empty projections. Note that views/projections without any elements are not deployable.\r\n- For CSNs as input, the compiler returns properties as they are (without checks)\r\n  if their name does not match the regexp `/[_$]?[a-zA-Z]+[0-9]*/` and does not start with `@`.\r\n  With more than one CSN input,\r\n  the compiler only returns the top-level CSN properties of the first source.\r\n\r\n### Changed\r\n\r\n- to.cdl: Smart type references are now explicitly rendered via \":\"-syntax\r\n\r\n### Removed\r\n\r\n### Fixed\r\n\r\n- Annotating an _unknown_ element _twice_ now results in a duplicate annotation error instead\r\n  of silently loosing the annotation.\r\n- Service/context extensions that reference a non-service/non-context now result in a compiler error\r\n  instead of silently loosing the context/service extension.\r\n- to.hdbcds/sql/hdi:\r\n  + fix a bug, which resulted in a malformed on-condition, if an association key\r\n  was another association pointing to an entitiy with a structured key.\r\n  + in conjunction with assoc-to-joins, the internal CSN reference broke\r\n  causing missing locations and even internal errors when logging messages\r\n  + managed associations in UNION are now correctly processed\r\n- The parseCdl mode now correctly resolves type arguments of \"many\" types.\r\n- OData: The annotation `@Capabilities.Readable` is now correctly\r\n  translated to `@Capabilities.ReadRestrictions.Readable`.\r\n\r\n## Version 1.41.4 - 2020-09-18\r\n\r\n### Removed\r\n\r\n- The length of HANA identifiers are not checked anymore: no more warnings are issued for long identifiers.\r\n\r\n### Fixed\r\n\r\n- The check for ignored \"localized\" keywords in sub-elements has been extended to also\r\n  include references to structured types.  \r\n- A warning was added if views/projections are used as element types.\r\n- An info message is emitted if a namespace is annotated.  \r\n  Annotating namespaces is not possible. Previously the annotation was silently lost.\r\n  It is now put into the \"extensions\" property of the CSN.\r\n\r\n## Version 1.41.2 - 2020-09-15\r\n\r\n### Fixed\r\n\r\n- OData: correctly render primary key associations targeting a composition parent but are not\r\n  the composition enabling association.\r\n- to.hdbcds/sql/hdi: Do not dump if artifact doesn't exist anymore after association to join translation\r\n- Only check for unmanaged associations inside of \"many\"/\"array of\" in the elements of views and entities,\r\n  not inside of actions and other members.\r\n\r\n## Version 1.41.0 - 2020-09-11\r\n\r\n### Added\r\n\r\n- OData: Allow the relational comparison of structures or managed associations in an ON condition as described in\r\n  version 1.32.0 - 2020-07-10 (forHana).\r\n- Allow `Struct:elem` with and without preceeding `type of` as type reference.\r\n\r\n### Fixed\r\n\r\n- to.cdl: Only render enums if they were directly defined there\r\n- The parseCdl mode now checks for redefinitions to avoid generating invalid CSN.\r\n- OData: An error is thrown if a redirected target has fewer keys than the original one.\r\n- OData: Empty structured elements are now handled correctly in `flat` format.\r\n\r\n## Version 1.40.0 - 2020-09-04\r\n\r\n### Added\r\n\r\n- to.hdi/sql: Support default values for view parameters.\r\n- OData: lower message severity from Error to Warning for\r\n  `<entity type> has no primary key` and `<type> has no properties`.\r\n\r\n### Changed\r\n\r\n- OData: The foreign key references in associations are not flattened any more with format `structured`.\r\n\r\n### Fixed\r\n\r\n- parse.cdl: Properly handle type arguments, most likely relevant for HANA types.\r\n- OData: Multilevel anonymously defined `composition of <aspect>` is now processed successfully with the OData backend.\r\n- OData: Fix a bug in EDM generation that caused a dump.\r\n- Update ANTLR dependency to version 4.8.\r\n\r\n## Version 1.39.0 - 2020-08-26\r\n\r\n### Added\r\n\r\n- If the first CDS source (CDL or CSN) provided to the compiler\r\n  has a `namespace` declaration/property, then\r\n  that namespace name is put into the property `namespace` of the returned CSN.\r\n- An event payload type can now be defined with a type/entity reference or\r\n  or projection (instead of providing the elements directly).\r\n- Aspects can now be included when specifying the elements of an event payload type,\r\n  as it is known for type, entity and aspect definitions.\r\n\r\n### Fixed\r\n\r\n- Fix a bug in explicit JOIN cardinality CDL parsing\r\n- to.hdbcds/hdi/sql: Identifiers are checked and warnings are raised if the identifier exceeds a length limitation which would result in a deployment error.\r\n- OData: Service, entity and element identifiers are checked and warnings are raised if an identifier is not compliant with the OData specification.\r\n\r\n## Version 1.38.0 - 2020-08-25\r\n\r\n### Changed\r\n\r\n- CSN: The property `payload` of an `event` has been renamed to `elements`.\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql: Correctly handle local-scope refs in on-conditions when flattening structures.\r\n- Run checks for associations inside of `many` or `array of` only on entities and views.\r\n\r\n\r\n## Version 1.37.0 - 2020-08-21\r\n\r\n### Added\r\n\r\n- Projections columns can now use expressions like select items,\r\n  both for `entity … as projection on` and `extend projection … with`.\r\n- OData: `array of <structure>` or `many <structure>` is now allowed in OData V4, flat format.\r\n\r\n### Changed\r\n\r\n- to.hdbcds/hdi/sql:\r\n  + Messages of id \"query-no-undefined\" are now raised as errors.\r\n  + Aspects/types/abstract entities containing anonymous aspect compositions\r\n    must not be used as types and are removed during transformation.\r\n\r\n### Fixed\r\n\r\n- to.cdl: Events are rendered.\r\n- to.cds: Anonymous aspect composition are now rendered correctly.\r\n- to.hdbcds/hdi/sql:\r\n  + Events are ignored.\r\n  + local-scope references in on-conditions are now handled correctly during flattening.\r\n  + Removed duplicate messages.\r\n- A model with multilevel `composition of <aspect>` (spread across several aspect declarations,\r\n  composing one another) is now processed successfully with the OData backend.\r\n- The CSN parser supports explicit join cardinalities.\r\n- Prefix a `@assert.unique` table constraint with the table name to avoid name clashes.\r\n\r\n\r\n## Version 1.36.0 - 2020-08-07\r\n\r\n### Added\r\n\r\n- Query select items can now be declared to be virtual.\r\n\r\n- CQL now allows to specify a join cardinality. Allowed are any combinations of  \r\n  `{ [ EXACT ] ONE | MANY } TO { [ EXACT ] ONE | MANY }` for  \r\n  `{ INNER | { LEFT | RIGHT | FULL } [ OUTER ] }` joins.  \r\n  The cardinality is added in the for HANA generated `CREATE VIEW` statements.\r\n\r\n- Support the creation of unique constraints by assigning `@assert.unique.<constraintName>` to\r\n  non-query entities or query entities annotated with `@cds.persistence.table`. The value of the\r\n  annotation is an array of paths referring to elements in the entity. The path leaf may\r\n  be an element of a scalar, structured or managed association type. Individual foreign keys or\r\n  unmanaged associations can not be accessed. In case the path points to a structured element,\r\n  the unique constraint will contain all columns stemming from the structured type. In case\r\n  the path points to a managed association, the unique constraint will contain all foreign key\r\n  columns stemming from this managed association.\r\n  For HANA a `UNIQUE INVERTED INDEX` and for SQLite a `named unique table constraint` is generated.\r\n\r\n### Changed\r\n\r\n- OData: Update vocabularies 'Common', 'UI'\r\n- The association to join transformation treats foreign key accesses with priority. If a foreign key\r\n  of a managed association can be accessed without joins, no joins are generated.\r\n  The priority handling can be turned of with option `joinfk`.\r\n\r\n### Fixed\r\n\r\n- Semantic location in messages is now more precise.\r\n\r\n## Version 1.35.0 - 2020-07-31\r\n\r\n### Added\r\n\r\n- Introduce option `localizedLanguageFallback`; if set to value `\"none\"`, the localized\r\n  convenience views do not use function `coalesce` to select from a default text as fallback.\r\n\r\n### Fixed\r\n\r\n- Properly consider targets of compositions in `mixin`s to be autoexposed.\r\n- Uniformly limit propagation of `@cds.autoexposed`, i.e.\r\n  there is not inheritance from a query source navigating along an association.\r\n  Previously, compiling a compiled model could lead to new autoexposed entities.\r\n- OData:\r\n  + V2: Distribute various `@sap` specific annotations to the entity container.\r\n  + Always set attribute `Nullable` on properties of type `Collection()`.\r\n\r\n## Version 1.34.0 - 2020-07-27\r\n\r\n### Fixed\r\n\r\n- Do not dump with illegal references in explicit `on` conditions of redirections;\r\n  properly report them via error messages.\r\n\r\n## Version 1.33.0 - 2020-07-24\r\n\r\n### Added\r\n\r\n- Allow to declare `many/array of` elements, parameters and return types to be `(not) null`.\r\n  The nullability applies to the array items of the element, not the element itself.\r\n- New boolean option `dependentAutoexposed` to avoid name clashes in dependent\r\n  autoexposed entities (text entities, components of managed compositions).\r\n- cdsc: Add toOdata version 'v4x' to combine `{ version: 'v4', odataFormat: 'structured', odataContainment: true }`.\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + Update vocabularies 'Common', 'Core', 'ODM'.\r\n  + The default nullability for collection value properties is `false`, indicating that the returned collection must\r\n    not contain null value entries.\r\n- toCdl: Identifiers are now quoted with `![` and `]`. Inner `]` characters are escaped with `]]`.\r\n- toCdl/toSql: Function names containing non standard HANA identifier characters are rendered case preserving and quoted\r\n  if an appropriate naming mode has been set in the options.\r\n\r\n### Fixed\r\n\r\n- forHana: Correctly flatten managed associations as foreign keys used in the definition.\r\n  of another managed association.\r\n- OData: Don't render aspects as `edm.ComplexType`.\r\n\r\n## Version 1.32.0 - 2020-07-10\r\n\r\n### Added\r\n\r\n- Provide semantic code completion for elements, enums, actions and parameters\r\n  in `annotate` and `extend`.\r\n- forHana: Allow the relational comparison of structures or managed associations in an ON condition.  \r\n  Both operands must be structurally compatible, that is both structures must be expandable\r\n  to an identical set of leaf paths. Each leaf path must terminate on a builtin CDS scalar type.\r\n  The original relational term of the form `s1 op s2` is replaced by the resulting expression\r\n  `s1.leafpath_0 op s2.leafpath_0 (AND s1.leafpath_i op s2.leafpath_i)*` with `i < n leaf paths`.\r\n\r\n### Changed\r\n\r\n- toCdl: String enums without a value are no longer rendered with their name's string representation as their value.\r\n\r\n### Fixed\r\n\r\n- parseCdl: Fix missing extensions in files that extend unknown services/contexts.\r\n- OData: Do not render an EDM document in case of raised errors\r\n- to.cdl: Aspects are now correctly rendered as aspects and not as types\r\n\r\n## Version 1.31.2 - 2020-07-03\r\n\r\n### Fixed\r\n\r\n- HANA/SQLite: Correctly handle already resolved types when a cds.linked CSN is passed in\r\n- HANA/SQLite: Ensure that all elements in a Draft are non-virtual\r\n\r\n## Version 1.31.0 - 2020-06-26\r\n\r\n### Added\r\n\r\n- forHana/toSql: A (proxy) entity representing a HANA User Defined Function or a HANA Calculation View\r\n  can now be annotated with `@cds.persistence { udf, calcview }` so that queries to these artifacts are\r\n  rendered with the appropriate parameter lists. Parameters for HANA Calculation Views are decorated with\r\n  `PLACEHOLDER.\"$$<id>$$\"`. HANA User Defined Functions without arguments require an empty argument\r\n  list `()` as part of the query source.  \r\n  Entities that are assigned with `@cds.persistence { udf, calcview }` cannot contain associations or act as\r\n  association targets, even if they have no defined parameter list.  \r\n  Multiple assignments of `@cds.persistence { table, udf, calcview }` to the same entity are rejected.\r\n- OData V4: Elements with type `array of <scalar type>` are now supported in flat mode\r\n\r\n### Changed\r\n\r\n- Option `beta` now only works with selective feature flags. Instead of `beta: true`, a dictionary of `<feature>: true` is expected. Available feature flags are:\r\n  1. subElemRedirections\r\n  2. keyRefError\r\n  3. aspectCompositions\r\n  4. odataProxies\r\n  5. uniqueconstraints\r\n- OData V4: Unmanaged associations/compositions with a target cardinality of exactly one (that is `[1..1]`)\r\n  are rendered as `edmx:NavigationProperty` with attribute `Nullable=\"false\"`\r\n- OData: On-condition checks are now performed when generating OData as well.\r\n- SQLite: The property length for string parameters is not longer restricted to 5000 characters.\r\n- HANA/SQLite: Improved the error message when an entity without elements is found to make it clearer what is expected.\r\n\r\n### Fixed\r\n\r\n- An error is emitted if parameters in functions/actions have a default value as it is not yet supported.\r\n  For example by using `type of E:element` where `element` has a default value.\r\n- OData V2: Derived scalar types are not rendered as `<edmx:TypeDefinition>`, so no annotation assignments to\r\n  such carriers must be rendered.\r\n- HANA/SQLite: Fixed a bug when flattening structured elements - instead of a human-readable error, an exception was thrown.\r\n\r\n## Version 1.30.0 - 2020-06-12\r\n\r\n### Added\r\n\r\n- Projections can now have `where` and `group by`/`having` clauses.\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- `doc` comments in CDL now support Windows-style line breaks (CRLF). They are replaced with `\\n` in CSN.\r\n- `toCdl` no longer renders a `*` column if no columns are used in the original source.\r\n- Types that have both `type` and `items`/`elements` properties in CSN are now checked to avoid\r\n  mismatches if a unstructured / non-arrayed type is referenced but `items`/`elements` exists.\r\n- OData:\r\n  + Correctly render CRLF and LF to __&#xa;__ in EDMX\r\n\r\n## Version 1.29.0 - 2020-06-08\r\n\r\n### Added\r\n\r\n- Projections can now have `limit` and `order by` clauses.\r\n\r\n### Changed\r\n\r\n- OData: Update vocabularies 'CodeList', 'Common', 'Graph', 'UI'\r\n\r\n### Fixed\r\n\r\n- Memory usage improvement - compile messages with id `ref-undefined-excluding` uses much less memory.\r\n\r\n- HANA/SQL: Validate ON conditions of mixin association definitions in all subqueries\r\n\r\n- OData V2: Assign various `@sap` annotations to the `<edmx:EnitySet>` and `<edmx:AssociationSet>`\r\n  if such annotations are assigned to CDS entities or associations.\r\n\r\n- OData V4 Structured: Omit foreign keys of managed associations that establish the containment relationship to\r\n  a container, if this association was declared to be primary key.\r\n\r\n- OData: Warn about non-integer enums as they are not supported by OData, yet.\r\n\r\n- Warn about string values in integer enums and vice versa.\r\n\r\n## Version 1.28.0 - 2020-05-27\r\n\r\n### Added\r\n\r\n- API: add `getArtifactCdsPersistenceName()` and `getElementCdsPersistenceName()` which return\r\n  the value of annotation `@cds.persistence.name` for the corresponding artifact/element.\r\n\r\n### Changed\r\n\r\n- Issue error if old backends are used with beta mode.\r\n- Raise severity of message `Unmanaged associations cannot be used as primary key` with id `unmanaged-as-key` to error.\r\n\r\n### Fixed\r\n\r\n- OData:\r\n  + Render vocabulary `<edmx:Reference>` and `<edmx:Include>` if vocabulary namespace was used.\r\n  + Reduce memory consumption in EDM Renderer.\r\n  + Render annotations for navigation properties if association is annotated with `@cds.api.ignore: true`.\r\n\r\n## Version 1.27.0 - 2020-05-15\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n- Improve warning messages for integer enum missing a value and chained array of.\r\n- HANA/SQL\r\n  + Empty structures are not allowed as foreign keys.\r\n- Report a warning for integer enum elements that do not have values.\r\n- Report a warning for enums that are not integer- or string-like.\r\n- OData\r\n  + Update vocabularies 'Common', 'Core', 'Validation'\r\n  + Pass through structures without elements\r\n  + `cds.Decimal` and `cds.DecimalFloat` (deprecated) without precision/scale are rendered\r\n    as `Edm.Decimal` with `Scale=variable` (V4) and `sap:variable-scale=\"true\"` (V2)\r\n\r\n### Fixed\r\n\r\n- Memory usage improvement - compile messages do not inherit from Error any more.\r\n- HANA types in annotation assignments work again.\r\n- HANA/SQL: Correctly handle temporal in conjunction with namespaces.\r\n- Fix a bug in Association to Join translation that prevents exposing managed associations via subqueries.\r\n\r\n### Removed\r\n\r\n## Version 1.26.4 - 2020-05-08\r\n\r\n### Added\r\n\r\n- Add new OData vocabulary `com.sap.vocabularies.HTML5.v1`\r\n\r\n### Changed\r\n\r\n- Report a warning when a deprecated non-snapi backend (OData, HANA/SQL) is called.\r\n\r\n- OData:\r\n  + Update vocabulary 'UI'\r\n  + Add annotation `@Common.Label: '{i18n>Draft_DraftAdministrativeData}'` to entity `DraftAdministrativeData`\r\n  + Improve info message for target mismatch on associations that are compared with $self\r\n\r\n### Fixed\r\n\r\n- The CSN `val` property is now allowed in enum element extensions. Such CSN can be\r\n  generated using the `parseCdl` mode and it is now compilable.\r\n\r\n- Again allow negative values as enum values, fixing a regression introduced with v1.24.6.\r\n\r\n- OData: Correctly handle associations in arrayed elements (keyword `many`).\r\n\r\n- Annotation assignment checks now recognize HANA types.\r\n\r\n## Version 1.26.2 - 2020-04-24\r\n\r\n### Added\r\n\r\n- The client tool `cdsc` has got a new option `--beta <list>` which may be used to\r\n  specify a comma separated list of experimental features to be enabled.\r\n  \r\n- CSN in parse-cdl mode now has a `requires` property that represents `using`s from CDL.\r\n\r\n### Fixed\r\n\r\n- OData:\r\n  + Change foreign key creation order for associations to respect their dependencies.\r\n  + Use correct path during on-condition flattening.\r\n  + Report error when using elements without types for **array of type of (element)** and similar definitions.\r\n\r\n- HANA/SQL:\r\n  + Fix references to `null` enum values in default clauses.\r\n  \r\n- Type arguments are now properly set in CSN when using parse-cdl mode.\r\n\r\n- Avoid unjust warning if the `extensions` property of an input CSN contain `extend` statements.\r\n\r\n## Version 1.26.0 - 2020-04-17\r\n\r\n### Added\r\n\r\n- The client tool `cdsc` has got a new command `parseCdl` which returns a CSN\r\n  that is close to the original CDL file. It does not resolve imports and does\r\n  not apply extensions.\r\n\r\n- Unmanaged associations as primary keys are now warned about.\r\n\r\n- `localized` in combination with `key` is now warned about.\r\n\r\n- Enum values are now checked to only be either numbers or a strings - a warning is raised.\r\n\r\n- Elements in mixin clauses that are _not_ unmanaged associations now produce an error.\r\n\r\n### Changed\r\n\r\n- HANA/SQL:\r\n  + Raise warnings `rewrite-not-supported` and `rewrite-undefined-key` to errors.\r\n\r\n- Compiler: Empty elements are now kept along for the propagation.\r\n\r\n- OData: Annotate all elements of `DraftAdministrativeData` with `@Common.Label: '{i18n>\"Draft_<elementName>\"}'`\r\n  and elements  'DraftUUID', 'DraftIsCreatedByMe' and 'DraftIsProcessedByMe' with `@UI.Hidden`.\r\n\r\n### Fixed\r\n\r\n- Compiler: `type of <unmanaged assocation>` is now handled correctly by raising an error.\r\n\r\n## Version 1.25.0 - 2020-04-09\r\n\r\n### Changed\r\n\r\n- Downgrade `chained array of`-error to a warning\r\n- SQLite: Don't render implicit casts\r\n\r\n## Version 1.24.6 - 2020-04-08\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + Improve messages for misaligned forward/backlink associations in EDM generator\r\n  + For V2 add annotations `@sap.creatable: false`, `@sap.updatable: false`, `@sap.deletable: false`,\r\n  `@sap.pageable: false` to the Parameter EntityType and `@sap.creatable: false`, `@sap.updatable: false`,\r\n  `@sap.deletable: false`, `@sap.addressable: false` to the Result EntityType.\r\n  + Update vocabularies 'Common' and 'Graph' and 'ODM'.\r\n\r\n\r\n### Fixed\r\n\r\n- Various messages mention more appropriate source locations.\r\n\r\n- Improve messages for `array of`\r\n\r\n- OData:\r\n  + Render 'array of' for ReturnType correctly\r\n  + Report error for view fields with no type information early\r\n  + Handle associations in structures with an association as explicit key\r\n\r\n### Removed\r\n\r\n- The client tool `cdsc` does not offer the option `--std-json-parser` anymore,\r\n  as it had no effect.\r\n\r\n## Version 1.24.4 - 2020-03-25\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n- `doc` comment propagation can now also be stopped by comments that only contain whitespace\r\n  (including newlines) like `/**  */`.\r\n\r\n- OData:\r\n  + Remove redundant service name and `__` prefix out of dynamically exposed substructures.\r\n  + Update vocabularies 'Capabilities' and 'Graph'.\r\n\r\n### Fixed\r\n\r\n- OData:\r\n  + Process correctly \"type of\".\r\n  + Process correctly elements with underscore as prefix.\r\n\r\n- Preserve parameter list in localized convenience views.\r\n\r\n## Version 1.24.3 - 2020-03-16\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- Force usage of resolve@1.8.1 instead of semver to avoid issues with file cache\r\n\r\n## Version 1.24.2 - 2020-03-13\r\n\r\n### Added\r\n\r\n- Support function calls like `count( distinct ... )` and `count( all ... )`.\r\n\r\n- With option `--doc-comment` comments of the form `/**...*/` are preserved, if these comments\r\n  appear at positions where annotation assignments are allowed. `doc` comments are propagated\r\n  like annotations until an empty comment `/***/` disrupts the propagation.\r\n  \r\n- OData:\r\n  + Add new OData vocabularies `com.sap.vocabularies.Graph.v1` and `com.sap.vocabularies.ODM.v1`\r\n  + With option `--odata-containment`, `parent` association and inferred key elements for\r\n  `composition of <aspect>` as well as inferred keys of `_texts` entities are not rendered.\r\n  + OData V4: Produce primary key paths with length limited alias names.\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- When not disabled by `@cds.autoexpose:false`, an entity used as composition target\r\n  is auto-exposed in the current service;\r\n  this did not work always if the target was a _query_ entity.\r\n\r\n- Foreign key creation in odata flat-mode when following associations.\r\n\r\n- Rename `@description` to `@Core.Description` in all cases as part of the OData transformation of a CSN.\r\n\r\n- When generating extensions from EDMX annotations, handle correctly targets from an EntityContainer.\r\n\r\n- Apply service annotations in EDMX generation.\r\n\r\n\r\n### Removed\r\n\r\n- Warning 'Service should not have more then one draft root artifact'\r\n\r\n- Experimental annotation '@cds.odata.{v2|v4}.ignore`\r\n\r\n- OData vocabulary `com.sap.vocabularies.odm.v1` (lowercase 'odm')\r\n\r\n- `--beta-mode` from option `--odata-containment`.\r\n\r\n## Version 1.24.1 - 2020-03-06\r\n\r\n### Added\r\n\r\n- Add new OData vocabulary `com.sap.vocabularies.odm.v1`\r\n\r\n### Changed\r\n\r\n- Expressions in mixin-definitions are now validated.\r\n- OData:\r\n  + Redirect inbound associations to entities with parameters to corresponding Parameter EntityType.\r\n  + Update vocabulary `UI`\r\n- Use semver for dependencies\r\n\r\n### Fixed\r\n\r\n- Resolve backlink mixin association usages uniformly in association to join translation.\r\n\r\n\r\n## Version 1.24.0 - 2020-02-28\r\n\r\n### Added\r\n\r\n- If an entity `E` with localized elements has the annotation `@fiori.draft.enabled`,\r\n  a new element `ID_texts` of type `cds.UUID` is added to `E_texts` as the _only key_ and\r\n  the annotation `@odata.draft.enabled` will not be set to false for `E.texts`.\r\n- A comment of the form `/**…*/` at \"annotation positions\" is now considered a doc comment;\r\n  its \"cleaned-up\" text is put into the CSN as value of the property `doc`.\r\n  In the OData/EDMX, it appears as value for the annotation `@Core.Description`.\r\n\r\n### Fixed\r\n\r\n- HANA CDS: When casting a column to an enum type, don't render it as an enum\r\n- Ignore top-level CSN \"annotations\" like `@sql_mapping` in the CSN frontend.\r\n- OData: Key constraint checks for Draft enabled entities consider EDM exposed keys only.\r\n- Message level for draft key checks is raised to 'warning' again.\r\n- Action and function calls are checked for missing arguments.\r\n- All references are correctly transformed in flatten mode.\r\n\r\n## Version 1.23.2\r\n\r\nChanges\r\n\r\n* Association to Join Transformation:\r\n  + Validate paths of an expression in the projection to be compliant with the\r\n    ON condition path constraints if such an expression is used in a mixin.\r\n  + Reject recursive or non-bijective `$self` expressions.\r\n* Reject casting of a structured select item to a different type.\r\n* OData: Update vocabularies `Capabilities`, `Common`, `UI`, `Validation`\r\n\r\nFixes\r\n\r\n* Association to Join Transformation: Resolve compound ON conditions with\r\n  multiple logical terms and/or references to different associations via `$self`.\r\n* Remove temporary property `viaTransformation` from published CSN.\r\n* Do not complain about unaligned `$syntax` attribute in CSN frontend.\r\n\r\n## Version 1.23.1\r\n\r\nChanges\r\n\r\n* OData:\r\n  + Lower message for unknown vocabulary annotations from warning to info.\r\n  + Lower message for `@Analytics.Measure expects @Aggregation.default` from warning to info.\r\n  + Remove empty EntityContainer and raise warning if Schema is empty.\r\n\r\nFixes\r\n\r\n* Correctly calculate code completion candidates for projection items in all\r\n  circumstances (regression introduced in v1.22.0).\r\n* In the Hana/Sql backend, correctly resolve forward `on` condition when using\r\n  mixin association that backlinks to an unrelated 3rd party entity and association.\r\n* Raise a warning if the element of the forward association and the element of\r\n  the query source do not not originate from the same defining entity. Raise an\r\n  error if the element of the forward association cannot be found in the query\r\n  source or is ambiguous.\r\n* Correctly create localization views with compiled model as input;\r\n  it was wrong previously in a model with a high view hierarchy.\r\n\r\n## Version 1.23.0\r\n\r\nFeatures\r\n\r\n* Introduce `![identifier body]` in the CDL source for delimited identifiers.\r\n  (The `!` is inspired by ABAP's identifier tag,\r\n  `[]` by the delimited identifier syntax in Microsoft SQL Server and Sybase;\r\n  we cannot use `[]` alone, because brackets are used for filter conditions.)\r\n* When generating SQL or HDBVIEW, explicit CASTs are now rendered\r\n\r\nChanges\r\n\r\n* Signal a warning for all uses of `\"identifier body\"` in the CDL source, as\r\n  most uses of double-quotes in actual CDS models were likely meant for strings.\r\n  (Yes, we do not adhere strictly to the lexical rules of the SQL Standard with this change…)\r\n* Issue a warning for an `aspect` definition without `{…}`.\r\n* In the CSN, `aspect` definitions have a `$syntax` property with value `\"aspect\"`.\r\n  A future incompatible change will set the `kind` of aspect definitions to value `\"aspect\"`.\r\n* Removed old CSN frontend and the corresponding options: `stdJsonParser` and `oldCsnFrontend`.\r\n* Fix check for arguments and filters in references (__might introduce new errors__).\r\n* Issue an error if explicit `keys` are provided when redirecting *un*managed associations.\r\n* File paths given to `cdsc` which contain symbolic links are now resolved before being\r\n  passed to the compiler.\r\n* Annotating elements with `@Core.Computed` now always overwrites computed value;\r\n  also expressions in parentheses will now induce to set `@Core.Computed` to `true`.\r\n* Update OData vocabulary `UI`\r\n* Increase the length of the element `locale` in generated `_texts` entities from\r\n  `String(5)` to `String(14)`.\r\n* Do not overwrite annotations with generated annotations (such as shortcuts and other\r\n  convenience annotations).\r\n\r\nFixes\r\n\r\n* Automatically calculate `keys` also for published _secondary_ managed\r\n  associations, i.e., associations in a select column which is reached by\r\n  following another association.  The compiler doest not yet calculate the `on`\r\n  condition of published secondary unmanaged associations – provide it explicitly.\r\n* Entities/Views without elements are now detected correctly.\r\n* Fix check for action/function parameters in services.\r\n* OData: Correctly apply annotations to parameters.\r\n\r\n## Version 1.22.0\r\n\r\nFeatures\r\n\r\n* With `redirected to`, model designers can now explicitly provide the `on`\r\n  condition / foreign `keys` for \"consumers\" of the current query (entity).\r\n  This is useful for situations (usually mentioned as message) where the\r\n  compiler does not calculate `on`/`keys` (automatically yet).\r\n* Add OData vocabularies: `com.sap.vocabularies.CodeList.v1`, `Org.OData.Repeatability.V1` and `com.sap.vocabularies.Session.v1`\r\n\r\nChanges\r\n\r\n* In the `sql`, `hdi` and `hdbcds` backends with SQL dialect HANA, `$user.id` is translated to\r\n  `SESSION_CONTEXT('APPLICATIONUSER')`, not `SESSION_CONTEXT('XS_APPLICATIONUSER')` anymore.\r\n  As with the SQL dialect SQLite, it can now be configured.\r\n* The client tool `cdsc` now prints a source excerpt for each message by default;\r\n  use `cdsc --no-message-context` to get the previous behavior.\r\n* Increase severity to `Warning` of messages for a situation where the compiler\r\n  cannot calculate an `on` condition / foreign `keys` automatically.\r\n* Issues warnings for annotation definitions, as their CSN representation will be\r\n  moved from `definitions` into an new property `vocabularies` in a future change.\r\n* OData:\r\n  + Update vocabularies: `Analytics`, `Common`, `Communication`, `Core`, `PersonalData`, `UI`\r\n  + Set reference base URI for SAP Vocabularies to `https://sap.github.io/odata-vocabularies/vocabularies`\r\n\r\nFixes\r\n\r\n* In the `sql`, `hdi` and `hdbcds` backends,\r\n  + correctly ignore contexts containing just actions,\r\n* In all backends, correctly handle models where an `on` condition of a `join` contains a sub query.\r\n* Avoid infloop for cyclic dependencies on select items with explicit redirections.\r\n\r\n## Version 1.21.1\r\n\r\nFeatures\r\n\r\n* OData: Support annotation `@insertonly` at an entity which translates to\r\n  `@Capabilities.DeleteRestrictions.Deletable: false`, `@Capabilities.ReadRestrictions.Readable:false`,\r\n  `@Capabilities.UpdateRestrictions.Updatable: false`.\r\n  A warning is raised if `@insertonly` and `@readonly` are applied at the same entity and no mapping is\r\n  done.\r\n\r\n## Version 1.21.0\r\n\r\nFeatures\r\n\r\n* Support `cds.Decimal` without type facets `precision` and `scale` as substitute for the deprecated `cds.DecimalFloat`. Mapping is as follows:\r\n\r\n  | HANA CDS     | HANA SQL | SQLite  | Odata V4 | Odata V2 |\r\n  |--------------|----------|---------|----------|----------|\r\n  | DecimalFloat | DECIMAL  | DECIMAL | Decimal  | Decimal  |\r\n\r\n* OData:\r\n  + Expand shorthand annotation `@mandatory` to `Common.FieldControl: #Mandatory`.\r\n  + Support edm:Singleton by annotating an entity with either\r\n    `@odata.singleton: Boolean` or `@odata.singleton.nullable: Boolean`.\r\n\r\n    `@odata.singleton.nullable` is a shorthand for `@odata.singleton: true` and sets\r\n    the value for attribute `Nullable` (default is false).\r\n\r\n    If `odata.singleton` is `false`, no singleton is generated regardless of the existence of `@odata.singleton.nullable`.\r\n  + Option `odataContainment: true` renders compositions as `edm:NavigationProperty` with\r\n    containment. This option is only available for OData V4 and with `--beta-mode`.\r\n\r\nChanges\r\n\r\n* CSN frontend: use faster implementation by default.\r\n* CDL frontend: issue warning for suspicious-looking delimited identifiers;\r\n  some people think that they have written strings when they use double-quotes.\r\n* Models delivered with `@sap/cds` are now resolved from `cds.home`; e.g. `using ... from '@sap/cds/common'`.\r\n  This allows working without locally inst# ChangeLog for cdx compiler and backends\r\n  This allows working without locally installed `@sap/cds`, for example in Java projects.\r\n  In that case, respective models will be fetched from a globally installed `@sap/cds-dk`.\r\n* OData:\r\n  + Improve `array of` checks and reject anonymous types and types that are not service members.\r\n  + Set draft properties  `HasActiveEntity` and `HasDraftEntity` to `Nullable: false`.\r\n* Reject old-style CSN from all CSN based transformers and renderers\r\n* `toHana` and `toSql`: Allow aliasing for foreign keys\r\n\r\nFixes\r\n\r\n* OData:\r\n  + Fix `Nullable` attribute for parameters in EDM JSON V4.\r\n  + Do not annotate `edm:NavigationProperty` for term definitions with `AppliesTo: Property` and vice versa.\r\n* Fix bug in ON Condition rendering during transformation of associations to joins for stream based `$self` expressions.\r\n* `toHana`: Only render and allow keys in the leading query\r\n* `toHana` and `toSql`: When following an association, explicitly set the implicit alias to work around a HANA limitation\r\n\r\n## Version 1.20.3\r\n\r\nChanges\r\n\r\n* Core Compiler: Forbid navigating associations (to non foreign key elements) in the ON condition\r\n  of an association definition.\r\n* OData: Do not generate `OnDelete` for Containment Navigation Propertie, as this is redundant.\r\n\r\nFixes\r\n\r\n* In `toSql` for  `Sqlite` generate `current_timestamp` for `$at`\r\n\r\n## Version 1.20.1\r\n\r\nChanges\r\n\r\n* Associations to 'abstract' artifacts and the usage of abstract entities in queries are now rejected.\r\n\r\nFixes\r\n\r\n* OData:\r\n  + Raise level from 'info' to 'warning' for excluded NavigationProperties due to targets outside the service.\r\n  + Fix a bug in mapping of `@Capabilities` (see Version 1.20.0)\r\n  + Flattening of structured elements - @cds.persistence.name was semi-flattened\r\n\r\n* CSN Input:\r\n  + Support views with parameters in queries\r\n  + Support views with parameters in on-conditions of unmanaged associations\r\n  + Support 'not null' for enum elements\r\n\r\n## Version 1.20.0\r\n\r\nChanges\r\n\r\n* Issue error (instead of a warning) if a projected association uses a non-projected element\r\n  in its `on` condition (message id `rewrite-not-projected`).\r\n\r\n* Issue error (instead of a warning) if the redirected target does not originate from the original\r\n  target of an association (message id `redirected-to-unrelated`).\r\n\r\n* In `--beta-mode` remove the annotation `@odata.draft.enabled: false` from generated\r\n  `_texts` entities. Annotate the technical foreign keys of a `_texts` entity with\r\n  `@cds.odata.v4.ignore: true` to allow containment in OData V4 for `_texts`.\r\n\r\n* In `toHana` and `toSql` associations to entities annotated with `@cds.persistence.exists` are\r\n  removed from the generated model. This is an extension to the change introduced with version 1.15.0.\r\n  If a proxy artifact shall be an association target, another 1:1 projection entity shall be created\r\n  wich then can act as the association target.\r\n\r\n* OData:\r\n  + Reject non specification compliant CSN as input to csn2edmx\r\n  + Add annotation `@cds.odata.{v2|v4}.ignore` in `--beta-mode`\r\n  + Rewrite `@Capabilities` annotation to `@Capabilities.NavigationRestrictions` at the containment\r\n    association in case an entity set has been omitted due to containment in OData V4.\r\n  + Update vocabularies `Common` and `UI`\r\n  + Improve error message when not generating a navigation property for association targets outside\r\n    the same service.\r\n\r\n* Draft:\r\n  + Raise an info message if a draft root has not exactly one primary key element of type `cds.UUID`\r\n  + Raise an info message if a draft node (subordinate to a draft root) has not exactly one primary key element\r\n    of type `cds.UUID` and optionally one more additional primary key.\r\n  + Raise an error message if the same draft node is reachable from two separate draft roots.\r\n  + Raise an info message if a service contains more than one draft root entities.\r\n  + Annotate technical elements `IsActiveEntity`, `HasActiveEntity`, `HasDraftEntity`,\r\n    `DraftAdministrativeData` and `DraftAdministrativeData_DraftUUID` with `@UI.Hidden`\r\n\r\n* CSN Input:\r\n  + New simplified parsing of CSN, can be enabled via compiler option stdJsonParser or\r\n    command line option --std-json-parser\r\n  + Support for $location\r\n\r\nFixes\r\n* Compiler:\r\n  + Correctly reject the Promise if errors occur during parsing\r\n\r\n* OData:\r\n  + Correctly render annotations with `null` values in arrays.\r\n  + Correctly render annotations with records of complex types.\r\n  + Correctly annotate artifacts with parameters. Annotations are assigned to the resulting\r\n    EntityType `<name>Type`\r\n  + Correctly flatten substructures when used as types\r\n\r\n* CSN Validation:\r\n  + Correctly process views with parameters in unmanaged associations\r\n\r\n* Make `parseToCqn()` use filter in `FROM` clause as hint for (recommended) colon, i.e.\r\n  never discard the filter.\r\n\r\n## Version 1.19.2\r\n\r\nChanges\r\n\r\n* Improve the semantic checks for `Association to many` with a partial key, not complaining\r\n  about a missing `ON` condition anymore.\r\n\r\n* HANA:\r\n  + When using `names: quoted`, raise a warning when artifacts with `@cds.persistence.exists`\r\n    belong to a CDS namespace, context or service.\r\n\r\n* OData:\r\n  + Raise an `info` message on the usage of deprectated OData vocabulary terms.\r\n  + Raise a `warning` message when applying `@odata.Type` with another type as `Edm.String`, `Edm.Int16`,\r\n    `Edm.Int32`, `Edm.Int64`.\r\n  + Support shorthand annotation `@description` for `@Core.Description`.\r\n\r\n* Never complain about `localization` views when recompiling a CSN file that has localized convenience views\r\n  already expanded. If the definition's absolute name is `localized`, it must be a context. If the definition's\r\n  absolute name starts with `localized.`, it must either be a context or a query entity. An error message is\r\n  raised in all other cases. In all cases, definitions in the namespace `localized` are ignored for further processing.\r\n\r\nFixes\r\n\r\n* Fix a dump when compiling from CSN for query elements without a `key` property that have no column\r\n  counterpart.\r\n\r\n## Version 1.19.1\r\n\r\nFixes\r\n\r\n* Make sure that we really create all localized convenience views for entities\r\n  which have localized elements, select localized elements or can directly or\r\n  indirectly reach (via navigation along associations and compositions) such entities.\r\n\r\nFeatures\r\n\r\n* Allow annotations with `@odata.Type: 'Edm.Int16'` and likewise with value `'Edm.Int32'`\r\n  and `'Edm.Int64'` to influence the type which is chosen in the generated EDMX.\r\n\r\n## Version 1.19.0\r\n\r\nChanges\r\n\r\n* Event definitions are now properly listed in the CSN:\r\n  the `kind` is `event`, the property for its members is called `payload`.\r\n* Omit redundant `kind: 'param'` for parameters in the `params` dictionary of a CSN.\r\n\r\nFixes\r\n\r\n* Do not use upcoming OData v4.01 facet values for `cds.DecimalFloat`, i.e.\r\n  revert v1.18.0 change which had added `Scale: floating` and `Precision: 34`.\r\n* In CSN frontend, support direct `{func: …}` objects in `orderBy` and `groupBy`.\r\n\r\n## Version 1.18.2\r\n\r\nFixes\r\n\r\n* Issue warning instead error when CDS type `cds.DecimalFloat` is used with OData v2.\r\n  Also issue the warning for CDS type `cds.hana.SMALLDECIMAL`.\r\n* Properly render n-ary `cross join`s, typically produced by `select from A, B, C`.\r\n\r\nFeatures\r\n\r\n* Allow to provide HANA-specific magic variables like `current_utctimestamp` via the\r\n  function syntax `current_utctimestamp()`.  Similar for `sysuuid`, `current_connection`,\r\n  `current_schema`, `current_transaction_isolation_level`, `current_utcdate` and `current_utctime`.\r\n  Support SQL Standard magic variable `system_user` (without parentheses); be aware that\r\n  it is not supported (by that syntax) in HANA.\r\n\r\n## Version 1.18.1\r\n\r\nChanges\r\n\r\n* Hide the experimental swagger backend behind `betaMode` and issue a warning even then.\r\n\r\nFixes\r\n\r\n* Properly establish EDMX partnership again between forward and backward association\r\n  even in the presense of \"hidden\" associations (v1.18.0 had introduced a bug).\r\n  Issue a warning if there are multiple (non hidden) partnership candidates.\r\n\r\nFeatures\r\n\r\n* `using from <module>` also tries file extensions `.csn` and `.csn.json`.\r\n\r\n## Version 1.18.0\r\n\r\nChanges\r\n\r\n* OData: add type facet `Scale: floating`, `Precision: 34` to `Edm.Decimal`\r\n  for mapped CDS type `cds.DecimalFloat`.\r\n  Issue __error if `cds.DecimalFloat` is used with OData v2__.\r\n\r\nFixes\r\n\r\n* If a projection in a service selects from a source in a model,\r\n  associations in the projection source are _implicitly redirected_\r\n  to a target in the service.\r\n  The corresponding redirection must also happen for the _localized convenience view_\r\n  for the projection in the service: the new target should be\r\n  the localized convenience view for the \"original\" redirection target\r\n  (if it does not exist: the \"original\" redirection target itself).\r\n\r\n## Version 1.17.3\r\n\r\nChanges\r\n\r\n* OData:\r\n  Disable proxy generation again due to too many runtime conflicts. This effectively\r\n  auto-excludes the associations as navigation properties from the service that reference targets outside the service;\r\n  properties from the foreign keys of managed associations remain.\r\n  As opposed to the pre-v1.16.2 behaviour, this only affects the OData backend.\r\n* OData: Raise error if `EntityType` has no primary key.\r\n* Raise warning if compiler is invoked in `--beta-mode`\r\n\r\nFixes\r\n\r\n* Make `annotate` statements on members of autoexposed entities and\r\n  automatically created text entities work.\r\n\r\n## Version 1.17.2\r\n\r\nFixes\r\n\r\n* Fix stack overflow bug in EDM Preprocessing\r\n\r\n## Version 1.17.1\r\n\r\nChanges\r\n\r\n* OData: Add type facet `Precision=7` to `Edm.DataTimeOffset` if CDS type is `cds.Timestamp`.\r\n* Add semantic check to prevent the usage of `hana.ST_POINT` and `hana.ST_GEOMETRY` as primary key types.\r\n\r\nFixes\r\n\r\n* OData: Do not generate `NavigationPropertyBinding` (V4) or `AssociationSet` (V2) for non-existing `EntitySet`\r\n  of the Proxy `EntityType`s introduced with Version 1.16.2.\r\n\r\n\r\n## Version 1.17.0\r\n\r\nFeatures\r\n\r\n* OData V4:\r\n  With `--beta-mode` enabled, compositions become containment navigation properties. This\r\n  is performed by annotating all compositions with `@odata.contained`. Existing assignments\r\n  are not overwritten.\r\n  Enabling containment is an incompatible change to existing OData metadata documents\r\n  as all composition targets are no longer accessible as EntitySets but only through their\r\n  container.\r\n* Release keyword `event`.\r\n\r\nChanges\r\n\r\n* OData: Update all known Odata vocabularies, this also includes SAP vocabularies which now\r\n  may contain Term definitions marked as *experimental*.\r\n* HANA Datatype Support in SQLite: Render `ST_GEOMETRY` and `ST_POINT` as `CHAR(5000)`.\r\n* Use association names as table aliases during the association to join transformation instead of\r\n  using the association target (this makes the transformed view more comprehensible).\r\n\r\nFixes\r\n\r\n* Parameter lists and filters in ON condition paths are rejected in association to join transformation.\r\n* Append the temporal `WHERE` clause to views that already have a `WHERE` clause.\r\n* View elements with @cds.valid.from/@cds.valid.key are no longer marked as key in the columns.\r\n* CSN validator accepts select statements with a having or a group by clause containing a function call.\r\n\r\n## Version 1.16.2\r\n\r\nFeatures\r\n\r\n* Introduce builtin-types for the (HANA) SQL types `SMALLINT`, `TINYINT`,\r\n  `SMALLDECIMAL`, `REAL`, `CHAR`, `NCHAR`, `VARCHAR`, `CLOB`, `BINARY`,\r\n  `ST_POINT`, `ST_GEOMETRY`.  In the CSN, they appear as `cds.hana.SMALLINT`,\r\n  ….  In CDL, they can be referred to by `hana.SMALLINT`, ….\r\n\r\n  Mapping of the types is as follows:\r\n\r\n  |CDS|HANA|SQLite|OData V4|OData V2|\r\n  |----|----|-----|--------|--------|\r\n  |SMALLINT|SMALLINT|INT|Edm.Int16|Edm.Int16|\r\n  |TINYINT|TINYINT|INT|Edm.Byte|Edm.Byte|\r\n  |SMALLDECIMAL|SMALLDECIMAL|DECIMAL|Edm.Decimal Scale=\"floating\" Precision=\"16\"|Edm.Decimal|\r\n  |REAL|REAL|FLOAT|Edm.Single|Edm.Single|\r\n  |CHAR|CHAR|CHAR|Edm.String|Edm.String|\r\n  |NCHAR|NCHAR|CHAR|Edm.String|Edm.String|\r\n  |VARCHAR|VARCHAR|CHAR|Edm.String|Edm.String|\r\n  |CLOB|CLOB|CHAR|Edm.String|Edm.String|\r\n  |BINARY|BINARY|CHAR|Edm.Binary|Edm.Binary|\r\n  |ST_POINT|ST_POINT|CHAR|Edm.GeometryPoint|n/a|\r\n  |ST_GEOMETRY|ST_GEOMETRY|CHAR|Edm.Geometry|n/a|\r\n\r\nChanges\r\n\r\n* Associations in services with targets outside the service\r\n  are not auto-excluded anymore.\r\n* OData: Create proxy `EntityType`s for association targets that are not\r\n  part of the current service. This maintains the navigation path in the\r\n  EDM model and exposes the primary key tuple of the otherwise unreachable\r\n  target. The primary keys of a proxy entity must be scalar types. No\r\n  complex types are supported. Also all outbound navigations are removed\r\n  from a proxy.\r\n* The package require node version 8 or higher.\r\n\r\nFixes\r\n\r\n* Forbid publishing associations inside unions.\r\n* Fix a bug in the creation of localized convenience views that lead to an erroneously JOIN\r\n  expression if such a view gets transformed into a SQL query with `toSql --assoc joins`.\r\n\r\n* OData: be robust against erroneoulsy assigned @odata.foreignKey4 annotation.\r\n* Improve ON condition path checks in Association to Join transformation.\r\n* Fix crash in forHana generation when determining the type of an enum.\r\n\r\n## Version 1.16.1\r\n\r\nFeatures\r\n\r\n* API: If the compiler frontend reports messages and the `compile` function\r\n  had been called without options having a `messages` property, then\r\n  the resulting CSN contains a non-enumerable `messages` property containing the messages.\r\n\r\nChanges\r\n\r\n* Removed TNT specific behaviours for HANA CDS, SQL and OData from the code.\r\n* Perform usage check of entities annotated with `@cds.persistence.skip` if\r\n  using entity really exists on the database (not annotated with `cds.persistence.table`).\r\n* Remove mixin associations with a target entity annotated with `@cds.persistence.skip` and\r\n  its select item that eventually expose this association.\r\n* csn2edm: Produce all services in a given model in one pass removing the requirement\r\n  to call the EDM transformation for each service individually. The existing API is still\r\n  compatible. If an EDM for only one service is requested, only this EDM will be produced.\r\n* Odata:\r\n  + Don't omit containee's foreign keys if they are also primary key.\r\n  + Remove warning that containment association must be `NOT NULL` .\r\n  + Support annotation `@cds.etag` as (backward compabible) replacement for `@odata.etag`.\r\n  + Update broken UI vocabulary.\r\n\r\nFixes\r\n\r\n* Make property propagation from query sources using associations work.\r\n* Consider associations in `from` clause for `on` condition rewrite.\r\n* Make the CSN parser always produce the correct result for `null`.\r\n* Propagate `@cds.autoexpose` along primary query source in all circumstances.\r\n* Make `annotate` statements on autoexposed entities work in circumstances.\r\n* Do not dump when magic variables like `$now` or `current_date` had been used\r\n  in an entitiy for which the compiler creates a localized convenience view.\r\n* Fix order problem in creation of association `DraftAdministrativeData` for draft enabled entities.\r\n* Fix runtime error in `forHana` in handling of mixin forward and backward associations.\r\n\r\n## Version 1.15.0\r\n\r\nFeatures\r\n\r\n* Release aspect `temporal`.\r\n\r\nChanges\r\n\r\n* Improve handling for entities are either `abstract` or annotated with `@cds.persistence.skip` in `toHana` and `toSql`:\r\n  + Such entities are not part of the generated database model and thus non-existing in the database schema.\r\n  + Associations/compositions to non-existing entities are removed from the generated model but not their eventually\r\n    generated foreign keys (for managed associations). An info message is raised for each removal.\r\n  + An error message is raised if a non-existing entity is used (either directly or indirectly through an association).\r\n\r\nFixes\r\n\r\n* OData\r\n  + Do not assign `@Core.AlternateKeys` for `temporal` aspects if the annotation already assigned.\r\n  + Resolve primitive return types for actions\r\n  + Mark localized _texts entities and convenience views with `@odata.draft.enabled: false`\r\n* JSON parser\r\n  + Allow JavaScript objects as input, as well as JSON\r\n\r\n## Version 1.14.1\r\n\r\nChanges\r\n\r\n* Primary key definitions are only allowed in first `union`. Raise an error if primary keys are defined in\r\n  subordinate `union` clauses when generating `toHana`.\r\n\r\nFixes\r\n\r\n* HANA CDS\r\n  + Don't generate primary keys in subordinate `union` clauses if the element is a key-element of the source entity.\r\n  + In case of multiple chained `union`s, generate all `union` clauses correctly.\r\n* OData\r\n  + Generate unique Names for `<edmx:Association>` elements in Version 2 to avoid name clashes with other entries in `<edmx:Schema>`.\r\n  + Raise error for duplicate definitions in `<edmx:Schema>`.\r\n* CSN Input\r\n  + validation - joins can have value literals in the on condition\r\n\r\n## Version 1.14.0\r\n\r\nFeatures\r\n\r\n* Support aspect `temporal` with option `--beta-mode`:\r\n  + Support magic variables `$at.from` and `$at.to`.\r\n  + OData:\r\n    - Add element annotated with `@cds.valid.from` to the key in the metadata document but not in the CSN, requiring a valid\r\n      primary key in the projection to exist.\r\n    - An element annotated with `@cds.valid.key` becomes the sole primary key in the EntityType.\r\n      Add an `@Core.AlternateKeys` annotation that lists the original primary key tuple as well as the element annotated with `@cds.valid.from`.\r\n  + SQL/HANA CDS:\r\n    - Translate `$at.from` to `SESSION_CONTEXT('VALID-FROM')` in HANA and `current_time` in Sqlite.\r\n    - Translate `$at.to` to `SESSION_CONTEXT('VALID-TO')` in HANA and `current_time` in Sqlite.\r\n    - A `WHERE` claues that allows time travel queries is generated for projection that contain exactly one element annotated\r\n      with `@cds.valid.from` and `@cds.valid.to` that stem from the same origin.\r\n    - An entity elementannotated with `@cds.valid.from` is added to the primary key tuple of the resulting database table.\r\n    - If an entity element is annotated with `@cds.valid.key`, it becomes the sole primary key of the resulting database table.\r\n* Redirect targets of associations in `localized` convenience views to their respective `localized` convenience views.\r\n  In addition to that, create a `localized` convenience view for all entities that contain associations that lead directly\r\nor indirectly (via n other association steps) to a localized entity, so that these associations can also be redirected.\r\n`Localized` convenience views are only created in case the model is error free.\r\n\r\nChanges\r\n\r\n* Allow to `extend` an entity with an empty structure\r\n* OData:\r\n  + An error is raised for entities that have become empty (no elements) due to automatic exclusion of associations.\r\n  + Update the vocabulary `UI`\r\n  + Allow multiple 'backlink' associations via `$self` ON condition, first 'backlink' establishes the partnership\r\n  + Allow 'backlink' associations to define their own target multiplicity.\r\n  + Raise a warning if the forward association is not included in the service (due to autoexclusion).\r\n  + Reclassify error on containment association to be `NOT NULL` down to a warning.\r\n  + `@cds.api.ignore` suppresses annotations.\r\n\r\n\r\nFixes\r\n\r\n* OData: Fix issues with `@cds.odata.bindingparameter.collection`:\r\n  + Correct `$Collection` to `Collection` in EDMX\r\n  + No referential constraints for NavigationProperties with target multiplicity '*'\r\n* Avoid internal errors on cyclic view definitions\r\n* Strengthen checks on reserved names\r\n\r\n\r\n## Version 1.13.4\r\n\r\nFeature\r\n\r\n* `extend projection` with elements\r\n* `extend` entity with aspect, i.e. not by specifying new elements, but via a definition which has elements.\r\n\r\nChanges\r\n\r\n* Localized convenience views (introduced in Version 1.12.0 as beta feature) are now available.\r\n  + The convenience views for views and projections are created as a copy of the regular artifact in\r\n    the `localized` namespace which selects from the corresponding localized artifacts.\r\n  + Associations within localized convenience views aren't redirected yet; they still point to their\r\n    original non-localized target.\r\n  + Convenience views for views containing associations in their `FROM` clause aren't supported yet.\r\n    For those views an `Info` message is produced stating that no convenience view could be created for the given view.\r\n  + In contrast to the beta feature it isn't required anymore to expose the `localized` association or the primary key.\r\n* The automatic exposure of entities, redirection and exclusion of\r\n  associations has been moved from `forHana` and `forOdata` post-processing into the core compiler:\r\n  + When an association is projected, the compiler checks whether all elements are propagated\r\n    which are referred to in the `on` condition of the projected association.\r\n    Please __reexamine warnings__ for your model.\r\n  + The compiler checks whether a redirection target (directly or indirectly) projects from the\r\n    original target (and/or uses the original target as structure include).\r\n  + Elements can be renamed in the redirected target and the `on` condition is rewritten correspondingly\r\n    (currently not if the projected association is an indirect one, i.e. if we project `assoc1.assoc2`,\r\n    which _was an Error in v1.12.0_) → this means that those DB artifacts can be deployed.\r\n  + When following an implicitily redirected association,\r\n    potentially renamed elements are taken into account.\r\n  + Implicit redirections fail less often as the compiler tries to find a \"minimal\" exposure.\r\n  + Auto-exposure via `Composition of` now works in all circumstances.\r\n  + Other features like \"localized\" work for auto-exposed entity and/or with implicitly redirected association.\r\n  + __Redirections for associations which are sub elements do not work__.\r\n* The name of an autoexposed entity now looks like `<Service>.<LastNamePart>`\r\n  where `<LastNamePart>` is the part of the name of the original entity after the final dot.\r\n  If you get an error because of name clashes, just expose one entity explicitly\r\n  (or use the option `longAutoexposed`).\r\n* Multiple backlink associations for one forward association make the OData backend report an error.\r\n\r\nFixes\r\n\r\n* Forward the `key` property to the select items of generated HANA CDS views.\r\n* Remove some issues of the `$projection` and `$self` handling in the association to join translation.\r\n* Add alias for select items that are primary key in HANA CDS.\r\n* Fix support for union queries in localized convenience views.\r\n\r\n## Version 1.12.1\r\n\r\nChanges\r\n* With option `--beta-mode`, automatic exposure of entities, redirection and exclusion of\r\n  associations has been moved from `forHana` and `forOdata` post-processing into the core compiler.\r\n\r\nFixes\r\n* With option `--beta-mode` in v1.12.0, a just inherited `@cds.autoexpose` had not been considered.\r\n* With option `--beta-mode` in v1.12.0, projecting indirect associations (`assoc1.assoc2`) lead to an error.\r\n\r\n## Version 1.12.0\r\n\r\nFeatures\r\n* With option `--beta-mode`, support `localized` convenience views:\r\n  Create a view named `localized.<EntityName>` for an entity with `localized` elements.\r\n  This view allows a coalesced access to `localized` elements and either returns\r\n  the default or translated content, depending on the locale setting.\r\n  + A convencience view is only created if both the `localized` association and some\r\n    localized elements are exposed in the entity.\r\n  + When exposing the `localized` association in an entity, also the complete primary key\r\n    has to be exposed, otherwise an error is thrown.\r\n* Mark calculated and virtual elements as `@Core.Computed:true`. If `@Core.Computed` has\r\n  been set manually, it remains unchanged.\r\n\r\nChanges\r\n\r\n* With option `--beta-mode`, automatic exposure of entities, redirection and exclusion of\r\n  associations has been moved from `forHana` and `forOdata` post-processing into the core compiler.\r\n  _Update to v1.12.1_ if you experience problems – an inherited `@cds.autoexpose` had not been considered.\r\n* In `toSql` and `toHana` errors are raised\r\n  + for duplicate definitions of elements that differ only in spelling,\r\n  + if the the entity is not `abstract` or annotated with any `@cds.persistence` set to true and\r\n    - an element is typed to be an `array of` a `type`,\r\n    - an implicit managed composition has cardinality to many.\r\n* Raise a warning if an element is to be `localized` which is not of type `cds.String`.\r\n\r\nFixes\r\n* OData:\r\n  + On `@Aggregation.ApplySupported.PropertyRestrictions` apply `@sap.sortable':false, '@sap.filterable':false`\r\n    at new `ID__` property.\r\n  + Allow `@Core.OperationAvailable: null`\r\n  + Abstract entities and all inbound navigation properties are removed from the metadata document.\r\n  + Non-properties are not considered as referential constraints.\r\n* Correct annotation `cds.autoexposed`.\r\n\r\n## Version 1.11.0\r\n\r\nFeatures\r\n* Support `localized` elements:\r\n  + Add sibling entity `<entityName>_texts` to store the localized content.\r\n  + Add two associations `texts` and `localized` to the original entity.\r\n  + Add view `localized.<entityName>` to retrieve either the translated or original content.\r\n* Annotate elements that are `virtual` or annotated with `@odata.on.insert` or\r\n  `@odata.on.update` with `@Core.Computed`.\r\n* Support OData `@Common.ValueList` by either\r\n  + annotating an element for which a value help entity shall be used with\r\n    `@Common.ValueList.viaAssociation`. The value is the association to the value list entity.\r\n  + annotating an entity with `@cds.odata.valuelist`. All associations targeting to this entity\r\n    are then annotated with `@Common.ValueList.viaAssociation`.\r\n  + annotating an element statically with `@Common.ValueList.entity`. The annotation value\r\n    is a static entity name and cannot be dynamically adapted during autoexposure.\r\n* Add annotation `@cds.odata.bindingparameter: {name: String, collection: Boolean }`\r\n  which allows overriding the binding parameter name and cardinality of a bound action in\r\n  OData V4. Default is: `name='in'`, `collection=false`.\r\n* Allow a colon in `FROM` and `TYPE OF` references.\r\n* Support using and publishing a mixin association in the same view when activating for HANA CDS.\r\n\r\nChanges\r\n* Produce all CSN output in version 1.0 by default.\r\n* Virtual elements cannot be used in expressions.\r\n* Command `toRename` creates a stored procedure instead of individual statements.\r\n* Don't autoexpose composition target which is annotated with `@cds.autoexpose: false`.\r\n\r\nFixes\r\n* OData:\r\n  + Rename OData annotation vocabulary `Auth` to `Authorization`.\r\n  + Correct exposure of entities with parameters:\r\n    - Set attribute `EntityType` of  element `edm:EntitySet` to the correct type\r\n    - Set attribute `EntitySet` of element `edm:End` in `edm:AssociationSet` to\r\n      the correct set.\r\n  + `EnumMember` in element `edm:Annotation` has only one delimiting slash\r\n* Rewrite ON condition of a mixin backlink association for an inferred and redirected\r\n  forward association.\r\n\r\n## Version 1.10.0\r\n\r\nFeatures\r\n* Annotate entities with `@cds.autoexposed` that are autoexposed in a service.\r\n* Always autoexpose composition targets without annotating them with `@cds.autoexpose`.\r\n* For associations in a service with targets which are not in a service:\r\n  + automatically exclude them if the associaiton is inferred (via select * or include),\r\n  + signal an error if the association is explicitly defined in the service.\r\n* Support the OData annotation vocabulary `Authorization`.\r\n\r\n\r\nChanges\r\n* Generate `null as …` for virtual view elements.\r\n* Update OData annotation vocabulary `Core`.\r\n* Change the tranlation of annotation `@readonly` at an element from `@Core.Immutable` to\r\n  `@Core.Computed` when processing for OData.\r\n\r\nFixes\r\n* Avoid unnecessary aliases for paths that terminate on an association in the FROM clause.\r\n* Fix an issue with table alias handling in Association to Join translation.\r\n* Translate type `Cds.DateTime` to SQL type `TIMESTAMP` for Sqlite.\r\n* Fix an internal error when parsing `view V as select distinct from E`\r\n* Raise an error that an empty service cannot be used to generate an OData metadata document\r\n* Correctly set the OData principal in a referential constraint for compositions with\r\n  free defined ON conditions.\r\n\r\n## Version 1.9.0\r\n\r\nChanges\r\n* Always use quotes around identifiers for `toSql` and `toHana` with `quoted` or\r\n  `hdbcds` names.\r\n* Never use quotes around identifiers for `toSql` and `toHana` with `plain` names.\r\n  Issue a warning if an identifier may conflict with a language keyword.\r\n* Generate `.hdbtable`, `.hdbview` etc. files if option `toSql.src` is `hdi` (default\r\n  `sql` generates `.sql` files).\r\n\r\nFeatures\r\n* Allow `select` clauses with standard SQL syntax (i.e. also accept `select ... from ...`\r\n  in addition to the CDS-specific form `select from ... { ... }`).\r\n* Support `count(*)` etc.\r\n* Support function calls with names arguments.\r\n* Support `aspect` definitions.\r\n\r\nFixes\r\n* Omit unused vocabularies in OData-generated EDMX files.\r\n* For `toOdata`, handle nested anonymous types correctly (also with arrays, e.g. in\r\n  action/function parameters)\r\n* Handle mixins correctly when transforming associations to joins.\r\n\r\n## Version 1.8.1\r\n\r\nChanges\r\n* With `--new-redirect-impl`, associations and compositions in services\r\n  are implicitely redirected to a (unique) projection of the original target\r\n  if the projection is \"simple and similar enough\" and defined in the service.\r\n  This is now always done, not only by the `toOdata` backend;\r\n  association targets explicitly provided in the service are not implicitly redirected.\r\n* With option `--new-csn` (or `--beta-mode`) alone, we do not properly rewrite the\r\n  `on` condition or `keys` anymore.\r\n  Use option `--assoc-on-rewrite` and `--new-redirect-impl` to do so.\r\n\r\nFixes\r\n* With `--new-redirect-impl`, the navigation along implicitly redirected associations now\r\n  properly considers that elements could have been renamed in the new association target.\r\n* With `--new-redirect-impl`, the code completion candidates are the elements\r\n  of the new association target calculated by the implicit redirection.\r\n* With `--new-redirect-impl` and `--assoc-on-rewrite`,\r\n  the `on` condition or `keys` are rewritten with implicit redirections.\r\n* With `toSwagger`, enum constants without values are now correctly rendered.\r\n* With `toSql` in `sqlite` dialect, a warning is now issued if an identifier collides\r\n  with a known SQL keyword.\r\n* For OData, annotations with `null` values are now ignored (this can also be used to\r\n  \"delete\" an annotation in an extension).\r\n* In OData, structured types that are anonymous or not exposed in a service are now\r\n  automatically exposed (unless used as an entity element - in that case they are still\r\n  flattened).\r\n* For OData v2, the namespace for service annotations is now correctly set.\r\n* For `toHana` with `plain` names, all type properties (including `length` ...) are now\r\n  propagated correctly when derived types are used explicitly in view columns.\r\n* CSN version 0.2.0 is now accepted by the compiler.\r\n\r\n## Version 1.8.0\r\n\r\nFeatures\r\n* Support the OData annotation vocabularies `PersonalData` and `Aggregation`.\r\n  The vocabulary for `PersonalData` contains a number of annotations that are flagged\r\n  as \"experimental\". Their usage will result in a warning.\r\n* New option for specifying the locale in SQLite dialect. As part of the `toSql`\r\n  command is now available the options `'-l, --locale <locale>'` for specifying\r\n  value for the \"$user.locale\" variable.\r\n\r\nChanges\r\n* Entity definitions with elements of type `array` and structure type definitions with\r\n  association elements will now lead to an error message when generating edmx for OData v2.\r\n  These constructs are not allowed in OData v2, but there was no corresponding check in the\r\n  cds compiler yet.\r\n\r\n## Version 1.7.1\r\n\r\nFixes\r\n* Restore version function which was deleted by accident\r\n\r\n## Version 1.7.0\r\n\r\nFeatures\r\n* Allow entities to have parameters. They can be referred to inside the query with\r\n  `:Param`. Entites with parameters are not allowed in `toSql` for dialect \"sqlite\".\r\n  When generating for HANA, parameters cannot be used in combination with associations:\r\n  an entity with parameters cannot have associations, and an association must not point\r\n  to an entity with parameters.\r\n* The parameters and return value of actions and functions can now have structured types.\r\n* In the annotation translation for OData, falsy values of the special variable `$value`\r\n  (that is used to provide nested annotations for scalar values) are correctly handled.\r\n* When (new-style) csn is used as input, the compiler ignores unknown attributes.\r\n* Implicit redirection and auto-exposure are now applied recursively, i.e. the associations\r\n  of an auto-exposed entity are considered for implicit redirection and auto-exposure,\r\n  if necessary.\r\n\r\nChanges\r\n* With `--new-csn`, consider `redirected to` on projected associations and\r\n  adapt the `on` condition and the `keys` specification accordingly.  There are\r\n  also Info messages if an element referred to in the `on` condition or `keys`\r\n  specification has not been projected to the new association target.\r\n  _The severity of these messages will be increased if implicit redirections\r\n  will have been performed by the core compiler._\r\n* `toHana` and `toSql` now reject entities that only contain unmanaged associations.\r\n  Such entites would lead to a deployment error later.\r\n* SQL name mapping modes `quoted` and `hdbcds` are only allowed when generating for HANA.\r\n* In the csn, the csn language version is now stored in the top level attribute `$version`.\r\n  The version information via `version.csn` is deprecated and will be removed in a future\r\n  release. The information about the creator of the csn has been moved inside the new\r\n  top level attribute `meta`.\r\n\r\nFixes\r\n* Provide code completion for references in complex select item expressions not\r\n  (yet) having an alias (complex = not consisting of just a reference).\r\n* With `--new-csn`, avoid internal error while rewriting the `on` condition\r\n  from an element of a source entity which refers to a `mixin` definition with\r\n  an `on` condition containing a reference like `$projection.<elem>`.\r\n* OData, edmx generation: correctly escape the characters `<`, `>`, `&`, and `\"`.\r\n* When an entity is auto-exposed, it's annotations are transferred to the generated\r\n  projection.\r\n\r\n## Version 1.6.0\r\n\r\nFeatures\r\n* Provide code completion for `using` declarations.\r\n* Support the OData annotation vocabulary \"Validation\".\r\n* For compositions in EDM, add `<OnDelete Action=\"Cascade\"/>` to the navigation\r\n  property where required.\r\n\r\nChanges\r\n* With `--new-csn`, complain more often about projected associations whose `on`\r\n  condition could not be rewritten correctly.\r\n* Make `associations: 'joins'` the default for `toSql` (because the default for\r\n  `dialect` is already `sqlite`, which requires joins).\r\n* Adapt the command line interface to use commands instead of the `--to...` generation\r\n  options (e.g. `cdsc toHana --src --names plain` instead of `cdsc --toHana src,plain`).\r\n  Please see the [Command Line Migration guide](doc/CommandLineMigration.md)\r\n  for details.\r\n* Add a `generated by cds-compiler version x.y.z` comment to all generated SQL and `hdbcds`\r\n  sources.\r\n* Replace the CSN validator (formerly `ajv`) with a new own implementation.\r\n\r\nFixes\r\n* With `--new-csn`, do not change references to magic variables like `$user.id`\r\n  while rewriting the `on` conditition of a projected association.\r\n* Apply OData specific checks (e.g. that all elements of an entity must have a type)\r\n  applied only to objects that are exposed in a service.\r\n* When generating SQL for SQLite, replace the the special variables `$now`, `$user.id`\r\n  and `$user.locale` by `CURRENT_TIMESTAMP`, `'$user.id'`, and `'EN'`, respectively.\r\n* Issue a warning for conflicting cardinality declarations (e.g. `association[1] to many ...`).\r\n* Handle filters with cardinality correctly when translating associations to joins.\r\n* Avoid crash when checking structured action parameters.\r\n* Handle `$self` as the first of multiple path steps correctly in `toOdata`.\r\n* In `toHana`, render the combination of enums and `type of` correctly.\r\n* In mixins generated by `toHana`, handle special variables starting with `$` correctly.\r\n\r\n## Version 1.5.0\r\n\r\nFeatures\r\n* The DDL statements in the output of `toSql` are now sorted according to kind\r\n  (views after tables), so that they can be deployed sequentially to HANA (view\r\n  dependencies not yet considered).\r\n* (Still work in progress): The output of `toSql` now also contains kind-specific\r\n  dictionaries for `hdbtable`, `hdbview` etc., which should be directly deployable\r\n  to HDI.\r\n\r\nChanges\r\n* Element definitions in multiple entity/structure extensions are now sorted\r\n  according to the layer hierarchy – elements from highest layers come last.\r\n  Report such multiple extensions only if they are potentially problematic.\r\n* The values for the `names` option of `toSql`, `toHana` and `toOdata` have\r\n  been renamed: `flat` (default) is now `plain`, `deep` is now `quoted`. The old\r\n  values are still accepted (with a warning) but **will be removed in a subsequent\r\n  release**.\r\n\r\nFixes\r\n* OData, annotation processing for v2: In a view where translation of analytical annotations\r\n  is switched on, the annotations `@Common.Text`, `@Common.Label`, and\r\n  `@Measures.ISOCurrency/@Measures.Unit` are now translated into the corresponding v2-style annotations\r\n  `sap:label`, `sap:text`, and `sap:unit`, respectively, even if the value is a path or\r\n  has a nested annotation.\r\n* OData V2, generation of EDMX: The Parameters of a FunctionImport now always have\r\n  an attribute `Nullable=\"true\"` if not specified as `not null` in CDS.\r\n* Produce better parentheses for nested set operations (`union`, `intersect`, ...) in views\r\n  for SQL output.\r\n* Correctly strip off the `enum` property of types for HANA CDS, even when derived types are\r\n  involved.\r\n\r\n## Version 1.4.0\r\n\r\nFeatures\r\n* OData, annotation processing: Provide a shortcut for the nesting of the `TextArrangement`\r\n  annotation: In order to annotate a `@Common.Text` annotation, just put an annotation\r\n  `@Common.TextArrangement` next to it.\r\n* Parameters can now be referred to with `:param`, `:1` or `?` in the parse API functions.\r\n\r\nChanges\r\n* More checks for the correct usage of `$self` and associations as values in expressions.\r\n* Backlink-Associations: When transforming an ON-condition `on $self = foo.bar`, check that\r\n  the association `bar` really points to the entity enclosing association `foo`.\r\n* Allow and transform multiple `$self`-comparisons in one association ON-condition\r\n  (but a true backlink association still requires exactly one such comparison).\r\n* Warn if a \"to many\" association or composition does not have an ON-condition\r\n  (likely not intended because the resulting managed association will at most match a single\r\n  item)\r\n\r\nFixes\r\n* Add missing `as` for flattened structured elements.\r\n* Allow `using cds;` to make the namespace `cds` explicitly known, which is\r\n  useful if that had been shadowed by a namespace declaration ending with `cds`.\r\n* OData: don't generate empty `<Annotations ...>` elements any more.\r\n* Draft for OData v2: in the `DraftRoot` and `DraftNode` annotations, the path\r\n  to the draft annotations now contains `EntityContainer`.\r\n* Improved checks for parameters of actions and functions. Inappropriate warnings like\r\n  \"The type of input parameter ... must be from the current service\" and\r\n  \"The action ... can only return an array of entities\" don't appear any more.\r\n* Correctly generate foreign key fields for associations in structured types.\r\n* For `toHana()` and `toSql()`, enclose the artificial condition resulting from\r\n  `$self`-comparisons in parentheses.\r\n* Warn properly when draft-enabled artifacts are not exposed in a service.\r\n* Do not render a full entity name for paths like `$self.foo` to SQL (just skip `$self`).\r\n\r\n## Version 1.3.0\r\n\r\nFeatures\r\n* The `using` declaration can now appear top-level also after artifact definitions.\r\n* Support for `$user.locale` and `$user.id` with HANA generation `SESSION_CONTEXT(…)`.\r\n* For entities annotated with `@odata.draft.enabled`, the generated `DraftAdministrativeData`\r\n  association for ODATA is now annotated with `@odata.contained: true` (avoiding the\r\n  generation of an `<Attribute>` for its foreign key in ODATA V4).\r\n\r\nChanges\r\n* Having just `$user` in CDL is now rendered as `{ref:['$user','id'], as:'$user'}`\r\n  in new-style CSN.\r\n* Using SQL's parameter-less functions not having parentheses (like `current_date`)\r\n  is now rendered as `{func:'current_date'}` in new-style CSN.\r\n* `betaMode` is currently required for entities with parameters.\r\n* In old-style CSN, the `on` condition as source text has been removed.\r\n* Explicit redirection of an association to a target that is completely unrelated to\r\n  the original target is now an error, not just a warning.\r\n* The API function `toI18n()` and the corresponding command line option `--to-i18n` have\r\n  been removed.\r\n* Annotation assignments after sub structure definitions, enum definitions, and\r\n  parameters are now considered an error instead of just a warning.\r\n* For bound actions and functions, the name of the corresponding function import in\r\n  OData v2 edmx is now prefixed with the name of the entity.\r\n\r\nFixes\r\n* For ODATA V2, create correct `<Principal>` and `<Dependent>` for backlink associations\r\n  having `@odata.navigable:false`.\r\n* Avoid the `Expecting artifact to be part of a service` error that occurred when generating\r\n  multiple entities with `@odata.draft.enabled` to SQL.\r\n* Generate correct (fully qualified) action names into the `@Common.DraftRoot` and\r\n  `@Common.DraftNode` annotations.\r\n* When generating the `DRAFT.DraftAdministrativeData` entity for SQL, provide proper\r\n  lengths for all `NVARCHAR` fields.\r\n\r\n## Version 1.2.0\r\n\r\nFeatures\r\n* Provide semantic code completion for the `excluding` clause.\r\n* Add support for \"deep drafts\", i.e. follow compositions from entities annotated\r\n  with `@odata.draft.enabled` (\"draft roots\") and draft-enable them as \"draft nodes\".\r\n\r\nChanges\r\n* Finalize the propagation of the `key` property.\r\n  Provide Info messages if it is not obvious why it has not been propagated.\r\n* Finalize the propagation of the `keys` property and `items` property.\r\n* Check for illegal use of `$self` and associations in expressions (may only occur\r\n  as values in an expression as part of the ON-condition in a backlink association).\r\n\r\nFixes\r\n* Produce warnings instead of errors in the translation of OData annotations.\r\n* For ODATA, in case of managed associations to draft-enabled entities, do not add\r\n  an extra foreign key for the ODATA-generated key field `IsActiveEntity`.\r\n* For HANA, in the generated draft shadow entities, redirect all associations (not\r\n  just compositions) so that they point to the draft shadow entities.\r\n* For ODATA V2, produce an `<EntitySet>` for `DraftAdministrativeData`, too. Ignore\r\n  the `@cds.odata.NoEntitySet` annotation.\r\n* For ODATA V4, do not generate `<Nullable>` for `<NavigationProperty>`s that are\r\n  collections.\r\n\r\n## Version 1.1.3\r\n\r\nFeatures\r\n* A `;` is now always optional before `}` and more often optional after a `}`.\r\n\r\nChanges\r\n* In `toOdata()` for v2, in the edmx the\r\n  **names of bound actions and functions now are prefixed with the corresponding entity's name**\r\n  in order to disambiguate actions and functions with the same name at two or more entities.\r\n  The corresponding implementation code in the CDS runtime needs to be adapted.\r\n* Check `redirected to` target.\r\n\r\nFixes\r\n* Make the compiler more robust wrt/ parse errors and redefinitions.\r\n* Correctly propagate properties inside `returns` and `items`.\r\n* Some corrections to EDM `ActionImport` and `FunctionImport` in ODATA V2 and V4.\r\n* Generate correct joins for mixin associations that are traversed with different filters.\r\n* Generate joins not only for views, but also for projections.\r\n* For entities annotated with `@odata.draft.enabled`, make all non-key fields nullable in\r\n  `toOdata()`.\r\n\r\n## Version 1.1.2\r\n\r\nFeatures\r\n* Allow reserved names for annotations/properties in assignments.\r\n* Allow final `,` for much more \"lists\" (e.g. arguments).\r\n* It is now possible to omit the select list in a view definition,\r\n  which is the same as writing `select from <name> {*}`.\r\n* Allow `array of` as type spec for a parameter definition.\r\n* SQL generation for sqlite now supports a mode where associations are resolved\r\n  to joins.\r\n\r\nChanges\r\n* Improved messages for syntax errors.\r\n* `where` now is a reserved keyword and so cannot be used anymore as name at many places.\r\n\r\nFixes\r\n* In `toOdata()` with the `hdbcds` naming convention, the value of the `@cds.persistence.name`\r\n  annotation now uses `.` rather than `_` as separator for the names of flattened structured\r\n  entity elements.\r\n* Numeric values in OData annotations are now correctly mapped to edmx.\r\n\r\n## Version 1.1.1\r\n\r\nFixes\r\n* Ignore unapplied extensions when generating HANA CDS source.\r\n* Make sure the combination of `collectSources()` and `compileSources()` has the same\r\n  effect as `compile()`, especially regarding annotation precedence.\r\n* Render annotations of `edm:Schema` correctly in for ODATA V4.\r\n\r\n## Version 1.1.0\r\n\r\nFeatures\r\n* Support `@odata.draft.enabled` without the need for option `{ betaMode: true }`).\r\n\r\nFixes\r\n* Return result of `collectSources()` as promise.\r\n\r\n## Version 1.0.33\r\n\r\nFeatures\r\n* Allow to extend query entites with actions.\r\n* Allow `select distinct`.\r\n* With `--tnt-flavor` only: allow to specify (a restricted version of) service include via syntax.\r\n* (Work in progress): New option `{ dialect: 'hana'|'sqlite' }` for `toSql()`, allowing generation\r\n  of SQL statements without HANA-specific constructs (e.g. without `WITH ASSOCIATION`).\r\n* For ODATA V4, handle associations to parameterized entities correctly.\r\n* Allow specifying `key` for projection elements (important in case of partial keys\r\n  not being propagated, see below).\r\n* Annotate entities and elements in the CSN with `@cds.persistence.name`, the name generated\r\n  for the persistence layer according to the naming convention chosen (`flat`, `deep`, `hdbcds`).\r\n* (Work in progress, only available with option `{ betaMode: true }`): Support `@odata.draft.enabled`\r\n  with `toHana()`, `toOdata()` and `toSql()`. Only draft roots so far, no compositions.\r\n\r\nFixes\r\n* Put table alias for `from` into CSN even without having it explicitly provided in CDL\r\n  if necessary (the table has been referred via a `using` with alias).\r\n* Do not assume a specific min cardinality if none was provided.\r\n* For SQL, provide table aliases when required because of `flat` naming.\r\n* Handle `@readonly` annotation correctly when applied to entities.\r\n* Various fixes to the handling of `@odata.contained`.\r\n\r\nChanges in the property propagation, see internalDoc/Propagation.md:\r\n* Propagate properties along primary sources in includes, especially actions/functions.\r\n* The propagation of `key` is more restrictive now, most notably:\r\n  only if all keys are selected (selecting sub elements of a structured key is not enough),\r\n  only if there is no navigation along a to-many association in a select item.\r\n* The propagation of `notNull` has been corrected.\r\n* The propagation of `virtual` has been corrected.\r\n* The propagation of an array type has been corrected.\r\n\r\nOther changes\r\n* For ODATA, provide min cardinality 1 for non-null associations.\r\n* Remove obsolete option `--check-model`. Instead, always perform all checks\r\n  previously hidden behind that option, possibly resulting in more warnings\r\n  (but not more errors).\r\n* Actions and functions are no longer restricted to entities within services.\r\n\r\n## Version 1.0.32\r\n\r\nFeatures\r\n* The `toHana()`, `toSql()` and `toRename()` backends now also support a naming\r\n  convention that is backward compatible to HANA CDS, with option `{ names: 'hdbcds' }`.\r\n* New API function `collectSources()` to conserve a set of compiled sources with\r\n  its hierarchy relations.\r\n* Avoid unnecessary quoting of names generated by `toHana()`, `toSql()` and `toRename()`.\r\n* Implement handling of `@cds.persistence.table`.\r\n* Support \"term casts\" in paths of ODATA annotations.\r\n* Support the `@odata.contained` annotation.\r\n\r\nChanges that only have an effect if the `--new-csn` option is set\r\n* With `--disable-propagate`, produce CSN in `gensrc` flavor:\r\n  + omit inferred elements and keys,\r\n  + omit propagated properties (like annotation assignments),\r\n  + supply annotation assignments on inferred and propagated members with an\r\n    extra `annotate` statement in the model's `extensions` property if necessary.\r\n* Without `--disable-propagate`, produce CSN in `client` flavor:\r\n  + provide inferred elements and keys,\r\n  + provide propagated properties (like annotation assignments),\r\n  + supply annotation assignments directly with the inferred member.\r\n* The `$inferred` property has been removed.\r\n* Rename `foreignKeys` to `keys` for the keys to target elements of associations.\r\n* Rename `filter` to `where` in `ref`s and omit the surrounding `{xpr:…}` of the condition.\r\n* Do not render query `columns` if no columns have been provided (only implicit `*`).\r\n* Render technical configuration correctly.\r\n* Render `select distinct` correctly.\r\n* Let also those backends that produce CSN as a by-product (e.g. `toHana()`, `toOdata()`, ...)\r\n  produce new-style CSN if the `--new-csn` option is set.\r\n\r\nOther changes\r\n* The property propagation has been changed, except with `--tnt-flavor`.\r\n  See internalDoc/Propagation.md, it is still work in progress.\r\n* Remove the special handling of namespaces ending with `::`\r\n* Sort the output of `toHana()` and `toCdl` (also within contexts and services).\r\n* When `@cds.autoexpose` is set for entities that are already exposed, use the existing\r\n  exposure for implicit redirection.\r\n\r\nFixes\r\n* An `annotate` statement on an enum symbol now has the expected effect.\r\n* Annotation `@cds.autoexposure` is renamed to `@cds.autoexpose` (like it is used in documentation)\r\n* EDM `Nullable` and `Cardinality` now handled correctly for ODATA V2.\r\n* Correctly check that elements must have a type for ODATA.\r\n* Handle structured annotation assignments and `#`-variants correctly with `toCdl()`.\r\n* For `toHana`, generate correct aliases for foreign key fields in views if the corresponding\r\n  association has an alias.\r\n* Do not propagate `@cds.persistence.table` and `@cds.persistence.exists`.\r\n* Render artifact paths in `from` correctly with `toSql()`.\r\n* In EDM, do not render `OpenType` and `Abstract` if they have default values.\r\n* For EDM annotations, correctly set `Target` according to vocabulary's `AppliesTo`.\r\n* In EDM, only set `Nullable=false` if `not null` was explicitly specified (i.e. not just for\r\n  all keys).\r\n* In EDM, handle entities with parameters correctly regarding the entity type that\r\n  is generated for the parameters.\r\n\r\n## Version 1.0.31\r\n\r\nFeatures\r\n* Support multiple imported names in `using` declaration:\r\n  `using { foo.bar, this as that } from './othermodule';`\r\n* Add new command line option `--to-rename`, generates SQL DDL statements\r\n  renaming existing HANA tables for migration (work in progress, subject to\r\n  change).\r\n* For ODATA, allow backlink associations on unmanaged associations.\r\n\r\nChanges\r\n* New error for extending views (query entities) with new elements.\r\n* Allow annotations of unknown artifacts - slightly change the name resolution\r\n  in CDL for references in top-level `extend` and `annotate` statements.\r\n* Make the client tool display info messages by default.\r\n* Make keywords `new` and `aspect` to be non-reserved.  With this change, the set\r\n  of reserved keywords of CDL is a real subset of the reserved keywords of SQL.\r\n* Remove command line options and API functions deprecated with v1.0.24.\r\n* In ODATA V2, reuse the `edm::Association` of the original association for backlink\r\n  associations.\r\n\r\nFixes\r\n* Miscellaneous fixes for CSN with option `--new-csn`.\r\n* Avoid internal error by not running extra checks after compilation with error.\r\n* Propagate defaults and `@odata.Type` annotations from keys to generated foreign\r\n  key fields of associations.\r\n* Do not render annotations of subqueries to HANA CDS.\r\n* Suppress `$projection` in ON-conditions for ODATA.\r\n* When looking for candidates for implicit redirection, follow `FROM` sources of\r\n  views/projections and `:`-includes of entities transitively, not just for one level.\r\n  (Please note that this fix **may uncover errors in existing models** where implicit\r\n  redirection now fails because of multiple candidates. Use explicit redirection to\r\n  resolve this to one of the candidates, as suggested in the error message).\r\n* For ODATA and HANA CDS, recognize and transform backlink associations also if the\r\n  condition is in (redundant) parentheses.\r\n* For HANA CDS, replace enum literals in defaults by their values.\r\n* Reject paths in defaults.\r\n\r\n## Version 1.0.30\r\n\r\nFeatures\r\n* Complex queries (with joins, sub-selects etc.) are now supported.\r\n\r\nChanges\r\n* Both `toHana()` and `toSql()` now use `flat` names by default (specify\r\n  options `{ names: 'deep' }` to get the old behavior). The CSN version\r\n  currently starts with `0.1` for `flat` names, with `0.0` for `deep`.\r\n  This is likely to be adapted again later.\r\n* Using `Annotate` on unknown artifacts or members now only leads to an info\r\n  message, not an error anymore.  The CSN with option `--new-csn` then has\r\n  an `extensions` property containing the effective assignments.\r\n* Downward compatibility for `@cds.odata.navigable` was finally removed\r\n  (see 1.0.11, use `@odata.navigable` instead).\r\n\r\nFixes\r\n* Render table aliases correctly for HANA CDS when an entity is used in\r\n  `from` that is aliased by a `using` declaration.\r\n\r\n## Version 1.0.29\r\n\r\nFeatures\r\n* Support the generation of multiple services with `--to-swagger`.\r\n* Support `SELECT DISTINCT`.\r\n\r\nChanges\r\n* Improve smart wildcard handling: simple projections with just redirections now\r\n  have the original element order of the source.\r\n* Restrict `limit` and `offset` value to number (and `null`).\r\n* There is a warning for `key` elements outside entities or views, as an inner\r\n  `key` specification would be ignored for implicit foreign keys and propagation.\r\n* Change propagation of the `key` property: see internalDoc/Propagation.md. Most\r\n  notably, in a view/projection the `key` property is no longer propagated along\r\n  association navigation.\r\n\r\nFixes\r\n* Entities that contain only virtual elements or are empty (recursively) are\r\n  now rejected for HANA CDS, unless they are abstract (was only partly checked before).\r\n* Multiply nested structs in views or projections are now correctly rendered to\r\n  HANA CDS (avoiding a completely unrelated error message complaining about\r\n  extensions).\r\n\r\n## Version 1.0.28\r\n\r\nFeatures\r\n* The mapping of cds to edm types can be overridden by the annotations\r\n  `@odata.Type` and `@odata.MaxLength`. Currently only `Edm.String` can\r\n  be used as target type. This is intended for exceptional cases, where\r\n  the standard type mapping is not wanted (e.g. if `UUID` should be mapped\r\n  to `Edm.String` rather than `Edm.Guid`).\r\n\r\nFixes\r\n* Issue an error, if an association element that is defined in a mixin of the\r\n  same view is explicitly redirected. Up to now this modelling error was not\r\n  recognized and led to the generation of incorrect HANA CDS models.\r\n* We now also allow query entities and their elements to use as type, relaxing\r\n  a check introduces with v1.0.26.\r\n  It needs to be seen whether we allow entites as type only for actions.\r\n\r\n## Version 1.0.27\r\n\r\nChanges\r\n* The `implemented in` clause of entity definitions **has been removed** and will now\r\n  cause a syntax error (this clause is obsolete since version 1.0.21, see corresponding\r\n  changelog entry). Replace it by one of these annotations:\r\n  + use `@cds.persistence.exists` to indicate that an object should not be\r\n    created in the database because the database object already exists.\r\n  + use `@cds.persistence.skip` to indicate that an object should not be\r\n    created in the database because it is implemented in the service layer.\r\n\r\n## Version 1.0.26\r\n\r\nFeatures\r\n* For annotation assignments outside array values,\r\n  allow paths and variants, not just identifiers as keys in structure values.\r\n\r\nChanges\r\n* In `flat` mode, the `toHana` channel will reject quoted identifiers in definitions.\r\n* Smart `*`: just issue a warning if a select item \"overwrites\" an element\r\n  coming from the wildcard.  Might even be downgraded to an Info message in the future.\r\n* Artifact references are checked for plausibility:\r\n  only allow entities as association and composition target and\r\n  for the `select from` clause (allow to navigate along associations there, too),\r\n  only allow (non-query) structures for structure includes,\r\n  only allow types (and entities) and their elements as types.\r\n* Implicit redirection of associations is now also performed for HANA CDS (as it was\r\n  already for ODATA).\r\n\r\nFixes\r\n* IDE support: improve syntactic code completion, and messages for parse errors.\r\n* OData: correctly escape special xml characters in generated edmx.\r\n\r\n## Version 1.0.25\r\n\r\nChanges\r\n* Better command line error reporting for `cdsc`.\r\n\r\nFixes\r\n* Render anonymous structured types correctly to HANA CDS (no `:`).\r\n* Handle structured elements with aliases in views and projections correctly.\r\n* Flatten structured view elements for ODATA (like for HANA CDS).\r\n\r\n## Version 1.0.24\r\n\r\nFeatures\r\n* The `toHana()` channel now also supports the option flag `toHana.names:'flat'`.\r\n  This option affects how the names of database objects and their columns are built.\r\n  This option **will become the default in one of the next versions**.\r\n  The old behavior can then be enforced with option flag `toHana.names:'deep'`.\r\n  With option flag `flat`, ...\r\n  + all names are converted to uppercase\r\n  + in object names, `_` is used as separator instead of `.`\r\n\r\nChanges\r\n* The new command line tool `cdsc` is going to replace the old `cdsv`, which is deprecated **and will\r\n  be removed soon**. Please see the [Command Line Migration guide](doc/CommandLineMigration.md)\r\n  for details.\r\n* New API \"backend\" functions (i.e. those that generate output from a CSN model) are going to replace\r\n  the existing ones. The old API functions `toHanaCdl`, `forHana`, `toOdataOutput`, `exportAnnotations`,\r\n  `exportAnnosUi5Style` and `toSqlDdl`, are deprecated **and will be removed soon**. Please see the\r\n  [API Migration guide](doc/ApiMigration.md) for details.\r\n* ODATA JSON output can no longer be generated for V2 (there is no valid V2 JSON format).\r\n* When generating the CSDL JSON for OData v4, enum values now have an additional attribute `$EnumMember@odata.type`.\r\n  This addition reflects an amendment of the specification of CSDL JSON.\r\n\r\nFixes\r\n* Do not try to find table aliases for references consisting of a single identifier,\r\n  i.e., a column named `x` in the select list is also found\r\n  if the table alias or the table itself has been named `x`, too.\r\n* Fix unjustified message about a undefined reference in `mixin` definitions\r\n  when a reference starting with `$projection` accesses\r\n  a nested element or an element which has been added to the query via `*`.\r\n* Check that ON-conditions of unmanaged associations do not traverse other unmanaged associations.\r\n* When generating EDM, ignore aliased elements in ON conditions of redirected associations.\r\n* Guarantee a deterministic artifact processing order even if async calls are involved.\r\n* When generating edmx for OData v2, referential constraints for entities with multi-part keys\r\n  are now correctly rendered.\r\n\r\n## Version 1.0.23\r\n\r\nChanges\r\n* When generating for Swagger, handle TNT-specific features more gracefully.\r\n\r\n## Version 1.0.22\r\n\r\nFixes\r\n* IDE support: improve syntactic code completion, and messages for parse errors.\r\n* Fix behavior of `@cds.persistence.exists` for HANA CDS (generate correct `using`,\r\n  avoid empty contexts).\r\n* Strip `key` from structured type elements when generating for HANA CDS.\r\n\r\n## Version 1.0.21\r\n\r\nChanges\r\n* The CSN element property `notNull` is not inherited anymore\r\n  if the `select`/`projection` items whose path refering the source element\r\n  navigates along associations or compositions.\r\n* Annotation assignments which are placed after the name of `context` or `service` definitions\r\n  must now use the `@(...)` syntax variant if a value is supplied,\r\n  the same restriction already applies for all other definitions.\r\n  This new syntax restriction can be disabled with option `tntFlavor`, and\r\n  re-enabled with its new sub option `skipSloppyAnnoAssignments`.\r\n* The syntax `implemented in` is deprecated. It is replaced by two new annotations:\r\n  + use `@cds.persistence.exists` to indicate that an object should not be\r\n    created in the database because the database object already exists.\r\n  + use `@cds.persistence.skip` to indicate that an object should not be\r\n    created in the database because it is implemented in the service layer.\r\n* The shortcut for the value list annotation has been simplified, you now can just type\r\n  `@Common.ValueList.entity:'SomeValueList'`\r\n\r\nFixes\r\n* IDE support: improve semantic code completion.\r\n* Self-associations are now handled correctly in the ODATA generation.\r\n\r\n## Version 1.0.20\r\n\r\nFeatures\r\n* For Swagger, one parameter of an action or function can now be selected to become\r\n  the request body, by annotating it with `@Swagger.parameter: 'requestBody'`.\r\n* The shortcut for value help annotation `@Common.ValueList:{ type:#fixed, entity:'SomeValueList' }`\r\n  is now generally available.\r\n* For associations in ODATA that have targets outside the service, projection-like views\r\n  are now also considered as implicit redirection targets (not just projections).\r\n\r\nFixes\r\n* Type properties like `length` are now omitted when generating an ODATA property `Edm.Stream`.\r\n* Nested annotations for ODATA are now handled correctly.\r\n* The transformation of backlink associations for HANA CDS is now more robust against\r\n  artifact processing order.\r\n\r\n## Version 1.0.19\r\n\r\nChanges\r\n* Allow aliases in projections for HANA CDS (although not 100% watertight in all cases).\r\n\r\nFeatures\r\n* Entities annotated with `@cds.autoexposure` are now automatically exposed in a service\r\n  (by means of a full projection) when they are used as association targets\r\n  within that service.\r\n\r\nFixes\r\n* The `$user` variable is now correctly expanded to `SESSION_CONTEXT('XS_APPLICATIONUSER')`,\r\n  with only one underscore.\r\n* The `--check-model` option is now more robust against the order of artifacts in the\r\n  model.\r\n* Enum types are now always reduced to their base type for HANA CDS.\r\n* Options given to the compiler or one of the post-processing functions are now always\r\n  handed down together with the model.\r\n* The query clauses `LIMIT` and `OFFSET` are now really enabled (were accidentally still\r\n  left in beta).\r\n\r\n## Version 1.0.18\r\n\r\nChanges\r\n* Compiler now complains if an entity exposed for ODATA has an element without a type.\r\n* View and projection elements in CSN now always have a `value` property (possibly\r\n  with a path).\r\n\r\nFeatures\r\n* For ODATA, now also the annotations from the Analytics vocabulary are translated.\r\n\r\nFixes\r\n* Workaround for a HANA CDS issue: When providing `LargeString` or `LargeBinary` as\r\n  explicit type for a view element, HANA CDS runs into an error during the deployment\r\n  of the generated HANA CDS (fix pending). This error can be prevented by annotating\r\n  the corresponding elements in CDX with `@cds.workaround.noExplicitTypeForHANA`.\r\n* `not null` at a managed association is no longer added to the corresponding\r\n  unmanaged association in HANA CDS, but only to the foreign keys.\r\n* When a redirected association is used as a view element, the select item for the\r\n  corresponding MIXIN is now correctly rendered for HANA CDS and CDL (accidentally had\r\n  an explicit association type).\r\n* MIXINs that are explicitly added to views are now correctly generated for HANA CDS\r\n  (were accidentally duplicated).\r\n* Do not complain about `@Core.MediaType` for key-less entities.\r\n\r\n## Version 1.0.17\r\n\r\nChanges\r\n* Correct license in `package.json`\r\n* `toSwagger` takes in mind only artifacts from services\r\n\r\nFixes\r\n* Handle type `cds.UUID` correctly when generating SQL.\r\n* Handle associations in GROUP BY and ORDER BY correctly when generating HANA CDS.\r\n* When generating MIXINs for associations in HANA CDS views, use an alias to avoid\r\n  conflicts with association usage in the SELECT.\r\n* Wrap bound action and function definitions in an array when generating EDMX.\r\n\r\n## Version 1.0.16\r\n\r\nChanges\r\n* Allow artifacts to be defined in namespace `cds.foundation`.\r\n\r\nFeatures\r\n* Support the remaining query clauses `group by`, `having`, `order by`\r\n  (with optional `asc`/`desc` and optional `nulls first`/`nulls last`),\r\n  and `limit` (with optional `offset`).\r\n* Support the magic variables `$now` and `$user`.\r\n\r\nFixes\r\n* Complain about artifact extensions inside context/service extensions.\r\n* For ODATA, add a `$Partner` attribute to `edm:NavigationProperty` when\r\n  appropriate for bi-directional asociations.\r\n\r\nThere is a [new document](doc/ErrorMessages.md) which explains some error messages\r\n(more messages will be added in the future).\r\n\r\n## Version 1.0.15\r\n\r\nChanges\r\n* More checks for correct ODATA input (element names, keys, ...).\r\n\r\nFeatures\r\n* Allow `redirected to` in `select` items of views.\r\n* Support the `@Core.MediaType` annotation for ODATA.\r\n\r\nFixes\r\n* Correct bug in the calculation of the `_finalType`,\r\n  which could lead to an internal error within the `odata` backend.\r\n* Properly resolve filter conditions in the `from` clause of `select`,\r\n  as we do in value expressions/conditions.\r\n* Translate associations and filters in `FROM` correctly to HANA CDS.\r\n* Avoid error with `undefined` when checking annotations with structs in arrays.\r\n* Provide correct defaults for `$Nullable` in ODATA V4.\r\n\r\n## Version 1.0.14\r\n\r\nChanges\r\n* Preserve the `key` properties of elements selected in a view (like we do in projections).\r\n* Improve the CSN representation for views.\r\n  Represent the `where` and `on` condition of `select`s like other conditions.\r\n* Project name in github is now `cap/cds-compiler`.\r\n\r\nFeatures\r\n* Support `select *` in views.\r\n* First version of transformation into OpenAPI json with `--to-swagger` option, more about it [here](doc/toSwagger.md)\r\n\r\nFixes\r\n* Resolve the `on` condition for associations defined in the `mixin` clause of a `select`.\r\n* Produce correct `using` directives with `--to-hana` for artifacts with `implemented in`.\r\n* Handle mixins and expression elements in views correctly with `--to-hana`.\r\n* Improve annotation assigment checks with `--check-model`.\r\n* Check that type declarations for ODATA do not contain anonymous struct types.\r\n\r\n## Version 1.0.13\r\n\r\nChanges\r\n* Rename project from `@sap/cdsv` to `@sap/cds-compiler`. Note that you will likely\r\n  __need to adapt your `package.json`__ because of that.\r\n* Check that no sub-`select`s are used in expression and conditions\r\n  (currently: path filters and `on`-conditions of unmanaged associations);\r\n  in views, they are only allowed with option `--beta-mode`.\r\n\r\nFeatures\r\n* Support the `mixin` clause in `select`s (to add unmanaged associations to a `view`).\r\n* Support extending `enum` types (and elements where the `enum` type has been\r\n  defined in-place), and annotating existing enum symbols.\r\n\r\nFixes\r\n* Recognize function calls without parentheses (like `current_data`)\r\n  in all expressions and conditions (not just in `select` items and the `where` condition).\r\n* Make layer computation respect all `using from`-dependencies.\r\n* Make the compiler more robust regarding incomplete/unexpected sources.\r\n* During annotation propagation in the ODATA preprocessing, handle overwriting of\r\n  annotations correctly.\r\n* Fix foreign key checks with `--toHana`.\r\n* The key generated for analytical views now has the name `ID__`.\r\n\r\n## Version 1.0.12\r\n\r\nChanges\r\n* The `--odata-and-hana-output` no longer contains the plain compiled CSN but the result\r\n  of the ODATA-specific preprocessing step. Dito for the API function `cdsv.toOdataOutput`.\r\n\r\nFeatures\r\n* For analytical views (those annotated with `@Aggregation.ApplySupported.PropertyRestrictions`),\r\n  transform keys appropriately.\r\n\r\nFixes\r\n* Views are now handled like projections by `--toHana` (regarding struct flattening and\r\n  transformation of association-typed elements into mixins).\r\n\r\n## Version 1.0.11\r\n\r\nChanges\r\n* Check that user code does not define artifacts in namespace `cds`.\r\n* It is an error to have two assignment for the same annotation on the same artifact/member\r\n  in the same file/layer (see Features below),\r\n  even if one is via `extend` and the other via `annotate`\r\n  (both still overwrite assignments provided with a definition).\r\n\r\nFeatures\r\n* Allow arbitrary expressions and comparison operators in ON-condition of unmanaged associations\r\n  (note: in EDMX, SQL functions that are called without parentheses like `CURRENT_DATE` are not yet supported)\r\n* Annotation assignments are now _layer_-aware:\r\n  an annotation assignment in file _A_ overwrites a annotation assignment in file _B_\r\n  if file _A_ directly or indirectly depends (via `using…from`) on file _B_, but not the other way round.\r\n* New syntax variant `using from '<module>'` (without an artifact name)\r\n  to just add `<module>` to the model (and introduce a dependency between the two files).\r\n\r\nFixes\r\n* Reintroduced attribute `nullable` for function import parameters in edmx generation for OData V2\r\n* Better handling of paths for `--to-hana` in views and projections by using aliases.\r\n* SQL functions without parentheses (like `CURRENT_DATE` etc.) now correctly rendered with `--to-hana`.\r\n* TNT only: Handle `@odata.navigable` like `@cds.odata.navigable`\r\n\r\n## Version 1.0.10\r\n\r\nChanges\r\n* When using the command line tool to generate edmx files, the file names have changed:\r\n  + the file name now contains the exact service name (dots are preserved and no longer replaced by underscore)\r\n  + suffix `default` has been removed\r\n* Removed obsolete command line options `--old-cdl` and `--new-cdl`\r\n\r\nFeatures\r\n* Backlink associations now also work for unmanaged associations\r\n* Support for `WHERE` condition in views\r\n\r\nFixes\r\n* Views are now rendered as EntitySet/EntityType in edmx\r\n* Abstract entites do not appear as EntitySet/EntityType in the generated edmx\r\n* `--to-hana` now correctly handles type casts in view definitions\r\n* In the generated edmx for OData V2, inside a `ReferentialConstraint`, the elements `Dependent` and `Principal` now have the correct order\r\n* Remove attribute `nullable` for function import parameters in edmx generation for OData V2\r\n\r\n## Version 1.0.9\r\n\r\nChanges\r\n* With `--to-hana` the `$self` identifier is replaced by the absolute name of the\r\n  current artifact, when it is part of a path.\r\n* TNT only: Remove obsolete skip options, add new skip options for remaining special cases.\r\n* Check that non-abstract entities must have a key for ODATA.\r\n\r\nFeatures\r\n* (experimental) Introduce shortcut for the value help annotation: `@Common.ValueList:{ type:#fixed, entity:'DeliveryStatus' }`\r\n\r\nFixes\r\n* Also consider annotations of bound actions in the edmx generation.\r\n* Detect illegal cycles with managed associations.\r\n* Remove `key` property from a managed association which is transformed into an unmanaged one.\r\n* Do not swallow `key` in select items of views.\r\n* Handle backlink associations correctly in projections and structs.\r\n* For HANA and ODATA, correctly flatten paths starting within structs.\r\n* With `--export-annotations`, also export view annotations.\r\n* For nullable keys, let corresponding association foreign keys be nullable, too.\r\n* Handle implicit redirections within structs correctly\r\n* Render included (inherited) types and projections with `implemented in` correctly with `--cdl-output`\r\n\r\n## Version 1.0.8\r\n\r\nChanges\r\n* The `namespace` declaration now constructs a `.`-connected namespace,\r\n  use (final) `::` to construct a `::`-connected namespace.\r\n  The `nameprefix` declaration is considered obsolete (and leads to a warning).\r\n* Non-context/service artifacts cannot be named like a namespace.\r\n* New implementation of `--to-hana`, `--cdl-output` and `--odata-and-hana-output`\r\n  produces one `hdbcds` file per top-level artifact (instead of trying to emulate\r\n  the input source structure). Old implementation can still be used by specifying\r\n  `--old-cdl` (will be __removed in next version__).\r\n\r\nFeatures\r\n* Allow path when defining new artifacts.\r\n  You can refer to a namespace in a `using` declaration`.\r\n* Support simple single-source views, which can have expressions in select items\r\n* With option `--beta-mode`, support multi-source views without `union` and `join` -\r\n  work in progress.\r\n* Support more expressions: Path filters, `case`, `is null`, `not`, parentheses,\r\n  unary `-`, quantifiers (`any`, `all`, ...), `between`, `like`, SQL functions.\r\n* Allow CDL files without definitions or extensions.\r\n* Initial support for semantic code completion.\r\n* Annotation assignments can be written at more places (consistently).\r\n* Support structured elements in entities (flattened for ODATA and HANA CDS).\r\n* Support backlink associations for `--to-hana` and `--odata-and-hana-output`\r\n\r\nFixes\r\n* All redefinitions in a source now lead to an error message.\r\n* Always do `--to-hana` checks when necessary.\r\n* With the new implementation, `--to-hana`, `--cdl-output` and `--odata-and-hana-output`\r\n  now handle namespaces, `using` aliases, associations in projections,\r\n  enums in entities, default values, strings without length, structured types,\r\n  managed associations and quoted identifiers correctly.\r\n* Keys can now have the attribute `null` (unless generating for HANA, which does not\r\n  support that)\r\n* Correctly determine multiplicity for backlink associations.\r\n\r\n## Version 1.0.7\r\n\r\nFeatures\r\n* Support for analytical annotations in ODATA V2\r\n* Deprecated`Common.FilterExpressionRestrictions` in favor of `Capabilities.FilterRestrictions.FilterExpressionRestrictions`\r\n* `--to-hana`: Transform managed associations to unmanaged associations (with foreign key fields generated with `_` and\r\n  appropriate ON-conditions). Please note that this __results in different field names on generated HANA tables__.\r\n\r\nFixes\r\n* Handle annotations `@Analytics.Measures`  and `@Semantics.*` annotations correctly\r\n* Check that services and contexts are not illegally nested\r\n\r\n## Version 1.0.6\r\n\r\nFeatures\r\n* Support for the `from` clause of the `using` declaration, see [the README file](README.md#using-from).\r\n\r\nFixes\r\n* EDMX generation for annotations: if an annotation value is an expression that is not a CDS path,\r\n  dots are no longer replaced by slashes\r\n* `--to-hana`: Handle the target of associations inside views with mixins correctly, when `redirected to` is used\r\n* Handle enums and structured types correctly in ODATA transformation\r\n* TNT only: Apply implicit redirection also to CSN output of ODATA translation\r\n* TNT only: Fix options `skipGeneratedFKsWithout_` and `skipAssociationSetsWithTo`\r\n\r\n## Version 1.0.5\r\n\r\nFixes\r\n* Added new dependency on npm module \"resolver\" to npm-shrinkwrap.json\r\n\r\n## Version 1.0.4\r\n\r\nFeatures\r\n* Support for function `SESSION_CONTEXT` in the on ON-condition of unmanaged associations\r\n* The keyword `annotate` can be used to annotate actions and functions\r\n* Annotation translation mechanism works for annotations at actions/functions and their parameters\r\n* Error messages that refer to csn files as input have position information\r\n\r\n## Version 1.0.3\r\n\r\nFeatures\r\n* Automatic redirection of associations: When a service contains a projection on an entity with an association\r\n  with a target that is not part of the service, the association is now automatically redirected to a corresponding\r\n  entity/projection in the service, if this new target can be determined uniquely (via following projections or includes)\r\n* `--to-hana`: now correctly handles elements of type `Composition`, they are translated to `Association`\r\n* Support for annotation `@odata.etag` for enabling optimistic concurrency handling in the (v2) OData provider\r\n* Support for managed associations as foreign keys of managed associations\r\n\r\nFixes\r\n* Generated foreign key elements are now correctly marked as `key` if their association is a key element\r\n\r\nOther\r\n* Removed the message \"compiled successfully\"\r\n* A `service` can now be extended by `extend service` instead of `extend context`\r\n  (the latter still works, but __might lead to a compiler warning in the future__)\r\n\r\n## Version 1.0.3-RC3\r\n\r\nFixes\r\n* Disable EDMX schema aliases again (apparently, not all consumers can properly digest them)\r\n* TNT-specific `@extends`: Multiple services exposing the same inherited context with different redirections\r\n\r\n## Version 1.0.3-RC2\r\n\r\nFeatures\r\n* Support for `virtual` elements\r\n* More semantic checks for actions, functions and managed associations\r\n* Generation of CSDL JSON (work in progress)\r\n\r\nFixes\r\n* CDS annotations with \"inline CSDL JSON\" now also support `$LabeledElement`\r\n* Version number now consistent with suffix like `-RC2` in all places\r\n* EDMX schema aliases now use last part of service name (no dots allowed)\r\n\r\n## Version 1.0.3-RC1\r\n\r\nFeatures\r\n* Command line parameter `--new-odata' is deprecated and has no effect any more (it is ignored).\r\n  Providing this parameter __will lead to an error in future versions__, so please don't use it anymore\r\n* New command line parameter `--odata-preprocessing`: For internal testing only (displays intermediate CSN).\r\n* CSN now contains a `version` attribute (no strict semantic versioning yet, though)\r\n* Allow \"inline CSDL JSON\" attributes to be transported through CSN to EDM annotations (still limited to a few use cases)\r\n* Allow managed associations with `--to-hana` (work in progress)\r\n* More semantic checks for actions and functions\r\n* Support for multiple services in one model. This results in changes to the return value of `cdsv.toOdataOutput` resp. `toTntSpecificOutput`.\r\n  EDMX results (metadata and annotations) are now provided per-service in a dictionary `services`. For backward compatibility, the old return\r\n  value attributes are additionally provided if there is only one service. This __will be abandoned in future versions__.\r\n* Support for entities with parameters in EDMX\r\n\r\nFixes\r\n* Fiori annotation translation for OData v2: Correctly set xmlns attribute for EntitySet annotations\r\n* EDMX generation for actions/functions: Correctly set attribute `EntitySet` in `FunctionImport` or `ActionImport` if the return type is entity or array of entity\r\n* TNT-specific: Ignore annotation \"CoreModel\" in the translation to EDMX\r\n* Various fixes for ReferentialConstraints in EDMX\r\n\r\n## Version 1.0.2\r\n\r\nFeatures\r\n* `implemented in <id>`: Allow wider range of identifier; using `calcview` as identifier is deprecated and __will lead to an error in one of the next versions__,\r\n  please\r\nchange to another identifier\r\n* Allow literals in ON-condition of unmanaged associations\r\n* Name resolution in association definition\r\n\r\nFixes\r\n* Alerts are now sent to `stderr`\r\n* Correct rendering of type `Time` in EDMX v2\r\n\r\n## Version 1.0.1-MS1\r\n\r\nFeatures\r\n* New implementation of name resolution (according to [spec](doc/NameResolution.md)\r\n* Support for bound and unbound actions and functions\r\n* More semantic checks\r\n* Support for `implemented in` (HANA)\r\n* EDMX generation now also for ODATA V4\r\n\r\nFixes\r\n* `skip` options of TNT-flavor now working correctly (TNT only)\r\n* Fixed bug affecting elements called `items` (TNT only)\r\n* Correctly handle `TypeDefinition` in annotations EDMX\r\n\r\n## Version 1.0.0-MS9\r\n\r\nFeatures\r\n* Support for bound functions\r\n* EDMX annotations: Support pseudo-nested annotations, multiple enum values\r\n* New option `--export-annos-ui5-style` for localized annotations\r\n\r\nFixes\r\n* Various fixes for annotation assignment checks\r\n* HANA CDS output now with source files like original (fixes issues with `using`)\r\n* Fixed multiplicity for EDMX V2\r\n* EDMX output: Reject ON-conditions that cannot be expressed in EDMX, reject structured elements, allow service-less input\r\n* EDMX annotation generation: More checks, better error messages\r\n* Compiler: Better handling of errors on top of errors\r\n\r\n## Version 1.0.0-MS8\r\n\r\nFeatures\r\n* First primitive type checks with '--check-model'\r\n\r\nFixes\r\n* TNT-specific: It is in fact `@com.sap.gtt.core.CoreModel.Indexable` that should not be propagated\r\n\r\n## Version 1.0.0-MS7\r\n\r\nFixes\r\n* Render view target paths in HANA CDS output like in original source\r\n* Various fixes for EDMX generation (XML namespace headers, `EntitySet`, `EntityType`, multiplicity, ...)\r\n* Structured elements in projections not yet supported for `--to-hana`\r\n\r\nFeatures\r\n* TNT-specific: Do not propagate `@CoreModel.Indexable`\r\n* New primitive datatype `UUID`\r\n* New option `--check-model` (work in progress, starting with annotations)\r\n* Option `--odata-and-hana-output` now also produces combined V4 EDMX file\r\n\r\n## Version 1.0.0-MS6\r\n\r\nFixes\r\n* Really do not use plural form of entity names anywhere in ODATA\r\n* Properly complain about (most) incomplete/unsupported features\r\n\r\n## Version 1.0.0-MS5\r\n\r\nFixes\r\n* Use all `using` declarations for HANA CDS\r\n* Do not use plural form of entity names for EntitySet in ODATA\r\n\r\n## Version 1.0.0-MS4\r\n\r\nFeatures\r\n* Allow multiple `ReferentialConstraint` nodes for ODATA (`--new-odata` only)\r\n* Support `abstract`, `BaseType`, `TypeDefinition` for ODATA (`--new-odata` only)\r\n* Digest association `ON`-conditions properly\r\n* Support default values for entity elements\r\n* Allow projections with actions\r\n* Support `implemented in` for entities\r\n* Produce combined EDMX file, too (containing both metadata and annotations)\r\n* Support `redirected to` for associations in projections\r\n* Allow CSN files as compiler input\r\n\r\nFixes\r\n* Preserve original order for elements and actions in EDMX\r\n* Handle association cardinality properly for HANA CDS output\r\n* New implementation of EDMX annotation processor\r\n* Handle HANA-specific primitive types correctly (`LocalDate`, `UTCDateTime`, ...)\r\n\r\n## Version 1.0.0-MS3\r\n\r\nDelivery\r\n* Now available as scoped module `@sap/cdsv`\r\n\r\nFeatures\r\n* New command line option `--odata-and-hana-output <dir>` to produce EDMX, HANA CDS and CSN output\r\n* New command line option `--new-odata` to select the new ODATA backend implementation\r\n* New command line option `--odatav4` to produce EDMX metadata with ODADA V4\r\n\r\n## Version 1.0.0-MS2\r\n\r\nFeatures:\r\n* Allow property files as compiler input (for i18n)\r\n* Support managed associations with explicit foreign keys (for ODATA)\r\n\r\nFixes:\r\n* Improved automatic re-targeting of associations based on exposure\r\n* Correct EDMX annotations for `Communication.Contact`\r\n* Complete EDMX primitive type support\r\n* Handle `one/many` cardinality correctly in HANA CDS output\r\n* Provide complete type properties for projection elements\r\n* Add `indexNo` also for action parameters\r\n* Handle `self`-associations correctly in EDMX\r\n\r\n## Version 1.0.0-MS1\r\n\r\nFeatures:\r\n* Allow multiple includes for entities\r\n\r\nMiscellaneous:\r\n* Improvements for delivery\r\n* Cleanup of TNT-specific and not-yet-really-supported features\r\n\r\n<!-- markdownlint-disable -->\r\n\r\n## Version 0.0.5: Make cdsv usable for early adopters like TNT\r\n\r\nMake TNT usage case work:\r\n*   Produce special output for TNT: `annotations.xml`, `metadata.xml` and `csn.json`.\r\n*   Add full TNT model, and smaller TNT examples as tests\r\n    → produce same output as produced by prototype.\r\n*   Adopt CSN format to a format expected by TNT (with option `--tnt-flavor`)\r\n\r\nExtended functionality:\r\n*   Support property files for internationalization (export and import).\r\n*   Support generation of CDL (CDS language source) from CSN,\r\n    with or without transformations to make it HANA-CDS compatible.\r\n*   Started support to compile CSN files together with CDL files.\r\n\r\nGeneral compiler things:\r\n*   Introduce options for (temporary) language variants: `--tnt-flavor`, `--hana-flavor`.\r\n*   Support `extend` and `annotate`, and includes.\r\n*   Support projections.\r\n*   Support actions with their parameters.\r\n*   Support annotation variants and all syntax variants for annotation assignments.\r\n    Support propagation of annotation assignments.\r\n*   Support all type expressions with potential errors.\r\n*   Parse DCL constructs (no further processing yet).\r\n\r\nMiscellaneous:\r\n*   Provide `Promise`-less API.\r\n*   Start with some (internal) documentation.\r\n*   Much more tests.\r\n*   Remove RND-inspired grammar.\r\n*   Miscellaneous fixes and improvements.\r\n\r\n## Version 0.0.4: Adapt ANTLR4 error strategy, use all HANA-CDS tests\r\n\r\nAdapt ANTLR4 error strategy and related things:\r\n*   Allow _unreserved keywords_ as identifier without listing them in error messages if an identifier is expected (but do list those which are to be matched as keywords!).\r\n*   Match even _reserved keywords_ as identifier (with message in the future?) if there is no alternative.\r\n*   Avoid excessive use of ANTLR's adaptive prediction, as it would slow down the parser\r\n    (done in grammar, there is a test which ensure that it stays that way).\r\n*   Proper `xmake` configuration to generate lexer and parser.\r\n*   PEG.js-based parser is discontinued.\r\n\r\nUse all HANA-CDS standalone tests:\r\n*   Cover the complete HANA-CDS language.\r\n    The main grammar use wildcards just for the `SERIES` and `TECHNICAL CONFIGURATION` section of entity definitions.\r\n    (There is currently a second, much slower, grammar without wildcards, which is a one-to-one transformation of the RND grammar for HANA-CDS.)\r\n*   Tests show completeness of parsing (except the wildcard use, see above),\r\n    CSN-output equivalence (on specified parts) for 80% of the test cases.\r\n\r\n## Version 0.0.3: ANTLR4-based Parser and Lexer\r\n\r\nPEG.js-based parser still used by default, because it does not need Java to build.\r\nCurrently, we have a small ANTLR grammar in \"final style\",\r\nand a full ANTLR grammar in \"HANA-CDS style\".\r\n\r\n## Version 0.0.2: Define and Resolve – Augmented CSN\r\n\r\nFunctionality:\r\n\r\n*   Multi-file support with `namespace`/`nameprefix` and `using` declarations\r\n*   Context, entity, type, annotation, and element definitions\r\n*   Types: builtin (also with parameters), derived, structure types\r\n*   Unchecked annotation assignments (with absolute name calculation according to spec)\r\n*   All values: null, bool, number, string and other quoted literals (`x`, `date`, `time`, `timestamp`),\r\n    enum symbols, structure (top-level are flattened for annotation assignments) and arrays\r\n*   \"Define\": merge source ASTs, set `name.absolute` and `_parent` links,\r\n*   \"Resolve\" for main artifacts: set `type.absolute` and `_artifact` links\r\n*   Dependency cycle detection with exact error positioning\r\n*   Compact JSON: for \"official\" CSN and tests\r\n\r\nEnvironment:\r\n\r\n*   Integration with xmake\r\n*   Checked accoding to our eslint rules\r\n*   Full tests: invocation, negative, positive\r\n\r\n\r\n## Version 0.0.1: Package Setup & Initial Grammar\r\n\r\nDone:\r\n*   `Promise` orchestration for asynchronous file processing,\r\n*   avoid checking-in the generated parser,\r\n*   proper whitespace handling in the grammar,\r\n*   source location in AST, location includes filename\r\n*   easy-to-use standard AST creation\r\n\r\nOur **`Promise` orchestration** must support the intended error policy:\r\n*   We do not mix error categories, e.g.,\r\n    we do not output syntax/semantic errors in CDS files\r\n    if the command invocation itself is wrong.\r\n*   Inside one error category, we (intend to) list as many errors as possible,\r\n    e.g. when two given files do not exist and another one is provided repeatedly,\r\n    we report all these 3 errors at once.\r\n\r\nWe **do not include the generated parser**:\r\n*   As we have no `npm publish` phase at the moment,\r\n    we list the parser generator `pegjs` in `package.json`→`dependencies` and\r\n    run the parser generation in `package.json`→`scripts/postinstall`.\r\n*   If the product is published,\r\n    we list the parser generator `pegjs` in `package.json`→`devDependencies` and\r\n    run the parser generation in `package.json`→`scripts/prepublish`.\r\n\r\nParsers generated by [PEG.js](http://pegjs.org) are without tokenizer –\r\nthis looks cool at first, but leads to some problems:\r\n\r\n*   Still open: Error reporting is less then ideal –\r\n    if the intended top-level context definition start with `contxt`, you just see one char after `but`:\r\n        Expected \"context\", … but \"c\" found.\r\n    See the grammar for a potential future hack to cover at least the most common occurrences.\r\n*   We always need to think about correct whitespace handling.\r\n    See the initial comment in the grammar for details and common patterns. (_Solved_).\r\n*   In rules ending with optional whitespaces,\r\n    we need to adjust the end location – it should not include the final whitespaces!\r\n    See the initial comment in the grammar for details. (_Solved_).\r\n\r\nAs an **alternative**, we could look at Antlr3.JavaScript, Antlr4.JavaScript, or RND.JavaScript.\r\n"},{"name":"CHANGELOG_BETA.md","content":"# ChangeLog of Beta Features for cdx compiler and backends\r\n\r\n<!-- markdownlint-disable MD024 -->\r\n<!-- markdownlint-disable MD004 -->\r\n<!-- (no-duplicate-heading)-->\r\n\r\nNote: `beta` fixes, changes and features are listed in this ChangeLog just for information.\r\nThe compiler behavior concerning `beta` features can change at any time without notice.\r\n**Don't use `beta` fixes, changes and features in productive mode.**\r\n\r\n## Version 3.0.0 - 2022-XX-YY\r\n\r\n### Removed `addTextsLanguageAssoc`\r\n\r\nInstead, use the option `addTextsLanguageAssoc`, which is available since v2.8.0.\r\n\r\n## Version 2.12.0 - 2022-01-25\r\n\r\n### Added `sqlSnippets`\r\n\r\n- to.sql/hdi/hdbcds: Introduce the annotations `@sql.prepend` and `@sql.append` that allow inserting user-written SQL snippets into the compiler generated content.\r\n\r\n## Version 2.11.0 - 2021-12-02\r\n\r\n### Removed `foreignKeyConstraints`\r\n\r\n## Version 2.10.4 - 2021-11-05\r\n\r\n### Fixed `nestedProjections`\r\n\r\n- to.sql/hdi/hdbcds: Correctly handle a `*` at the not-first place in the query\r\n\r\n## Version 2.6.0 - 2021-08-23\r\n\r\n### Removed `pretransformedCSN`\r\n\r\n### Removed `renderSql`\r\n\r\n### Removed `keylessManagedAssoc`\r\n\r\nThis is now the default - see CHANGELOG entry for 2.6.0\r\n\r\n### Fixed `nestedProjections`\r\n\r\n- to.sql/hdi/hdbcds: now work correctly when nested projections are used\r\n\r\n### Fixed `foreignKeyConstraints`\r\n\r\n- Always use the name of the association / backlink compared to\r\n  `$self` as name suffix for a constraint\r\n- Composition of one always result in:\r\n  + ON DELETE RESTRICT\r\n  + ON UPDATE RESTRICT\r\n- Composition of one w/o backlink will result in a constraint in\r\n  the entity where the composition is defined\r\n\r\n## Version 2.4.4 - 2021-07-02\r\n\r\n### Added `nestedProjections`\r\n\r\n- Support `expand`: columns can look like `assoc_or_struct_or_tabalias { col_expression1, … }`,\r\n  `longer.ref as name { *, … } excluding { … }`, `{ col_expression1 as sub1, … } as name`, etc.\r\n- Support `inline`: columns can look like `assoc_or_struct_or_tabalias.{ col_expression1, … }`,\r\n  `longer.ref[filter = condition].{ *, … } excluding { … }`, `assoc_or_struct_or_tabalias.*`, etc.\r\n- _Some checks are missing and will be added! Minor changes might occur._\r\n- **The SQL backends might not work properly yet if nested projections are used!**\r\n\r\n## Version 2.4.2 - 2021-07-01\r\n\r\n### Added `keylessManagedAssoc`\r\n\r\n- Support managed associations without foreign keys. Associations targeting a definition without primary keys or with an\r\n  explicit empty foreign key tuple or with empty structured elements as foreign keys and their corresponding `$self`\r\n  comparisons do not describe the relationship between the source and the target entity.\r\n  These associations can be used to establish API navigations but cannot be used to access elements in the target\r\n  entity as they cannot be transformed into a valid JOIN expression.\r\n  Consequently, these associations are not added to the `WITH ASSOCIATIONS` clause or forwarded to HANA CDS.\r\n  Managed Associations without foreign keys must be enabled with `--beta: keylessManagedAssoc`\r\n\r\n## Version 2.4.0 - 2021-06-28\r\n\r\n### Changed `foreignKeyConstraints`\r\n\r\n- `toSql`/`toHdbcds`: omit constraint generation if the option `skipDbConstraints` is set\r\n- If the database constraints are switched off by the global option,\r\n  render constraints nevertheless if an association / composition\r\n  is annotated with `@cds.persistency.assert.integrity: true`\r\n- omit constraint generation if an association / composition\r\n  is annotated with `@cds.persistency.assert.integrity: false`\r\n  -> for managed compositions, the `up_` link in the compositions target entity\r\n  will not result in a constraint if the composition is annotated as described\r\n\r\n## Version 2.0.8\r\n\r\n### Added `foreignKeyConstraints`\r\n\r\nto.sql/to.hdi: If the beta option `foreignKeyConstraints` is supplied,\r\nreferential constraints are generated for compliant associations and compositions.\r\n\r\n## Version 2.0.2\r\n\r\n### Removed `dontRenderVirtualElements`\r\n\r\nVirtual elements are no longer rendered in views as `null as <id>` or\r\nadded to potentially generated draft tables. This behavior can be turned off\r\nwith deprecated option `renderVirtualElements` for backward compatibility.\r\n\r\n### Removed `originalKeysForTemporal`\r\n\r\n### Removed `odataDefaultValues`\r\n\r\nOData: Default values for EntityType properties are rendered always.\r\n\r\n### Removed `subElemRedirections`\r\n\r\nThis option is now enabled by default.\r\n\r\n### Removed `keyRefError`\r\n\r\n## Version 1.44.0\r\n\r\n### Added `addTextsLanguageAssoc`\r\n\r\nWhen the beta option `addTextsLanguageAssoc` is set to true and\r\nthe model contains an entity `sap.common.Languages` with an element `code`,\r\nall generated texts entities additionally contain an element `language`\r\nwhich is an association to `sap.common.Languages` using element `locale`.\r\n\r\n## Version 1.43.0\r\n\r\n### Changed `subElemRedirections`\r\n\r\nWhen the beta option `subElemRedirections` is set to true,\r\n_all_ array (new!) and structure types are expanded when referenced:\r\nmanaged associations (and compositions to entities) in that array are\r\nimplicitly redirected when necessary.\r\nSee [below for details](#version-1300---20200612).\r\n\r\nNested array types (without intermediate structure types) are not supported.\r\n\r\n### Added `ignoreAssocPublishingInUnion`\r\n\r\nFor `to.hdbcds`, with beta flag `ignoreAssocPublishingInUnion` in conjunction with dialect\r\n`hanaJoins`, unmanaged associations in UNIONs are silently ignored and managed associations\r\nare replaced by their foreign keys and silently ignored\r\n\r\n## Version 1.36.0 - 2020-08-07\r\n\r\n### Added `mapAssocToJoinCardinality`\r\n\r\nAnalog to the feature `cardinality for explicit joins`, the association to\r\njoin transformation algorithm now experimentally supports join cardinalities as well.\r\nThe default cardinality `MANY TO ONE` is added to the join node if no cardinality has\r\nbeen specified.\r\n\r\n### Added `odataDefaultValues`\r\n\r\nOData: Enables the rendering of default values for EntityType properties.\r\n\r\n### Added `originalKeysForTemporal`\r\n\r\nOData: The original entity keys are not enhanced with `@cds.valid.from` or replaced with\r\n`@cds.valid.key` elements. The `@Core.AlternateKeys` only mentions the `@cds.valid.key` element.\r\n\r\n### Added `dontRenderVirtualElements`\r\n\r\nVirtual elements are no longer rendered in views as `null as <id>` or added to potentially generated\r\ndraft tables. This behavior can be turned off with `renderVirtualElements` for backward compatibility.\r\n\r\n### Removed `noJoinsForForeignKeys`\r\n\r\nThe association to join transformation treats foreign key accesses with priority now.\r\n\r\n### Removed `uniqueconstraints`\r\n\r\nUnique constraints are now generally available.\r\n\r\n## Version 1.33.0 - 2020-08-24\r\n\r\n### Added `hanaAssocRealCardinality`\r\n\r\nRender JOIN cardinality in native HANA association if provided. If no cardinality has been specified.\r\n\r\n## Version 1.32.0 - 2020-07-10\r\n\r\n### Removed `aspectCompositions`\r\n\r\nAspect compositions aka managed compositions are now avaible without beta option.\r\n_Warning_: the CSN representation can still change.\r\n\r\n## Version 1.31.0 - 2020-06-26\r\n\r\n### Changed `subElemRedirections`\r\n\r\nSignal an error\r\nif an unmanaged association as sub element is to be implicitly redirected,\r\nas we do not automatically rewrite the `on` condition in that situation yet.\r\n\r\n## Version 1.30.0 - 2020-06-12\r\n\r\n### Added `subElemRedirections`\r\n\r\nWhen the beta option `subElemRedirections` is set to true,\r\n_all_ structure types are expanded when referenced:\r\n\r\n- managed associations (and compositions to entities) are implicitly redirected\r\n  when necessary,\r\n- sub elements of referred structure types can be annotated individually,\r\n- the resulting CSN is bigger (will be reduced in the future if possible)\r\n  as `type` references to structures will now have a sibling `elements`.\r\n\r\nThis option does not enable:\r\n\r\n- rewriting the `on` conditions of associations in sub elements,\r\n- aspect compositions as sub elements,\r\n- `localized` sub elements,\r\n- `key` property on sub elements.\r\n\r\n## Version 1.23.0\r\n\r\n### Added `keyRefError`\r\n\r\nAlways signal an error (instead of just a warning in some cases),\r\nif not all references in the `keys` of an managed associations\r\nare projected in the new target.\r\n"},{"name":"CHANGELOG_DEPRECATED.md","content":"# ChangeLog of deprecated Features for cdx compiler and backends\r\n\r\n<!-- markdownlint-disable MD024 -->\r\n<!-- (no-duplicate-heading)-->\r\n\r\nNote: `deprecated` features are listed in this ChangeLog just for information.\r\n`deprecated` features will be removed after a certain grace period.\r\n\r\n**Use `deprecated` features only transitional in productive mode.**\r\n\r\n**When the `deprecated` option is set, the `beta` option is ignored,\r\nand several new features are not available.**\r\n\r\n## Version 3.0.0 - 2022-XX-YY\r\n\r\nVersion 3 of the cds-compiler removes all v2 deprecated flags.\r\n\r\n### Removed `createLocalizedViews`\r\n\r\n### Removed `downgradableErrors`\r\n\r\n### Removed `generatedEntityNameWithUnderscore`\r\n\r\n### Removed `longAutoexposed`\r\n\r\n### Removed `noElementsExpansion`\r\n\r\n### Removed `noInheritedAutoexposeViaComposition`\r\n\r\n### Removed `noScopedRedirections`\r\n\r\n### Removed `oldVirtualNotNullPropagation`\r\n\r\n### Removed `parensAsStrings`\r\n\r\n### Removed `projectionAsQuery`\r\n\r\n### Removed `redirectInSubQueries`\r\n\r\n### Removed `renderVirtualElements`\r\n\r\n### Removed `shortAutoexposed`\r\n\r\n### Removed `unmanagedUpInComponent`\r\n\r\n### Removed `v1KeysForTemporal`\r\n\r\n## Version 2.13.0 - 2022-03-22\r\n\r\n### Added `redirectInSubQueries`\r\n\r\nWhen this option is set, we auto-redirect associations and composition also in\r\nnon-main queries, sometimes without rewriting the `keys`/`on` (there will be no\r\nfix for this).\r\n\r\n### Added `oldVirtualNotNullPropagation`\r\n\r\nWhen this option is set, we do not propagate `notNull` along types.\r\nAdditionally, we propagate `notNull` and `virtual` from a query source element\r\nto the sub elements of a query entity element, even if the property is not\r\npropagated to the query entity element itself (like with type references).\r\n\r\n\r\n## Version 2.2.0\r\n\r\n### Added `noScopedRedirections`\r\n\r\nWhen this option is set, the definition scope is not taken into account when\r\ntrying to find an implicit redirection target.  Setting the following\r\ndeprecated options also switches off scoped redirections (additionally to their\r\nother effect): `noElementsExpansion`, `generatedEntityNameWithUnderscore`,\r\n`shortAutoexposed`, `longAutoexposed`, `noInheritedAutoexposeViaComposition`.\r\n\r\n### Added `noInheritedAutoexposeViaComposition`\r\n\r\nWhen this option is set, only entities directly specified after `Composition of` are\r\nauto-exposed, not entities used as target via explicit or implicit `redirected to`.\r\n\r\n## Version 2.0.16\r\n\r\n### Added `downgradableErrors`\r\n\r\nAllow to change the severity of some errors which should stay to be an error.\r\n\r\n### Added `shortAutoexposed`\r\n\r\nWhen this option is set (and `generatedEntityNameWithUnderscore`), the names of\r\nautoexposed entities are calculated according to the default compiler v1\r\nbehavior (without v1 options `dependentAutoexposed` and `longAutoexposed`).\r\n\r\n## Version 2.0.10\r\n\r\n### Added `longAutoexposed`\r\n\r\nWhen this option is set (and `generatedEntityNameWithUnderscore`),\r\nthe names of autoexposed entities are calculated according to the\r\ncompiler v1 option `longAutoexposed`.\r\n\r\n### Added `generatedEntityNameWithUnderscore`\r\n\r\nKeep using `_` is separator for generated autoexposed entities and for entities\r\ncreated for managed compositions.  It also disables a definition `A.B.C` if `A`\r\nor `A.B` is a definition other than a context or service (v1 behavior).\r\n\r\n## Version 2.0.4-ms1\r\n\r\n### Added `createLocalizedViews`\r\n\r\nAdd localized convenience views in `for.odata`.\r\n\r\n### Added `unmanagedUpInComponent`\r\n\r\nRender association `up_` in composition component unmanaged.\r\n\r\n## Version 2.0.2-ms1\r\n\r\n### Added `renderVirtualElements`\r\n\r\nVirtual elements are no longer rendered in views as `null as <id>` or added to potentially generated\r\ndraft tables. This behavior can be turned off with `renderVirtualElements` for backward compatibility.\r\n\r\n### Added `parensAsStrings`\r\n\r\nRepresent parentheses in expressions with `'('` and `')'` in `xpr` arrays\r\ninstead of using nested `xpr`s or `list`.\r\n\r\n### Added `v1KeysForTemporal`\r\n\r\nRender old and broken temporal EDM API.\r\n\r\n### Added `noElementsExpansion`\r\n\r\nWhen setting it, association in sub elements are not automatically redirected,\r\nand the sub elements cannot be annotated indivually.\r\n\r\nDo not use this.  Setting it might avoid some compile errors,\r\nbut in most cases the reported errors are rightly reported.\r\n\r\n### Added `projectionAsQuery`\r\n\r\nRender `projection` as `query` in CSN.\r\n"},{"name":"CommandLineMigration.md","content":"# Command Line Migration\r\n\r\n> Status Oct 2019: this document is still basically valid.\r\n> The future version of this document (renamed to `CommandLine.md`) will basically explain the recommended CLI options,\r\n> the migration will only be a minor aspect and explained in a later section.\r\n\r\n<!-- The option handling might also change: -->\r\n<!-- the backend-specific structure is overly complex and not always appriopriate (e.g. naming mode). -->\r\n<!-- The placement of options should not depend on a not always apparent distinction between command-specific and general options. -->\r\n\r\n\r\nWith revision 1.5.1, the `cdsc` command line interface has been adapted to use commands with\r\noptions.\r\n\r\nUsage is now `cdsc <command> [options] <files...>` instead of `cdsc [options] <file...>`.\r\n\r\nThe generation options (`--toHana`, `--toSql`, ...) have been replaced by commands\r\n(`toHana`, `toSql`, ...). This allows for better per-command options, which can now be optional,\r\ncan use more single-letter abbreviations, and now match those from the `options` object in the API.\r\n\r\nSome examples:\r\n\r\n| Old command line        | New command line                           |\r\n| -------------------------- | --------------------------------------------- |\r\n| `cdsc --new-csn --toHana csn,plain foo.cds` | `cdsc --new-csn toHana --csn --names plain foo.cds` |\r\n| `cdsc -R --H csn,plain foo.cds` | `cdsc -R H -c -n plain foo.cds` |\r\n| `cdsc --toOdata xml,v2,separate foo.cds` | `cdsc toOdata --xml --version v2 --separate foo.cds` |\r\n| `cdsc --toSql src foo.cds` | `cdsc toSql foo.cds` |\r\n| `cdsc foo.cds` | `cdsc foo.cds` |\r\n\r\nList of commands (as of v1.5.1):\r\n\r\n```\r\n  Commands\r\n    H, toHana [options] <files...>     Generate HANA CDS source files\r\n    O, toOdata [options] <files...>    Generate ODATA metadata and annotations\r\n    C, toCdl <files...>                Generate CDS source files\r\n    S, toSwagger [options] <files...>  Generate Swagger (OpenAPI) JSON\r\n    Q, toSql [options] <files...>      Generate SQL DDL statements\r\n       toCsn [options] <files...>      (default) Generate original model as CSN\r\n       toTntSpecificOutput <files...>  (internal) Generate TNT-specific post-processed CSN\r\n       toRename [options] <files...>   (internal) Generate SQL DDL rename statements\r\n```\r\n\r\nPlease see `cdsc --help` for the list of commands and general options, or `cdsc <command> --help`\r\nfor help regarding a specific command.\r\n\r\n## Some helpful hints\r\n\r\nPlease note the following general concepts regarding the new command line:\r\n- General options can be placed anywhere, command specific options must appear after the command.\r\n- In the unlikely case that a file name starts with `-`, please use `--` to indicate the end of options.\r\n- The `src` argument of `toHana`, `toCdl`, `toSql` is now optional (and it would now be `--src`).  \r\n- If no command is specified, the default is `toCsn --flavor client` (as before).\r\n- When no `--out` option is provided or if `-` is specified as output directory , all output will\r\n  go to `<stdout>` instead of being written to files (like before).\r\n- The `--raw-output` option also affects all commands where a CSN file is generated.\r\n  Instead of `...csn.json`, a `...csn_raw.txt` will be produced (like before).\r\n"},{"name":"DeprecatedOptions.md","content":"# Deprecated Options and How to Avoid Them\r\n\r\nTo ease the migration to CDS Compiler Version 2,\r\nthe compiler can be called with an option `deprecated`\r\nwhich make the compiler behave more like Compiler Version 1 for certain features.\r\n\r\nAs the name suggest, this option should be used only for a limited time.\r\nThe support for certain v1 features might also be dropped after a while\r\n(without an increase of the compiler major version).\r\n\r\n__When the `deprecated` option is set, the `beta` option is ignored,\r\nand several new features are not available.__\r\n\r\nThe value of the option `deprecated` is a dictionary\r\nmapping v1 feature names to (usually boolean) values.\r\nThis document lists all those features,\r\nand describes what you can do instead of setting these features.\r\n\r\n\r\n## Deprecated features influencing the name of generated entities\r\n\r\nThe `compile()` function generates entities in the following cases:\r\n\r\n1. When an element in an entity is specified to be `localized`,\r\n   it creates a __texts entity__ for that entity.\r\n2. For managed composition of aspects,\r\n   it creates a __target entity__ based on the provided target aspect.\r\n3. A projection in a service is automatically generated\r\n   for correspondingly tagged entities in the model (which is then “__auto-exposed__”)\r\n   if an association/composition to the model entity is to be _implicitly redirected_\r\n   to an exposed entity in the service and no such entity exists yet.\r\n\r\nAs a short example for 1 and 3 (2 is similar to 1):\r\n\r\n```\r\nentity my.Model.Base {\r\n  key id: UUID;\r\n  text: localized String;\r\n}\r\nservice our.Service {\r\n  entity Proj as projection on my.Model.Base;\r\n}\r\n```\r\n\r\nThe compiled model contains the following generated entities:\r\n\r\n* the text entity `my.Model.Base.texts`,\r\n  which is a composition target of the generated element `my.Model.Base:texts`\r\n* the auto-exposed projection `our.Service.Proj.texts`\r\n  which is a composition target of `our.Service.Proj:texts`\r\n\r\nFor the following sub sections (and in general), is is important to understand that\r\nyou can define all auto-exposed entities yourself (well, they are not\r\n_auto_-exposed anymore)\r\n_without_ any difference in the compiled model\r\nexcept for the sequence of entities in `‹csn›.definitions`.  \r\nThat means, you can append the following line to the above example:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Proj.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nThe annotation `@cds.autoexposed` ensures that this self-exposed entity\r\nreally behaves exactly like an auto-exposed entity:\r\n\r\n* it is only used as a direct redirection target, not as an indirect one\r\n  (a detailed explanation of this topic is out-of-scope for this document),\r\n* runtimes also attach a runtime semantics to the annotation `@cds.autoexposed`.\r\n\r\nThus, if you do not like the name of the generated auto-exposed entity,\r\nyou can simply __expose the model entity__ yourself and choose the name you like.\r\n__Never ever__ define a projection on the auto-exposed entity,\r\nwhich has worked in v1 versions and in the v2.1.x versions in certain situations.\r\n\r\n\r\n### Deprecated `generatedEntityNameWithUnderscore`\r\n\r\nWith compiler v1,\r\nthe generated entities had no suffix starting with a `.` like `.texts` for texts entities,\r\nbut a suffix starting with a `_`.\r\n\r\nIf you have a reference to a generated entity in your model,\r\nyou now have to change the model accordingly.  \r\nFor example, if you had for v1\r\n\r\n```\r\nusing { my.Model.Base, my.Model.Base_texts } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base_texts;\r\n}\r\n```\r\n\r\nyou now have to write for v2 (you see that it is usually actually simpler now)\r\n\r\n```\r\nusing { my.Model.Base } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base.texts;\r\n}\r\n```\r\n\r\nIf you are a CSN consumer and analyse the compiled model, you might need\r\nto adopt your code for the name change from `my.Model.Base_texts` to `my.Model.Base.texts`.\r\n\r\nIn the following areas, nothing will change:\r\n\r\n* In the OData backend,\r\n  the “new” `.`s are replaced by `_`s to make the names conform to the OData naming rules.  \r\n  In other words, the EDMX (for the generated entities) looks the same as with v1.\r\n* In the SQL/Hana backends,\r\n  the “new” `.`s are also replaced by `_`s to adopt to HANA CDS naming restrictions\r\n  (with the standard naming mode `plain`, all `.`s are replaced by `_`s anyway).  \r\n  In other words, no texts table migration will take place.\r\n\r\nBut anyway, you might temporarily want to keep the v1 behavior\r\nby setting the option `deprecated.generatedEntityNameWithUnderscore`.\r\nIf you do so, scoped definitions are not possible (like they aren't in v1).\r\n\r\n### Deprecated `shortAutoexposed`\r\n\r\nIn compiler v1 without an option\r\n(especially the v1 option `dependentAutoexposed` which basically leads the v2 default behavior),\r\nthe name for auto-exposed entities were constructed by\r\nadding the name part after the last `.` to the service name.\r\n\r\nThat is, for the above example,\r\nthe auto-exposed projection on `my.Model.Base_texts` (in v1) is named\r\n`our.Service.Base_texts` in v1.\r\n\r\nYou can temporarily enable that behavior in v2 by setting the options\r\n`deprecated.generatedEntityNameWithUnderscore` and `deprecated.shortAutoexposed`.\r\n\r\nIf you just set `deprecated.shortAutoexposed`, you get `our.Service.Base.texts`.\r\n\r\nIf you really need that name (instead of the v2 name `our.Service.Proj.texts`),\r\nyou can expose the texts entity manually instead of setting the deprecated option:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Base.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nAgain, never define a projection on the auto-exposed entity –\r\nyou get an error for that starting with compiler v2.2.0\r\n(and earlier for certain definition sequences anyway, actually in v1 also).\r\n"},{"name":"DeprecatedOptions_v2.md","content":"# Deprecated Options and How to Avoid Them\r\n\r\n__Important__: With compiler v3, these deprecated options were removed!\r\n\r\nTo ease the migration to CDS Compiler Version 2,\r\nthe compiler can be called with an option `deprecated`\r\nwhich makes the compiler behave more like Compiler Version 1 for certain features.\r\n\r\nAs the name suggest, this option should be used only for a limited time.\r\nThe support for certain v1 features might also be dropped after a while\r\n(without an increase of the compiler major version).\r\n\r\n__When the `deprecated` option is set, the `beta` option is ignored,\r\nand several new features are not available.__\r\n\r\nThe value of the option `deprecated` is a dictionary\r\nmapping v1 feature names to (usually boolean) values.\r\nThis document lists all those features,\r\nand describes what you can do instead of setting these features.\r\n\r\n\r\n## Deprecated features influencing the name of generated entities\r\n\r\nThe `compile()` function generates entities in the following cases:\r\n\r\n1. When an element in an entity is specified to be `localized`,\r\n   it creates a __texts entity__ for that entity.\r\n2. For managed composition of aspects,\r\n   it creates a __target entity__ based on the provided target aspect.\r\n3. A projection in a service is automatically generated\r\n   for correspondingly tagged entities in the model (which is then “__auto-exposed__”)\r\n   if an association/composition to the model entity is to be _implicitly redirected_\r\n   to an exposed entity in the service and no such entity exists yet.\r\n\r\nAs a short example for 1 and 3 (2 is similar to 1):\r\n\r\n```\r\nentity my.Model.Base {\r\n  key id: UUID;\r\n  text: localized String;\r\n}\r\nservice our.Service {\r\n  entity Proj as projection on my.Model.Base;\r\n}\r\n```\r\n\r\nThe compiled model contains the following generated entities:\r\n\r\n* the text entity `my.Model.Base.texts`,\r\n  which is a composition target of the generated element `my.Model.Base:texts`\r\n* the auto-exposed projection `our.Service.Proj.texts`\r\n  which is a composition target of `our.Service.Proj:texts`\r\n\r\nFor the following sub sections (and in general), is is important to understand that\r\nyou can define all auto-exposed entities yourself (well, they are not\r\n_auto_-exposed anymore)\r\n_without_ any difference in the compiled model\r\nexcept for the sequence of entities in `‹csn›.definitions`.  \r\nThat means, you can append the following line to the above example:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Proj.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nThe annotation `@cds.autoexposed` ensures that this self-exposed entity\r\nreally behaves exactly like an auto-exposed entity:\r\n\r\n* it is only used as a direct redirection target, not as an indirect one\r\n  (a detailed explanation of this topic is out-of-scope for this document),\r\n* runtimes also attach a runtime semantics to the annotation `@cds.autoexposed`.\r\n\r\nThus, if you do not like the name of the generated auto-exposed entity,\r\nyou can simply __expose the model entity__ yourself and choose the name you like.\r\n__Never ever__ define a projection on the auto-exposed entity,\r\nwhich has worked in v1 versions and in the v2.1.x versions in certain situations.\r\n\r\n\r\n### Deprecated `generatedEntityNameWithUnderscore`\r\n\r\nWith compiler v1,\r\nthe generated entities had no suffix starting with a `.` like `.texts` for texts entities,\r\nbut a suffix starting with a `_`.\r\n\r\nIf you have a reference to a generated entity in your model,\r\nyou now have to change the model accordingly.  \r\nFor example, if you had for v1\r\n\r\n```\r\nusing { my.Model.Base, my.Model.Base_texts } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base_texts;\r\n}\r\n```\r\n\r\nyou now have to write for v2 (you see that it is usually actually simpler now)\r\n\r\n```\r\nusing { my.Model.Base } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base.texts;\r\n}\r\n```\r\n\r\nIf you are a CSN consumer and analyse the compiled model, you might need\r\nto adopt your code for the name change from `my.Model.Base_texts` to `my.Model.Base.texts`.\r\n\r\nIn the following areas, nothing will change:\r\n\r\n* In the OData backend,\r\n  the “new” `.`s are replaced by `_`s to make the names conform to the OData naming rules.  \r\n  In other words, the EDMX (for the generated entities) looks the same as with v1.\r\n* In the SQL/Hana backends,\r\n  the “new” `.`s are also replaced by `_`s to adopt to HANA CDS naming restrictions\r\n  (with the standard naming mode `plain`, all `.`s are replaced by `_`s anyway).  \r\n  In other words, no texts table migration will take place.\r\n\r\nBut anyway, you might temporarily want to keep the v1 behavior\r\nby setting the option `deprecated.generatedEntityNameWithUnderscore`.\r\nIf you do so, scoped definitions are not possible (like they aren't in v1).\r\n\r\n### Deprecated `shortAutoexposed`\r\n\r\nIn compiler v1 without an option\r\n(especially the v1 option `dependentAutoexposed` which basically leads the v2 default behavior),\r\nthe name for auto-exposed entities were constructed by\r\nadding the name part after the last `.` to the service name.\r\n\r\nThat is, for the above example,\r\nthe auto-exposed projection on `my.Model.Base_texts` (in v1) is named\r\n`our.Service.Base_texts` in v1.\r\n\r\nYou can temporarily enable that behavior in v2 by setting the options\r\n`deprecated.generatedEntityNameWithUnderscore` and `deprecated.shortAutoexposed`.\r\n\r\nIf you just set `deprecated.shortAutoexposed`, you get `our.Service.Base.texts`.\r\n\r\nIf you really need that name (instead of the v2 name `our.Service.Proj.texts`),\r\nyou can expose the texts entity manually instead of setting the deprecated option:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Base.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nAgain, never define a projection on the auto-exposed entity –\r\nyou get an error for that starting with compiler v2.2.0\r\n(and earlier for certain definition sequences anyway, actually in v1 also).\r\n"},{"name":"doc","nodes":[{"name":"ApiMigration.md","content":"# API Migration\r\n\r\n> Status Oct 2019: this document is still valid, but the recommended API will change (again) in the near future.\r\n> The future version of this document (renamed to `API.md`) will basically explain the recommended API,\r\n> the migration will only be a minor aspect and explained in a later section.\r\n\r\n<!-- The option handling might also change: -->\r\n<!-- the backend-specific structure is overly complex and not always appriopriate (e.g. naming mode). -->\r\n\r\nWith revision 1.0.24, the CDS compiler offers new API backend functions, i.e. new functions for the\r\ngeneration of output from (augmented) CSN models. The new functions and their options are closely\r\naligned with the new command line interface `cdsc`. The old backend functions are deprecated, will\r\nnot be extended with new features, and will be removed in a subsequent release. Note that only these\r\nAPI functions from `lib/main.js` are supported - **all internal functions are subject to change without\r\nnotice**.\r\n\r\nPlease see the function headers in `lib/backends.js` for a description of the new API functions (for a\r\nsnapshot of the current version, see below).\r\n\r\n## Some helpful hints\r\n\r\nPlease note the following general concepts regarding the new API functions:\r\n- The behavior of the compiler and of all backend API functions is controlled by a common `options` object,\r\n  with subsections for each backend function, e.g. `options: {toHana: {src: true}, toOdata: {version: 'v2'}}`.\r\n- Options can either be specified with one of the `compile` functions (transported within the model to the\r\n  backends), or explicitly at the invocation of a backend API function.\r\n- Options are merged, with precedence given to those specified explicitly at the backend API functions.\r\n- When invoking a backend function with options that all belong to this backend function, the subsection wrapper\r\n  can be omitted, i.e. `toHana(model, {toHana: {src: true}})` is equivalent to `toHana(model, {src: true})`.\r\n- Most backend API functions have a combination of options controlling _what_ is generated\r\n  (e.g. `toHana: {src: true}`) and options modifying  _how_ things are generated (e.g. `toOdata: {version: 'v2'}`).\r\n\r\n## Migration guide\r\n\r\nThe following table shows replacements for the deprecated API functions (relying on default options where possible):\r\n\r\n| Deprecated function call   | New function call                           |\r\n| -------------------------- | ------------------------------------------- |\r\n| `toHanaCdl(model)` | `toHana(model)`|\r\n| `forHana(model)` | `toHana(model, {csn: true})`|\r\n| `toOdataOutput(model, {oDataVersion: 'v2'}` | `toOdata(model, {version: 'v2', xml: true, json: true, separate: true, combined: true, csn: true})`|\r\n| `toSqlDdl(model)` | `toSql(model)`|\r\n| `compactJson(model)` | `toCsn(model)`|\r\n\r\n## Changes in behavior\r\n\r\nThe following changes have been made to the behavior of `toOdata` in comparison to `toOdataOutput`:\r\n- Output is now generated either for ODATA V2 or for V4. The old `toOdataOutput` function produced the `annotations` output with\r\n  an extra invocation of the backend using `oDataVersion: 'v4'` even if the original invocation specified `oDataVersion: 'v2'`,\r\n  resulting in slightly different output. The `combined` output always had the correct versioning.\r\n- The `metadata_json` output is now an object, not a string.\r\n\r\n## Snapshot of backend API function documentation\r\n\r\nNote that these backend API functions are all exposed in `lib/main.js` (which is **the only external API**), but\r\ntheir documentation is currently located in `lib/backends.js` (this will likely change).\r\n\r\n### `toHana(model, options)`\r\n\r\n```\r\n// Transform an augmented CSN 'model' into HANA-compatible CDS source.\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     toHana.names        : either 'plain' (generate uppercased flattened entity names with\r\n//                           underscores) or 'quoted' (default, generate entity names with nested\r\n//                           contexts as in CDL)\r\n//     toHana.associations : either 'assocs' (default, keep associations as they are if possible)\r\n//                           or 'joins' (replace associations by joins)\r\n//     toHana.src          : if true, generate HANA CDS source files (default)\r\n//     toHana.csn          : if true, generate the transformed CSN model\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\n// If 'toHana.names' is not provided, 'quoted' is used.\r\n// If 'toHana.associations' is not provided, 'assocs' is used.\r\n// If neither 'toHana.src' nor 'toHana.csn' are provided, the default is to generate only HANA CDS\r\n// source files.\r\n// If all provided options are part of 'toHana', the 'toHana' wrapper can be omitted.\r\n// The result object contains the generation results as follows (as enabled in 'options'):\r\n//   result : {\r\n//     csn               : the (compact) transformed CSN model\r\n//     _augmentedCsn     : (subject to change): the augmented CSN model\r\n//     hdbcds            : a dictionary of top-level artifact names, containing for each name 'X':\r\n//       <X>             : the HANA CDS source string of the artifact 'X'. Please note that the\r\n//                         name of 'X' may contain characters that are not legal for filenames on\r\n//                         all operating systems (e.g. ':', '\\' or '/').\r\n//     messages          : an array of strings with warnings (if any)\r\n//   }\r\nfunction toHana(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toOdata(model, options)`\r\n\r\n```\r\n// Generate ODATA for augmented CSN `model` using `options`.\r\n// Before anything is generated, the following transformations are applied to 'model':\r\n// FIXME: Verify that this is still correct\r\n// - Flatten structured elements (and foreign keys of managed associations pointing to\r\n//   keys that are themselves managed associations).\r\n// - Generate foreign key fields for entities with managed associations (annotated with\r\n//   '@odata.foreignKey4'). Propagate along projections accordingly. Names are built using\r\n//   <assoc>_<key>, conflicts are checked.\r\n// - Complete the 'foreignKeys' property for all managed associations, so that there\r\n//   is always a 'generatedFieldName' for the corresponding generated foreign key field.\r\n// - Implicitly redirect associations based on exposure\r\n// - Check that exposed associations do not point to non-exposed targets\r\n// - Unravel derived type chains, propagating annotations upwards.\r\n// - Rename annotations according to a fixed list of short-hands\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     toOdata.version     : either 'v2' or 'v4' (default)\r\n//     toOdata.xml         : if true, generate XML output (default)\r\n//     toOdata.json        : if true, generate JSON output (not available for ODATA V2)\r\n//     toOdata.separate    : if true, generate XML 'metadata' and XML 'annotations' separately\r\n//     toOdata.combined    : if true, generate XML metadata and XML annotations together as\r\n//                           'combined' (default)\r\n//     toOdata.csn         : if true, generate the transformed CSN model\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\n// If 'toOdata.version' is not provided, 'v4' is used.\r\n// If neither 'toOdata.xml' nor 'toOdata.json' nor 'toOdata.csn' are provided, the default is\r\n// to generate only XML output. If neither 'toOdata.separate' nor 'toOdata.combined' are provided,\r\n// the default is to generate only combined XML output.\r\n// If all provided options are part of 'toOdata', the 'toOdata' wrapper can be omitted.\r\n//\r\n// The result object contains the generation results as follows (as enabled in 'options'):\r\n//   result : {\r\n//     csn               : the (compact) transformed CSN model including all services\r\n//     _augmentedCsn     : (subject to change): the augmented CSN model including all services\r\n//     services          : a dictionary of service names, containing for each name:\r\n//       <servicename> : {\r\n//         annotations   : an XML string with EDMX annotations for service 'svc'\r\n//         metadata      : an XML string with EDMX metadata for service 'svc'\r\n//         combined      : an XML string with both EDMX metadata and annotations for service 'svc'\r\n//         metadata_json : a JSON object (not a string!) with EDM metadata for service 'svc'\r\n//       }\r\n//     messages          : an array of strings with warnings (if any)\r\n//   }\r\n// If 'model' does not contain any services, 'csn' will still contain the transformed model, but\r\n// 'services' will be an empty dictionary.\r\n//\r\n// Throws a CompilationError on errors.\r\nfunction toOdata(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toCdl(model, options)`\r\n\r\n```\r\n// Generate CDS source text for augmented CSN model 'model'.\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     FIXME: This option should be removed and something like 'toCdl.dialect: 'hana' be\r\n//            used instead.\r\n//     hanaFlavor : if true, HANA-specific source dialect is generated (affects e.g. the\r\n//                  translation of '$self.foo' in paths and ::-ish namespace declarations)\r\n//   }\r\n// One source is created per top-level artifact.\r\n// Return a dictionary of top-level artifacts\r\n// by their names, like this:\r\n// { \"foo\" : \"using XY; context foo {...};\",\r\n//   \"bar::wiz\" : \"namespace bar::; entity wiz {...};\"\r\n// }\r\n// Throws a CompilationError on errors.\r\nfunction toCdl(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toSwagger(model, options)`\r\n\r\n```\r\n// Generate OpenAPI JSON version 3 for the augmented CSN 'model'.\r\n// Return an object representing the Swagger JSON:\r\n// {\r\n//   openapi: '3.0.0',\r\n//   info: { ... },\r\n//   paths: { ...},\r\n//   components: {\r\n//     schemas: { ... }\r\n//   }\r\n// }\r\n//\r\n// Throws a CompilationError on errors.\r\nfunction toSwagger(model, options) {\r\n  ...\r\n}\r\n```\r\n\r\n### `toSql(model, options)`\r\n\r\n```\r\n// Generate SQL DDL statements for augmented CSN 'model'.\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     toSql.names         : either 'plain' (generate uppercased flattened table/view names with\r\n//                           underscores) or 'quoted' (default, generate quoted table/view names\r\n//                           with dots as in CDL)\r\n//     toSql.associations  : either 'assocs' (default, keep associations as they are if possible)\r\n//                           or 'joins' (replace associations by joins)\r\n//     toSql.src           : if 'sql', generate SQL DDL source files (default)\r\n//     toSql.csn           : if true, generate the transformed CSN model\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\n// If 'toSql.names' is not provided, 'quoted' is used.\r\n// If 'toSql.associations' is not provided, 'assocs' is used.\r\n// If neither 'toSql.src' nor 'toSql.csn' are provided, the default is to generate only SQL DDL\r\n// source files.\r\n// If all provided options are part of 'toSql', the 'toSql' wrapper can be omitted.\r\n// The result object contains the generation results as follows (as enabled in 'options'):\r\n//   result : {\r\n//     csn               : the (compact) transformed CSN model\r\n//     _augmentedCsn     : (subject to change): the augmented CSN model\r\n//     sql               : a dictionary of top-level artifact names, containing for each name 'X':\r\n//       <X>             : a string with SQL DDL statements for artifact 'X', terminated with ';'.\r\n//                         Please note that the name of 'X' may contain characters that are not\r\n//                         legal for filenames on all operating systems (e.g. ':', '\\' or '/').\r\n//     messages          : an array of strings with warnings (if any)\r\n//   }\r\n// Throws a CompilationError on errors.\r\n```\r\n\r\n### `toCsn(model, options)`\r\n\r\n```\r\n// Generate compact CSN for augmented CSN 'model'\r\n// The following options control what is actually generated:\r\n//   options : {\r\n//     testMode : if true, the result is extra-stable for automated tests (sorted, no 'version')\r\n//   }\r\n// Options provided here are merged with (and take precedence over) options from 'model'.\r\nfunction toCsn(model, options) {\r\n  ...\r\n}\r\n```\r\n"},{"name":"CHANGELOG_ARCHIVE.md","content":"<!-- markdownlint-disable -->\r\n# ChangeLog for cdx compiler and backends (Archive)\r\n\r\nNote: `beta` fixes, changes and features are usually not listed in this ChangeLog.\r\nThe compiler behaviour concerning `beta` features can change at any time without notice.\r\n\r\n## Version 2.11.4 - 2021-12-21\r\n\r\n### Fixed\r\n\r\n- CDL parser: in many situations, improve message when people use reserved keywords as identifier\r\n- Improve error text and error location for ambiguous auto-redirection target\r\n- to.sql/hdi/hdbcds:\r\n  + Correctly detect `exists` in projections\r\n  + Correctly handle elements starting with `$` in the on-condition of associations\r\n  + Correctly handle sub queries in an entity defined with `projection on`\r\n  + Correctly handle associations in sub queries in a `from` of a sub query\r\n  + foreign key constraints: respect @assert.integrity: false for compositions\r\n- to.hdbcds: Correctly quote elements named `$self` and `$projection`\r\n- to.cdl: `when` was added to the keyword list for smart quoting\r\n- Compiler support for code completion for `$user` and `$session` now respect user\r\n  provided variables in `options.variableReplacements`.\r\n- API: `deduplicateMessages()` no longer removes messages for `duplicate` artifact/annotation errors.\r\n  Prior to this version, only one of the duplicated artifacts had a message, leaving the user to\r\n  guess where the other duplicates were.\r\n\r\n\r\n## Version 2.11.2 - 2021-12-06\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds:\r\n  + No foreign key constraint will be rendered for managed `composition of one` if annotated with `@assert.integrity: false`\r\n  + Correctly handle managed associations with other managed associations as foreign keys in conjunction with `exists`\r\n\r\n## Version 2.11.0 - 2021-12-02\r\n\r\n### Added\r\n\r\n- Option `defaultBinaryLength` to set a `length` type facet for all definitions with type `cds.Binary`. This option\r\n  overrides the default binary length in the database backends and is also used as `MaxLength` attribute in Odata.\r\n- If doc-comments are ignored by the compiler, an info message is now emitted.  A doc-comment is ignored,\r\n  if it can't be assigned to an artifact.  For example for two subsequent doc-comments, the first doc-comment\r\n  is ignored.  To suppress these info messages, explicitly set option `docComment` to `false`.\r\n- `cdsc`:\r\n  + `cdsc explain list` can now be used to get a list of message IDs with explanation texts.\r\n  + `cdsc` now respects the environment variable `NO_COLOR`. If set, no ANSI escape codes will be used.\r\n    Can be overwritten by `cdsc --color always`.\r\n- to.sql/hdi: Support SQL Window Functions\r\n- to.sql/hdi/hdbcds:\r\n  + Support configuration of `$session` and `$user` via option `variableReplacements`.\r\n  + Restricted support for SQL foreign key constraints if option `assertIntegrityType` is set to `\"DB\"`.\r\n    The behavior of this feature might change in the future.\r\n\r\n### Changed\r\n\r\n- Updated OData vocabularies 'Common' and 'UI'.\r\n- to.sql/hdi/hdbcds: The default length of `cds.Binary` is set to `5000` similar to `cds.String`.\r\n\r\n### Removed\r\n\r\n- to.hdbcds: Doc comments on view columns are not rendered anymore. Doc comments on string literals will make the deployment fail\r\n  as the SAP HANA CDS compiler concatenates the doc comment with the string literal. Besides that, doc comments on view columns\r\n  are not transported to the database by SAP HANA CDS.\r\n- to.hdbcds/sql/hdi: Forbid associations in filters after `exists` (except for nested `exists`), as the final behavior is not yet specified.\r\n\r\n### Fixed\r\n\r\n- CSN parser: doc-comment extensions are no longer ignored.\r\n- Properly check for duplicate annotation definitions.\r\n- Correctly apply annotations on inherited enum symbols.\r\n- Correctly apply annotations on elements in an inherited structure array.\r\n- Fix a bug in API `defaultStringLength` value evaluation.\r\n- Fix crash if named arguments are used in a function that's inside a `CASE` statement.\r\n- to.sql/hdi/hdbcds:\r\n  + Properly flatten ad-hoc defined elements in `returns` / `params` of `actions` and `functions`.\r\n  + Correctly handle `*` in non-first position.\r\n  + Correctly handle action return types\r\n  + Correctly handle mixin association named `$self`\r\n- to.cdl: doc-comments are no longer rendered twice.\r\n- to.edm(x):\r\n  + Fix a bug in V2/V4 partner ship calculation.\r\n  + Remove warning of unknown types for Open Types in `@Core.Dictionary`.\r\n  + An empty CSN no longer results in a JavaScript type error\r\n\r\n## Version 2.10.4 - 2021-11-05\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds:\r\n  + Correctly complain about `exists` in conjunction with non-associations/compositions\r\n  + Don't resolve types in action returns, as this causes issues with $self-resolution\r\n\r\n- to.edm(x): Be robust against transitively untyped keys in stacked view hierarchies\r\n\r\n## Version 2.10.2 - 2021-10-29\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds: Correctly handle `exists` in conjunction with mixin-associations\r\n\r\n## Version 2.10.0 - 2021-10-28\r\n\r\n### Added\r\n\r\n- Support arbitrary paths after `$user` - similar to `$session`.\r\n- Support scale `floating` and `variable` for `cds.Decimal` in CDL and CSN. Backend specific handling is descibed in their sections.\r\n- Allow select item wildcard (`*`) in a `select`/`projection` at any position, not just the first.\r\n\r\n- to.edm(x):\r\n  + In Odata V4 generate transitive navigation property binding paths along containment hierarchies and terminate on the\r\n    first non-containment association. The association target is either an explicit Edm.EntitySet in the same EntityContainer\r\n    or in a referred EntityContainer (cross service references) or an implicit EntitySet identified by the containment path\r\n    originating from an explicit EntitySet. This enhancement has an observable effect only in structured format with containment\r\n    turned on.\r\n  + Support for scales `variable` and `floating`:\r\n    + V4: `variable` and `floating` are rendered as `Scale=\"variable\"`. Since V4 does not support `floating`, it is aproximated as `variable`.\r\n    + V2: `variable` and `floating` are announced via property annotation `sap:variable-scale=\"true\"`\r\n  \r\n- to.sql/hdi/hdbcds:\r\n  + Reject scale `floating` and `variable`.\r\n  + Reject arbitrary `$user` or `$session` paths that cannot be translated to valid SQL.\r\n  + Following a valid `exists`, further `exists` can be used inside of the filter-expression: `exists assoc[exists another[1=1]]`\r\n  + `exists` can now be followed by more than one association step.\r\n  `exists assoc.anotherassoc.moreassoc` is semantically equivalent to `exists assoc[exists anotherassoc[exists moreassoc]]`\r\n\r\n### Changed\r\n\r\n- to.odata: Inform when overwriting draft action annotations like `@Common.DraftRoot.ActivationAction`.\r\n\r\n## Version 2.9.0 - 2021-10-15\r\n\r\n### Changed\r\n\r\n- to.edm(x): Raise `odata-spec-violation-type` to a downgradable error.\r\n\r\n### Fixed\r\n\r\n- to.edm(x):\r\n  + Fix a bug in annotation propagation to foreign keys.\r\n  + Don't render annotations for not rendered stream element in V2.\r\n- to.hdi:\r\n  + for naming mode \"hdbcds\" and \"quoted\" parameter definitions are not quoted anymore.\r\n- to.hdi/sql/hdbcds:\r\n  + Correctly handle explicit and implicit alias during flattening.\r\n  + Raise an error for `@odata.draft.enabled` artifacts with elements without types - instead of crashing with internal assertions.\r\n\r\n## Version 2.8.0 - 2021-10-07\r\n\r\n### Added\r\n\r\n- Allow defining unmanaged associations in anonymous aspects of compositions.\r\n- Enable extensions of anonymous aspects for managed compositions of aspects.\r\n- When the option `addTextsLanguageAssoc` is set to true and\r\n  the model contains an entity `sap.common.Languages` with an element `code`,\r\n  all generated texts entities additionally contain an element `language`\r\n  which is an association to `sap.common.Languages` using element `local`.\r\n- for.odata:\r\n  + In `--odata-format=flat`, structured view parameters are flattened like elements.\r\n- to.hdbcds\r\n  + Use \"smart quotes\" for naming mode \"plain\" - automatically quote identifier which are reserved keywords or non-regular.\r\n\r\n### Changed\r\n\r\n- for.odata:\r\n  + In `--data-format=structured`, anonymous sub elements of primary keys and parameters are set to `notNull:true`,\r\n    an existing `notNull` attribute is _not_ overwritten. Referred named types are _not_ modified.\r\n- to.edm(x):\r\n  + Improve specification violation checks of (nested) keys:\r\n    + All (sub-)elements must be `Nullable: false` (error).\r\n    + Must represent a single value (error).\r\n    + In V4 must be a specification compliant Edm.PrimitiveType (warning).\r\n- to.hdi/hdbcds/sql: $user.\\<xy\\> now has \\<xy\\> added as alias - \"$user.\\<xy\\> as \\<xy\\>\"\r\n\r\n### Fixed\r\n\r\n- Properly generate auto-exposed entities for associations in parameters.\r\n- Correctly apply extensions to anonymous array item types.\r\n- Correctly apply/render annotations to anonymous action return types.\r\n- With CSN flavor `plain` (`gensrc`), correctly render annotations on elements\r\n  of referred structure types as `annotate` statements in the CSN's `extensions` property.\r\n- to.cdl:\r\n  + Correctly render extensions on array item types\r\n  + Correctly render annotations on action return types\r\n- to/for: Correctly handle CSN input where the prototype of objects is not the \"default\"\r\n- to.hdi:\r\n  + for naming mode \"hdbcds\" and \"quoted\" parameter definitions are now quoted.\r\n  + for naming mode \"plain\", smart quotation is applied to parameter definitions if they are reserved words.\r\n- to.hdi/hdbcds/sql:\r\n  + Ensure that cdl-style casts to localized types do not lose their localized property\r\n  + Fix a small memory leak during rendering of SQL/HDBCDS.\r\n- to.edm(x): Remove ambiguous `Partner` attribute from `NavigationProperty`. A forward association referred\r\n  to by multiple backlinks (`$self` comparisons) is no longer partner to an arbitrary backlink.\r\n\r\n## Version 2.7.0 - 2021-09-22\r\n\r\n### Added\r\n\r\n- to.hdi.migration:\r\n  + Support changes to HANA comments.\r\n\r\n### Changed\r\n\r\n- Updated OData vocabularies 'Common', 'Core'\r\n\r\n### Fixed\r\n\r\n- Fix memory issue: do not keep reference to last-compiled model.\r\n- Fix dump which occured when trying to report that the user has defined an element to be both `key` and `localized` if\r\n  `localized` was inherited via the provided type, or in the generated entity for a managed composition of aspect.\r\n- Properly auto-expose targets of associations in parameters and `many`.\r\n- for.Odata:\r\n  + Fix handling of annotation `@cds.odata.valuelist` in conjunction with associations in structures using flat-mode and sqlMapping set to plain.\r\n  + Set correctly the $localized property in the OData backend resulting CSN for artifacts that have localized convenience views.\r\n- to.edm(x):\r\n  + Fix rendering of structured referential constraints and nested partnerships in combination with `$self` comparisons.\r\n  + Fix merging of `@Capabilities` annotations while transforming them into `NavigationCapabilities` from the containee into the container.\r\n- to.sql/hdi/hdbcds:\r\n  + Fix a bug in Association to Join translation in multi-level association redirection in combination with `$self`.\r\n  + Correctly flatten paths with filters or parameters.\r\n  + Improve error message in case of invalid `exists`.\r\n\r\n## Version 2.6.2 - 2021-08-26\r\n\r\n### Fixed\r\n\r\n- to.sql/hdi/hdbcds/edm(x)/for.odata: Correctly handle tuple expansion in subqueries of Unions.\r\n\r\n## Version 2.6.0 - 2021-08-23\r\n\r\n### Added\r\n\r\n- Support managed associations without foreign keys. Associations targeting a definition without primary keys or with an\r\n  explicit empty foreign key tuple or with empty structured elements as foreign keys and their corresponding `$self`\r\n  comparisons do not describe the relationship between the source and the target entity.\r\n  These associations can be used to establish API navigations but cannot be used to access elements in the target\r\n  entity as they cannot be transformed into a valid JOIN expression.\r\n  Consequently, these associations are not added to the `WITH ASSOCIATIONS` clause or forwarded to HANA CDS.\r\n- to.sql/hdi/hdbcds/edm(x)/for.odata: Structure/managed association comparisons (tuple comparisons) are now\r\n  also expanded in infix filters, all expressions and all on-conditions.\r\n- to.hdbcds: Better locations for messages - mostly concerning keywords and duplicates\r\n\r\n### Changed\r\n\r\n- to.sql/hdi/hdbcds: Invalid (i.e. not expandable) usage of structures is now checked - an error is raised\r\n\r\n### Removed\r\n\r\n- The internal non-enumerable CSN property `$env` has been removed from the compiled CSN.\r\n\r\n### Fixed\r\n\r\n- Make `;` optional before `}` in all circumstances (was not the case with `many`).\r\n- to.sql/hdi/hdbcds/edm(x): More graceful handling of CSN input where associations do not have `keys` or an `on`-condition\r\n\r\n## Version 2.5.2 - 2021-08-10\r\n\r\n### Fixed\r\n\r\n- to.hdbcds: Fixed a bug introduced with 2.5.0 that caused virtual elements to be rendered in views.\r\n\r\n## Version 2.5.0 - 2021-07-28\r\n\r\n### Added\r\n\r\n- Allow to extend existing array annotation values via the ellipsis operator `...`.\r\n  An ellipsis may appear exactly once at an arbitrary position in the top level array\r\n  of an `annotate` directive. Only array values can be merged into arrays and unapplied\r\n  ellipses are removed from the final array value. Annotation layering rules remain unaffected.\r\n- to.sql/hdi/hdbcds:\r\n  + Doc comments are translated into HANA comments (or into `@Comment` annotation for `to.hdbcds`).\r\n  Such comments are possible on entities, views, elements of entities and `to.hdbcds` also supports comments on view columns.\r\n  Generation can be disabled via option `disableHanaComments`. Entites/views (and their elements/columns)\r\n  annotated with `@cds.persistence.journal` for `to.hdi`/`to.sql` will not have comments rendered.\r\n  + Generation of temporal `WHERE` clause can be suppressed by annotating the `validFrom`/`validTo` elements of the projection with `false` or `null`.\r\n- to.sql/hdi/hdbcds/edm(x)/for.odata: Structure/managed association comparisons (tuple comparisons) are now\r\n  also expanded in `WHERE` and `HAVING` - this was previously only supported in on-conditions.\r\n- `cdsc` now internally uses SNAPI.\r\n- to.hdi.migration:\r\n  + Validate that the two supplied CSNs are compatible.\r\n  + Improve delta-mechanism to not render superflous [ALTER|DROP|ADD] statements for unchanged SQL.\r\n\r\n### Changed\r\n\r\n- If the first source provided to the compile command has a `$sources` property\r\n  (whether enumerable or not) which is an array of strings,\r\n  use that instead of calculating one.\r\n- Updated OData vocabularies 'Aggregation', 'Analytics', 'Authorization', 'Capabilities',\r\n  'CodeList', 'Common', 'Communication', 'Core', 'Graph', 'HTML5', 'Measures', 'ODM', 'PersonalData',\r\n  'Repeatability', 'Session', 'UI', 'Validation'\r\n\r\n### Removed\r\n\r\n- Removed internal property `$viaTransform` from CSN produced by OData/HANA transformation\r\n\r\n### Fixed\r\n\r\n- Remove warnings 'Ignoring annotation “@odata.draft.enabled” as the artifact is not part of a service'\r\n  and 'Ignoring draft node for composition target ... because it is not part of a service'\r\n- Doc comments are no longer ignored after enum values and on view columns in parseCdl mode.\r\n- to.cdl:\r\n  + Doc comments for enum values are correctly rendered.\r\n  + Enum value and doc comments are now correctly rendered if the enum is called `doc`.\r\n  + Doc comments at type references are correctly rendered.\r\n  + Empty doc comments are correctly rendered and not left out.\r\n  + Doc comments on view columns are correctly rendered.\r\n- to.edm(x):\r\n  + OData V2: Ignore `@odata.singleton`.\r\n  + OData V4: Do not render an `edm:NavigationPropertyBinding` to a singleton if the association has\r\n    cardinality 'to-many'.\r\n- forOData:\r\n  + Fix automatic renaming of shortcut annotation (eg. `@label`) with value `null`.\r\n- CSN parser:\r\n  + Empty doc comments are correctly parsed and not complained about.\r\n\r\n## Version 2.4.4 - 2021-07-02\r\n\r\n### Fixed\r\n\r\n- Do not remove parentheses around single literals and references on the right-hand side of an `in` and `not in` operator.\r\n\r\n## Version 2.4.2 - 2021-07-01\r\n\r\n- Only changes to beta features. Refer to the [beta ChangeLog](doc/CHANGELOG_BETA.md#version-242) for more.\r\n\r\n## Version 2.4.0 - 2021-06-28\r\n\r\n### Added\r\n\r\n- to.edm(x):\r\n  + Warn if an `edm:Property` has no `Type` attribute.\r\n  + Warn about using the protected names 'Edm', 'odata', 'System', 'Transient' as `edm:Schema` `Namespace` values.\r\n  + Allow `$edmJson` inline annotations in `edm:Collection` and nested annotations.\r\n- to.hdi/sql/hdbcds: Transform a `exists <association>` into a `exists <subselect>`, where the subselect\r\n  selects from the target of `<association>` and establishes the same relation as `<association>` would via the WHERE clause.\r\n  Infix-filters of `<association>` are added to the WHERE clause.\r\n\r\n### Changed\r\n\r\n- Do not inherit `@cds.persistence.skip` when `@cds.persistence.table` is set on entity.\r\n- to.cdl: Opening and closing braces of empty services and contexts are now on the same line.\r\n\r\n### Fixed\r\n\r\n- `cdsc`: Option `--direct-backend` can now be combined with `toCsn`'s option `--with-localized`\r\n- The option `testSortCsn` was erroneously ignored in some compiler backends.\r\n\r\n## Version 2.3.2 - 2021-06-14\r\n\r\n### Fixed\r\n\r\n- for.odata: Propagate the `virtual` attribute correctly while flattening structures.\r\n- If internal relational types are used directly in CDL (e.g. `cds.Association`), an error is emitted.\r\n  In CSN, all artifacts of relational types need a `target` (/`targetAspect`) as well.\r\n- In Association to Join translation don't produce a JOIN node for exposed (transitive) associations in\r\n  combination with their exposed foreign keys. Also resolve foreign keys correctly against the target\r\n  entity allowing to expose renamed foreign keys when aliased.\r\n- The option `testSortCsn` (`--test-sort-csn` in `cdsc`) can be used to sort CSN definitions alphabetically.\r\n  This option is only intended for tests.  This will restore the pre-v2.3.0 ordering in EDMX.\r\n- to.sql:\r\n  + for SQL-dialect `sqlite`, render the string-format-time function (`strftime()`)\r\n    + `$at.from` with date-format: `'%Y-%m-%dT%H:%M:%S.000Z'`\r\n    + `$at.to` with date-format:  `'%Y-%m-%dT%H:%M:%S.001Z'` (**+1ms** compared to `$at.from`)\r\n  + for SQL-dialect `hana` wrap `SESSION_CONTEXT('VALID-TO')` and `SESSION_CONTEXT('VALID-FROM')` in `TO_TIMESTAMP(..)` function\r\n- to.hdbcds:\r\n  + Wrap `SESSION_CONTEXT('VALID-TO')` and `SESSION_CONTEXT('VALID-FROM')` in `TO_TIMESTAMP(..)` function\r\n\r\n## Version 2.3.0 - 2021-06-02\r\n\r\n### Added\r\n\r\n- `cdsc` got a new option `--fallback-parser <cdl|csn>` that is used\r\n  if an unknown or no file extension is used.\r\n- to.hdi/sql: Allow association publishing in UNIONs - this was previously forbidden, but this limitation only applies to HANA CDS.\r\n- to.edm(x): Support dynamic expressions as $edmJson inline code\r\n\r\n### Changed\r\n\r\n- Type `DecimalFloat` is no longer proposed for code-completion.\r\n- Non-string enums without values for their enum elements are warned about.\r\n- OData CSN is no longer sorted by definition names\r\n- to.edm(x): Update OData vocabularies 'Aggregation', 'Analytics', 'CodeList', 'Common', 'Measures', 'Session', 'UI'\r\n\r\n### Removed\r\n\r\n- to.hdbcds: Association publishing in subqueries is not supported by HANA CDS - an error is raised during compile time, instead of waiting for a deployment error.\r\n\r\n### Fixed\r\n\r\n- Correct auto-exposure in model with unscoped projection on deep scoped entity\r\n  (from managed aspect compositions: component in component, like they are common in ODM).\r\n- Internal types `cds.Association` and `cds.Composition` are no longer proposed for code-completion.\r\n- Fix various issues with Association to Join translation:\r\n  + Substitute `$self.alias` expressions and respect prefix paths in foreign key accesses.\r\n- to.hdbcds: In naming mode \"hdbcds\", correctly resolve $self backlinks with aliased foreign keys.\r\n- to.cdl:\r\n  + Correctly traverse subelements when rendering annotations for them.\r\n  + Quote element names (if required) in `annotate with` statements.\r\n- for.odata: Fix regression with detecting collision when generating foreign keys.\r\n- to.edmx: Correctly render final base types in EDMX V2 when called with transformed OData CSN for V4.\r\n\r\n## Version 2.2.8 - 2021-05-20\r\n\r\n### Fixed\r\n\r\n- Fix regression: also for associations _defined_ in a service, try to\r\n  implicitly redirect the provided model target.\r\n\r\n## Version 2.2.6 - 2021-05-12\r\n\r\n### Fixed\r\n\r\n- to.edmx(x):\r\n  + The reverted change \"`array of` elements are now allowed for OData V2, too.\" introduced with v2.2.0 has caused\r\n    regressions in various scenarios that used OData V4 processed CSN for OData V2 EDMX rendering. Therefore\r\n    the error has been lowered to a 'odata-spec-violation-array-of' warning.\r\n  + The fix 'Render constraints only if all principal keys are used in association' introduced with v2.2.2 has\r\n    caused regressions in mocking scenarios. With option `--odata-v2-partial-constr` partial constraint generation\r\n    can be reactivated. A 'odata-spec-violation-constraints' warning is raised.\r\n\r\n### 2.5.0 Addendum to Changed\r\n\r\n- Replace outdated option `length` with `defaultStringLength` which is usable in `for.*` and `to.*` APIs.\r\n\r\n\r\n## Version 2.2.4 - 2021-05-06\r\n\r\nNo changes compared to Version 2.2.2; fixes latest NPM tag\r\n\r\n## Version 2.2.2 - 2021-05-04\r\n\r\n### Fixed\r\n\r\n- Usually reserved names like `in` in references used as annotation values can now really\r\n  be provided without delimited identifiers (if the name is not `true`, `false` or `null`).\r\n- Fixed the implicit redirection of associations to scoped targets (like texts entities).\r\n- Fix regression: Allow virtual structured elements.\r\n- to.edm(x):\r\n  + OData V2:\r\n    + Remove warning about scalar return types.\r\n    + Render constraints only if all principal keys are used in association.\r\n  + OData V4: Don't remove `@Capabilities` annotations from containee.\r\n  + Allow `@Core.MediaType` on all types and raise a warning for those (scalar) types that can't be mapped to `Edm.String` or `Edm.Binary`.\r\n- to.cdl: Also handle subelement-annotations by rendering a `annotate X with Y`.\r\n- to.hdi/sql/hdbcds: Fixed the DB name (with naming mode `quoted`/`hdbcds`) and the `to.hdi` file name of scoped definitions (like `texts` entities)  in services.\r\n- Empty enums no longer result in a syntax error.\r\n\r\n## Version 2.2.0 - 2021-04-28\r\n\r\n### Added\r\n\r\n- The compiler now takes the “definition scope” of associations and compositions into account\r\n  when implicitly redirecting the target and auto-exposing entities.\r\n- odata: The warning `enum-value-ref` is no longer reclassified to an error.\r\n  However, references to other enum values are still not supported.\r\n\r\n### Changed\r\n\r\n- Remove special handling for implicit redirection to auto-exposed entity; consistently\r\n  do not overwrite user-specified target in a service anymore, also in this special case.\r\n- Structured/Arrayed types for enums are now an error and not just a warning.\r\n- to.cdl: Keywords in annotation paths are no longer escaped\r\n\r\n### Removed\r\n\r\n- Consistently reject references to auto-exposed entities except for `annotate`\r\n  (it might have worked before, depending on the sequence of definitions);\r\n  expose an entity manually if you want to refer to it.\r\n\r\n### Fixed\r\n\r\n- Do not omit indirectly annotated or redirected sub elements\r\n  during propagation of expanded sub elements.\r\n- Also auto-expose composition targets of projected compositions,\r\n  not just those target which were used at the original definition of the composition.\r\n- Improve checks for keys which are `array of` or of SAP HANA spatial type (`ST_POINT` & `ST_GEOMETRY`)\r\n  with checking also inside of used user-defined structured type.\r\n- to.edm(x):\r\n  + V2: `OnDelete=Cascade` was set on dependent instead on principal role.\r\n  + V4: ReferentialConstraints Property and ReferencedProperty for managed composition to one were swapped.\r\n\r\n### 2.2.6 Addendum to Changed\r\n\r\n- to.edm(x): Revert 2.1.0 change: \"`array of` elements are now allowed for OData V2, too.\"\r\n  OData V2 does not allow elements to be typed with `Collection()`. Any `many`\r\n  predicate in element definitions is rejected. The only two positions where the `many` predicate\r\n  is allowed are `association to many` and `returns many`.\r\n\r\n## Version 2.1.6 - 2021-04-14\r\n\r\n### Fixed\r\n\r\n- Do not unjustified complain about `$self` comparisons.\r\n- Auto-exposed entities are represented as projections in the CSN.\r\n- to.sql/to.hdi:\r\n  + Revert change \"Default values are no longer propagated from the principal to the generated foreign key element.\" from version 2.1.0\r\n  + Fix regression where localized convenience views for temporal entities used keys in the from clause that did not exist on the texts-entity\r\n  + Mixin associations are properly removed and are not rendered into views anymore\r\n- to.hdi(.migration): Ensure filenames for `.hdbindex` files stay compatible to V1\r\n- for.odata: An association as a type of action's parameter or return type now signals an error\r\n- to.edm(x):\r\n  + `@Capabilities` annotations remain on the containees entity type\r\n  + In containment mode don't render foreign keys of the containment constituting 'up' association in the containee\r\n    as primary key refs.\r\n  + Revert change \"Default values are no longer propagated from the principal to the generated foreign key element.\" from version 2.1.0\r\n  + Allow `--odata-proxies` and/or `--odata-x-service-refs` in combination with `--odata-format=flat` and `--version=v4`\r\n\r\n## Version 2.1.4 - 2021-03-31\r\n\r\n### Fixed\r\n\r\n- The postinstall step now never fails with an exit code != 0. As the postinstall step is optional, it should not break any `npm install` steps.\r\n\r\n## Version 2.1.2 - 2021-03-29\r\n\r\n### Fixed\r\n\r\n- ensure `postinstall` script is part of the shipped `package.json`\r\n\r\n## Version 2.1.0 - 2021-03-26\r\n\r\n### Added\r\n\r\n- Inferred sub elements of a referred structure type can be individually annotated.\r\n- All primitive types except for binary are now allowed as enum value types.\r\n- Allow users to define `A.B` even if there is a definition `A` which is not a context or service.\r\n- You can now provide almost all annotation assignments without delimited identifiers:\r\n  the use of `.`, `@` and `#` is fine for annotation names,\r\n  property names of structures, and in references used as annotation values.\r\n- for.odata:\r\n  + All the artifacts that have localized fields get a `$localized: true` property.\r\n  + Allow the user to define draft actions for annotation purposes\r\n    + `draftPrepare(SideEffectsQualifier: String) returns <ET>`,\r\n    + `draftActivate() returns <ET>`,\r\n    + `draftEdit(PreserveChanges: Boolean) returns <ET>`\r\n- to.edm(x):\r\n  + Warn about non-applicable annotations.\r\n  + Render property default values (only OData V4).\r\n  + Option `odataProxies` exposes association targets outside of the current service.\r\n    These `EntityType`s do only expose their primary keys have no accompanying `EntitySet`.\r\n    The added navigation targets are exposed under their namespace or if not available under namespace `root`.\r\n    `odataProxies` is only available with `--format=structured`.\r\n  + Option `odataXServiceRefs` renders an `edm:Reference` to the service for those navigation targets\r\n    that are defined in another service. `odataXServiceRefs` is only available with `--format=structured`.\r\n  + Duplicate EntityContainer entries with same name will raise an error.\r\n  + `array of` elements are now allowed for OData V2, too.\r\n- to.sql/hdi/hdbcds: Explicitly render the implicit alias for functions without arguments, e.g. `current_date`.\r\n- to.sql:\r\n  + Sort the SQL statements according to the deployment order.\r\n  + New sql dialect `plain`, which now is the default.\r\nsynchronously.\r\n- API:\r\n  + `compileSync()` is now compatible to `compile()`:\r\n    the function can also receive a file cache and will resolve all `using`s\r\n  + New API functions `parse.cql` (prefer it to deprecated `parseToCqn`) and\r\n    `parse.expr` (prefer it to deprecated `parseToExpr`)\r\n  + function `getArtifactCdsPersistenceName` now accepts a CSN as a third parameter (used to be a namespace). With a CSN provided,\r\n    the name can be correctly constructed for naming modes `quoted` and `hdbcds`. Without a CSN, the name is possibly wrong\r\n    if it contains dots. If the CSN is not provided or the third parameter is not a CSN, the old, deprecated, implementation is used.\r\n- `cdsc` and other client tools:\r\n  + Added `--with-localized` to the command `toCsn` which adds convenience views for localized entities to the output.\r\n  + A script `bin/cds_update_identifiers.js` was added. You can use it to update the delimited identifier style in your CDS sources.\r\n  + A script `bin/cdscv2m.js` was added.\r\n    It's command `ria` adds `@cds.redirection.target: false` annotate statements\r\n    for all ambiguous redirection errors.\r\n- Added `deprecated` options; setting any of them disables all `beta` options.\r\n\r\n### Changed\r\n\r\n- CSN representation:\r\n  + CSN Version is set to `2.0`\r\n  + CSN `definitions` are not sorted anymore\r\n  + `$syntax` is non-enumerable\r\n  + increase the use of JS numbers in the CSN for numbers in CDL, especially noticable in annotation values\r\n  + Annotation definitions are to be found in the top-level property `vocabularies`.\r\n  + Introduce `kind: 'aspect'` to replace `kind: 'type', $syntax: 'aspect'` and\r\n    `kind: 'entity', abstract: true` (the deprecated variants are still accepted as input).\r\n  + Projections are rendered via `projection` instead of `query.SELECT`.\r\n  + Parentheses are represented structurally and unnecessary parentheses are omitted.\r\n  + Use `.` instead of `_` for the name suffix of generated texts entities and the calculated entity for managed compositions.\r\n  + The CSN returned by `compile()` does not include localized convenience views anymore.\r\n- Core engine (function `compile`):\r\n  + An assignment `@Foo.Bar` is always `@Foo.Bar`, we do not try to search anymore\r\n    for a local definition of `Foo` probably having a different full name.\r\n  + Localized convenience views are no longer generated by the core compiler but added by the `for.odata`\r\n    and `to.sql/hdi/hdbcds` processing on demand.\r\n  + Minimize name clashes when calculating names for autoexposed entities,\r\n    extends the v1 option `dependentAutoexposed` to sub artifacts of entites (see “Added”).\r\n  + Ambiguities when redirecting associations now always lead to compile errors;\r\n    you might want to use the new annotation `@cds.redirection.target` to solve them.\r\n  + The association `up_` in the calculated entity for managed compositions is now managed.  \r\n    _Limitation_: Nested managed compositions are not activatable via `to.hdbcds --names=hdbcds`.\r\n  + Bound actions and functions are no longer propagated from the main query source to the resulting view or projection.\r\n  + Remove annotation `@cds.autoexpose` from generated `.texts` entity\r\n  + Require `order by` references to start with a table alias when referring to source elements.\r\n  + Infer the type of a `select` item from the type of a top-level `cast`.\r\n- Localized convenience views now also contain `masked` elements of the original artifact.\r\n- for.odata:\r\n  + Even with `--format: structured`, (flat) foreign keys for managed associations are generated.\r\n  + An `entity` or an `aspect` defined outside the current service cannot be used as action parameter or return types.\r\n  + Structured elements are expanded in-place.\r\n  + Foreign keys for managed associations are created in-place.\r\n- to.edm(x):\r\n  + An `Edm.TypeDefinition` is rendered for a derived scalar type and used as type reference instead of\r\n    rendering the final scalar type, including the `array of`/`many` predicates.\r\n  + `enum` type definition as service member is rendered as `edm:TypeDefinition` instead of `edm:EnumType`.\r\n  + Set default source cardinality of compositions to exact one. This is observable in V2 EDM only.\r\n  + Key must not be `nullable=true`, this includes all sub elements of used structured types.\r\n  + Default values are no longer propagated from the principal to the generated foreign key element.\r\n  + `array of array` is rejected, nested Collections `Collection(Collection(...))` are illegal.\r\n  + Temporal rendering:\r\n    + `@cds.valid.from` is not `Edm.KeyRef` anymore.\r\n    + `@cds.valid.key` is rendered as `@Core.AlternateKeys`.\r\n  + Downgrade message \"`<Term>` is not applied\" from warning to info.\r\n  + Update Vocabularies 'Aggregation', 'Capabilities', 'Core', 'Validation'.\r\n- to.sql/to.hdi/to.hdbcds:\r\n  + Reject using associations or compositions in query elements starting with `$self` or `$projection`.\r\n  + Virtual elements are not rendered.\r\n  + Structured elements are expanded in-place.\r\n  + Foreign keys for managed associations are created in-place.\r\n  + Implicit/CDL-style casts are not rendered as SQL CASTs.\r\n  + All association usages in queries are always translated into JOIN expressions\r\n    (except for to.hdbcds `--names=hdbcds`).\r\n- to.sql/to.hdi:\r\n  + Downgrade message `to-many-no-on` from error to warning.\r\n  + Default values are no longer propagated from the principal to the generated foreign key element.\r\n- to.sql:\r\n  + Changed type mappings for `--dialect=sqlite`:\r\n    + `cds.Date` -> `DATE_TEXT`\r\n    + `cds.Time` -> `TIME_TEXT`\r\n    + `cds.Timestamp` -> `TIMESTAMP_TEXT`\r\n    + `cds.DateTime` -> `TIMESTAMP_TEXT`\r\n    + `cds.Binary` -> `BINARY_BLOB`\r\n    + `cds.hana.Binary` -> `BINARY_BLOB`\r\n  + Don't check missing type facets.\r\n- to.hdbcds:\r\n  + References to derived, primitive types are replaced by their final type.\r\n    The derived type definitions are not rendered anymore for hdbcds naming mode.\r\n  + Don't check missing type facets in views.\r\n- to.cdl:\r\n  + Render maximum cardinality as 'to one' or 'to many'.\r\n  + Return at most two files. The first one (named `model.cds`) contains all definitions, simply rendered in order,\r\n    without namespaces or usings. Contexts and services are NOT nested. The second file (named `<namespace>.cds`)\r\n    represents the CSN `namespace` property, simply defining such a namespace and requiring the first file.\r\n- API changes:\r\n  + The API functions `compile()` and `compileSync()` return a CSN and not an XSN,\r\n    `compactModel()` returns the first argument.\r\n  + If `options` does not provide a `messages` property, all messages are printed to standard error.\r\n  + The `options.messages` is kept throughout the compiler and contains all messages from the compiler and all backends.\r\n  + Messages are not sorted anymore; use the API function `sortMessages` to have it sorted.\r\n\r\n### Removed\r\n\r\n- Core engine (function `compile`):\r\n  + Referential integrity issues now always lead to compile errors.\r\n  + The `type of` operator (without `:` in the reference) cannot be used\r\n    for parameters and inside queries anymore.\r\n  + Using `\"…\"` for delimited identifiers leads to a compile error.\r\n  + Issue an error for “smart artifact references”, i.e.\r\n    when using `Definition.elem` instead of `Definition:elem`\r\n  + The definition of annotations is no longer allowed in `context`s and `service`s.\r\n  + Providing an alias name without `as` leads to a compile error or warning.\r\n  + Providing unexpected kind of definitions for `type` or other references leads to a compile error.\r\n  + The ancient CSN 0.1.0 format generation has been removed.\r\n  + The compiler does no longer look for modules whose file extension is `.csn.json`,\r\n    both `.csn` and `.json` is still checked.\r\n- for.odata:\r\n  + With `--format: structured`, the property `$generatedFieldName` in keys of\r\n    managed associations has been removed.\r\n  + Artificially exposed types that are required to make a service self contained are\r\n    removed from the OData processed CSN.\r\n  + Localized convenience views are no longer part of the OData CSN.\r\n- API changes:\r\n  + The deprecated XSN based transformers `forHana`, `forOdata`, `toSwagger`, `toSql`, `toCsn`, `toCdl`\r\n    have now been removed from the code base.\r\n  + Remove `collectSources()` as well as `options.collectSources`.\r\n  + A `CompilationError` usually does not have the property `model` anymore,\r\n    to avoid potential memory issues.\r\n  + CSN compiler messages no longer have a `location` property. Use `$location` instead.\r\n- The following `cdsc` options have been removed:\r\n  + `--old-transformers`.\r\n  + `--hana-flavor` with all corresponding rudimentarily implemented language constructs.\r\n  + `--new-resolve` (the new resolver is now the default).\r\n\r\n### Fixed\r\n\r\n- Core engine (function `compile`):\r\n  + Managed composition in sub elements are now properly redirected,\r\n    even if the sub structure comes from a referred type.\r\n  + Do not dump with sub queries in the `on` condition of `join`s.\r\n  + Properly report that managed aspect composition inside types and as sub elements\r\n    are not supported yet.\r\n  + Make sure that including elements with managed aspect compositions only\r\n    use the provided target aspect, but not the generated target entity.\r\n  + Properly handle the extra keywords in the third argument of the HANA SQL function `round`.\r\n- to.edm(x):\r\n  + Return all warnings to the user.\r\n  + Don't render references and annotations for unexposed associations.\r\n  + Rendering of `@Validation.AllowedValue` for elements of type enum annotated with `@assert.range`:\r\n    + Add `@Core.Description`, if the enum symbol has a `@Core.Description`, `@description` or document comments.\r\n  + Primary key aliases are now the path basenames, colliding aliases are numbered.\r\n  + Fix a bug in constraint calculation if principal has no primary keys.\r\n  + Illegal OData identifiers which are not exposed in the generated edmx schema are not causing errors anymore.\r\n  + Improve non-enum value handling on term definitions based on an enum type by raising a warning and rendering\r\n    the value with appropriate scalar EDM type.\r\n  + Render annotion qualifier in JSON format.\r\n- to.sql/hdi/hdbcds:\r\n  + Reject structured view parameters for HANA.\r\n  + Types are not rendered anymore for HANA in quoted mode.\r\n  + Structured elements in subqueries are now properly expanded.\r\n  + Actions, functions, annotations and events do not have DB specific checks run on them, as\r\n    they will not be part of the resulting artifacts anyways\r\n  + With `--names=quoted` or `hdbcds`, some `.` in artifact names are turned into `_`.\r\n    In general, this happens when part of the name prefix is \"shadowed\" by a non-context/service;\r\n    any `.` after that point is turned into `_`. This change also affects the filenames and the\r\n    `@cds.persistence.name` annotation in the CSN returned by `to.hdi.migration` and `for.odata`.\r\n- to.sql/hdi:\r\n  + Fixed a bug which led to an exception if elements were referenced as types.\r\n  + For the SQLite dialect, date, time and timestamp are rendered as simple string literals instead of function calls.\r\n  + For naming mode \"plain\", date, time and timestamps are rendered as SQL-compliant literals.\r\n- to.sql/hdbcds: Fix issue which led to wrong ON conditions for naming mode `hdbcds`.\r\n- to.sql:\r\n  + SRID of SAP HANA spatial type (`ST_POINT` & `ST_GEOMETRY`) is not rendered as the length of `CHAR`\r\n    for SQL-dialects other than `hana`. The resulting `CHAR` has a default length of 2000.\r\n- to.hdbcds:\r\n  + Nullability constraints on view parameters are not rendered anymore.\r\n  + CDS and HANA CDS types inside cast expressions are mapped to their SQL-counterparts, as the CDS types can't be used in a cast.\r\n- to.cdl: Correctly render `event` typed as `projection`.\r\n- to.hdi.migration: Don't generate `ALTER` for type change from association to composition or vice versa (if the rest stays the same),\r\n  as the resulting SQL is  identical.\r\n\r\n## Version 1.50.10 - 2021-07-30\r\n\r\n### Fixed\r\n\r\n- to.hdi.migration: Check for incompatible CSN versions to avoid wrongly generated ALTER|DROP|ADD statements.\r\n\r\n## Version 1.50.8 - 2021-07-01\r\n\r\n### Fixed\r\n\r\n- to.hdi.migration: Don't generate `ALTER` for type change from association to composition or vice versa (if the rest stays the same), as the resulting SQL is identical.\r\n\r\n## Version 1.50.6 - 2021-05-05\r\n\r\n### Fixed\r\n\r\n- to.edm(x):\r\n  + OData V2: Render constraints only if all principal keys are used in association.\r\n  + OData V4: Don't remove `@Capabilities` annotations from containee.\r\n  + Allow `@Core.MediaType` on all types and raise a warning for those (scalar) types that can't be mapped to `Edm.String` or `Edm.Binary`.\r\n\r\n## Version 1.50.4 - 2021-04-06\r\n\r\n### Fixed\r\n\r\n- to.hdbcds: CDS and HANA CDS types inside cast expressions are mapped to their SQL-counterparts, as the CDS types can't be used in a cast.\r\n\r\n## Version 1.50.2 - 2021-03-19\r\n\r\n### Fixed\r\n\r\n- Correct calculation of dependent autoexposed entity name\r\n  (fixing a potential regression with v1.50.0)\r\n- to.hdi.migration: Correctly handle \"temporal\" and other cases when rendering expressions\r\n- to.edm(x):\r\n  + Improve non-enum value handling on Oasis enum term definitions by raising a warning and rendering\r\n    the value with appropriate scalar EDM type.\r\n  + Render annotion qualifier in JSON format.\r\n- Update OData vocabularies\r\n  'Aggregation', 'Analytics', 'Capabilities', 'CodeList', 'Common', 'Communication',\r\n  'Core', 'Graph', 'HTML5', 'ODM', 'PersonalData', 'Session', 'UI'\r\n\r\n## Version 1.50.0 - 2021-02-25\r\n\r\n### Added\r\n\r\n- Introduce annotation `@cds.redirection.target`.\r\n  With value `false`, the projection is not considered an implicit redirection target;\r\n  with value `true`, is is considered a “preferred” redirection target.\r\n\r\n## Version 1.49.2 - 2021-02-16\r\n\r\n### Fixed\r\n\r\n- to.edm(x): Illegal OData identifiers which are not exposed in the generated edmx schema are not causing errors anymore.\r\n- to.cdl: Annotations are now rendered with the new delimited Identifier syntax\r\n- to.sql/hdi:\r\n  + Fixed a bug which led to an exception if elements were referenced as types.\r\n  + For the SQLite dialect, date, time and timestamp are rendered as simple string literals instead of function calls.\r\n  + For naming mode \"plain\", date, time and timestamps are rendered as SQL-compliant literals.\r\n\r\n## Version 1.49.0 - 2021-01-29\r\n\r\n### Added\r\n\r\n- to.hdi/sql:\r\n  + Updated the list of reserved keywords for HANA and SQLite\r\n  + Use \"smart quoting\" for naming mode \"plain\" - automatically quote reserved keywords\r\n- to.hdi.migration:\r\n  + Supports various kinds of entity changes: entity addition/deletion/change (the latter including element additions/deletions/type changes).\r\n  + Provides option to render any element type change as `ALTER TABLE DROP` to prevent deployment issues due to incompatible data\r\n    (default for length reductions or association/composition changes).\r\n- to.cdl: Smart artifact references are now rendered explicitly via `:` notation\r\n\r\n### Changed\r\n\r\n- OData/EDMX:\r\n  Change the `EntityType` precedence of the OData term definition `AppliesTo=` attribute. If `AppliesTo` contains\r\n  both `EntityType` and `EntitySet`, the annotation was assigned to the entity type. Extending an\r\n  `AppliesTo=[EntitySet]` with `EntityType` would be OData compliant but incompatible for clients\r\n  which still expect the annotation at the set and do not perform the full lookup.\r\n  With this change, `EntitySet` and `EntityType` are treated individually, effectively annotating the type and\r\n  (if available) the set. This fixes both extendability and client behavior.\r\n\r\n### Fixed\r\n\r\n- Structured foreign key and forward association reference paths used in ON condition definitions\r\n  are now translatable into the correct short form ON condition paths in Association to Join translation.\r\n- to.hdbcds: Aliased mixin-associations are now handled correctly\r\n\r\n## Version 1.48.0 - 2021-01-15\r\n\r\n### Changed\r\n\r\n- to.hdbcds/hdi/sql: Reject using associations or compositions in query elements starting with `$self` or `$projection`.\r\n- OData: Update vocabularies 'Common', 'PersonalData', 'UI'.\r\n\r\n### Fixed\r\n\r\n- Using a hex literal like `x'D028'` (in a CSN input) could lead to an error.\r\n- for.odata:\r\n  + Fix a bug in constraint calculation if principal has no primary keys.\r\n  + Don't overwrite user defined `@Core.Computed` annotation.\r\n- to.hdi/sql/hdbcds: Fixed a bug during processing of skipped/otherwise not db-relevant artifacts.\r\n\r\n## Version 1.47.0 - 2020-12-11\r\n\r\n### Changed\r\n\r\n- Update vocabularies 'Aggregation', 'Common'\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql:\r\n  + Types are not rendered anymore for SAP HANA in quoted mode.\r\n  + Aliases are now respected when resolving $self\r\n  + Association clones are now pre-pended with three underscores (`_`) instead of two\r\n    to prevent shadowing of context names or usings\r\n\r\n## Version 1.46.6 - 2020-12-01\r\n\r\n### Fixed\r\n\r\n- OData identifiers can now include all unicode characters which are described in the OData specification.\r\n\r\n## Version 1.46.4 - 2020-11-28\r\n\r\n### Fixed\r\n\r\n- Association to Join translation: Fix using forward association target as table alias in ON condition.\r\n\r\n## Version 1.46.2 - 2020-11-20\r\n\r\n### Fixed\r\n\r\n- to.edm(x) Fix a bug in the alias calculation for key references in structured OData.\r\n\r\n## Version 1.46.0 - 2020-11-20\r\n\r\n### Changed\r\n\r\n- to.edm(x):\r\n  + V4 structured key ref path aliases are now the basenames, colliding aliases are numbered.\r\n  + Lower level to `info` for \"‹Term› is not applied\" message if an annotation cannot be applied.\r\n- OData:\r\n  + Update vocabulary 'UI'\r\n  + Correctly handle `not null` during flattening. Only if the parent and all subelements in the chain\r\n  are `not null`, make the corresponding flat leaf element `not null`.\r\n\r\n### Fixed\r\n\r\n- Do not consider events to be potential targets for implicit redirections:\r\n  strange warnings for multiple projections or other strange errors disappear.\r\n- to.hdbcds/hdi/sql:\r\n  + Reject structured view parameters for HANA.\r\n  + Correctly handle `not null` during flattening.\r\n  Only if the parent and all subelements in the chain are `not null`, make the corresponding flat leaf element `not null`.\r\n- to.edm(x): Render @assert.range enum annotations correctly (enum symbol as value and don't omit zero value).\r\n- Fixed CDS module resolution with option `newResolve` on Windows where a superfluous `\\` was prepended to absolute paths.\r\n\r\n## Version 1.45.0 - 2020-10-30\r\n\r\n### Added\r\n\r\n- OData: Warn about non-applicable annotations.\r\n\r\n### Changed\r\n\r\n- A warning is emitted for annotation definitions inside services/contexts as this won't be\r\n  allowed in the next major cds-compiler release.\r\n- OData: Update vocabularies 'Analytics' and 'Common'.\r\n\r\n### Fixed\r\n\r\n- Association to Join translation: Fill empty select blocks with aliased columns.\r\n- to.edm(x):\r\n  + Some EDM(x) warnings were not properly passed to the user.\r\n  + Don't render references and annotations for unexposed associations.\r\n- to.hdbcds: Warnings during rendering of the hdbcds were not raised to the user.\r\n- Issue which led to wrong on-conditions for `hdbcds` naming mode.\r\n\r\n## Version 1.44.4 - 2020-10-16\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql: The processing of managed associations as foreign keys now works regardless of the order in which the possible chains are resolved.\r\n- OData: Namespaces are brought back into the exposed types. Dots are replaced with underscores in the name.\r\n\r\n## Version 1.44.2 - 2020-10-09\r\n\r\n### Added\r\n\r\n- OData: The annotations `@assert.format` and `@assert.range` now result in adding the\r\n  `@Validation.Pattern` and `@Validation.AllowedValues` in the resulting EDMX.\r\n- A new compiler option `newResolve` is added (`--new-resolve` for `cdsc`).  When set to `true` a new\r\n  module resolver is used which needs fewer file lookups. It will become the default in the future.\r\n- Event definitions can be typed with a reference to an event.\r\n- When the new option `withLocation` is set,\r\n  the property `$location` in the CSN is enumerable instead of non-enumerable;\r\n  the value of `$location` is an object with sub properties `file`, `line` and `col`\r\n  which describes the source position of all definitions, elements and other members.\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + The `namespace` is now not part of the exposed type's name.\r\n  + Update vocabularies 'Aggregation', 'UI' and 'Validation'.\r\n\r\n## Version 1.43.0 - 2020-10-02\r\n\r\n### Added\r\n\r\n- The magic variable `$session` is now supported. All element accesses are unchecked.\r\n- Reference paths as annotation values can now contain identifiers starting with `@`.\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + Raise message level for illegal OData identifiers from warning to error.\r\n  + Update vocabularies 'Aggregation' and 'Common'.\r\n  \r\n### Fixed\r\n\r\n- to.hdi/hdbcds/sql: Correctly process the elements of subqueries in localized view variants\r\n\r\n### Removed\r\n\r\n### Fixed\r\n\r\n- OData: put default value validation under `beta:odataDefaultValues`\r\n\r\n## Version 1.42.2 - 2020-09-29\r\n\r\n### Fixed\r\n\r\n- CDL: Action blocks can now be empty, e.g. `entity E {…} actions { }`.\r\n- An info message is emitted if builtin types are annotated.  Use a custom type instead.\r\n  Annotating builtins in CDL is possible but when transformed into CSN the annotation was silently lost.\r\n  It is now put into the \"extensions\" property of the CSN.\r\n- Fixed `cast()` for simple values like numbers and strings.\r\n\r\n- to.sql:\r\n  + Remove simple default value checks and allow the database to reject default values upon activation.\r\n  + Render empty actual parameter list when selecting from a view with parameters which are fully covered with\r\n  default values and no actual parameters are provided in the query itself.\r\n\r\n- OData:  \r\n  + Correctly render unary operator of default values in EDM.\r\n\r\n## Version 1.42.0 - 2020-09-25\r\n\r\n### Added\r\n\r\n- The compiler now supports the `cast(element as Type)` function in queries.\r\n  Using this function will also result in a `CAST` SQL function call.\r\n- A top-level property `i18n` is now supported. The property can contain translated texts.\r\n  The compiler expects its entries to be objects where each text value is a string.\r\n- CDL: Empty selection lists in views/projections are now allowed and make it possible to extend\r\n  empty projections. Note that views/projections without any elements are not deployable.\r\n- For CSNs as input, the compiler returns properties as they are (without checks)\r\n  if their name does not match the regexp `/[_$]?[a-zA-Z]+[0-9]*/` and does not start with `@`.\r\n  With more than one CSN input,\r\n  the compiler only returns the top-level CSN properties of the first source.\r\n\r\n### Changed\r\n\r\n- to.cdl: Smart type references are now explicitly rendered via \":\"-syntax\r\n\r\n### Removed\r\n\r\n### Fixed\r\n\r\n- Annotating an _unknown_ element _twice_ now results in a duplicate annotation error instead\r\n  of silently loosing the annotation.\r\n- Service/context extensions that reference a non-service/non-context now result in a compiler error\r\n  instead of silently loosing the context/service extension.\r\n- to.hdbcds/sql/hdi:\r\n  + fix a bug, which resulted in a malformed on-condition, if an association key\r\n  was another association pointing to an entitiy with a structured key.\r\n  + in conjunction with assoc-to-joins, the internal CSN reference broke\r\n  causing missing locations and even internal errors when logging messages\r\n  + managed associations in UNION are now correctly processed\r\n- The parseCdl mode now correctly resolves type arguments of \"many\" types.\r\n- OData: The annotation `@Capabilities.Readable` is now correctly\r\n  translated to `@Capabilities.ReadRestrictions.Readable`.\r\n\r\n## Version 1.41.4 - 2020-09-18\r\n\r\n### Removed\r\n\r\n- The length of HANA identifiers are not checked anymore: no more warnings are issued for long identifiers.\r\n\r\n### Fixed\r\n\r\n- The check for ignored \"localized\" keywords in sub-elements has been extended to also\r\n  include references to structured types.  \r\n- A warning was added if views/projections are used as element types.\r\n- An info message is emitted if a namespace is annotated.  \r\n  Annotating namespaces is not possible. Previously the annotation was silently lost.\r\n  It is now put into the \"extensions\" property of the CSN.\r\n\r\n## Version 1.41.2 - 2020-09-15\r\n\r\n### Fixed\r\n\r\n- OData: correctly render primary key associations targeting a composition parent but are not\r\n  the composition enabling association.\r\n- to.hdbcds/sql/hdi: Do not dump if artifact doesn't exist anymore after association to join translation\r\n- Only check for unmanaged associations inside of \"many\"/\"array of\" in the elements of views and entities,\r\n  not inside of actions and other members.\r\n\r\n## Version 1.41.0 - 2020-09-11\r\n\r\n### Added\r\n\r\n- OData: Allow the relational comparison of structures or managed associations in an ON condition as described in\r\n  version 1.32.0 - 2020-07-10 (forHana).\r\n- Allow `Struct:elem` with and without preceeding `type of` as type reference.\r\n\r\n### Fixed\r\n\r\n- to.cdl: Only render enums if they were directly defined there\r\n- The parseCdl mode now checks for redefinitions to avoid generating invalid CSN.\r\n- OData: An error is thrown if a redirected target has fewer keys than the original one.\r\n- OData: Empty structured elements are now handled correctly in `flat` format.\r\n\r\n## Version 1.40.0 - 2020-09-04\r\n\r\n### Added\r\n\r\n- to.hdi/sql: Support default values for view parameters.\r\n- OData: lower message severity from Error to Warning for\r\n  `<entity type> has no primary key` and `<type> has no properties`.\r\n\r\n### Changed\r\n\r\n- OData: The foreign key references in associations are not flattened any more with format `structured`.\r\n\r\n### Fixed\r\n\r\n- parse.cdl: Properly handle type arguments, most likely relevant for HANA types.\r\n- OData: Multilevel anonymously defined `composition of <aspect>` is now processed successfully with the OData backend.\r\n- OData: Fix a bug in EDM generation that caused a dump.\r\n- Update ANTLR dependency to version 4.8.\r\n\r\n## Version 1.39.0 - 2020-08-26\r\n\r\n### Added\r\n\r\n- If the first CDS source (CDL or CSN) provided to the compiler\r\n  has a `namespace` declaration/property, then\r\n  that namespace name is put into the property `namespace` of the returned CSN.\r\n- An event payload type can now be defined with a type/entity reference or\r\n  or projection (instead of providing the elements directly).\r\n- Aspects can now be included when specifying the elements of an event payload type,\r\n  as it is known for type, entity and aspect definitions.\r\n\r\n### Fixed\r\n\r\n- Fix a bug in explicit JOIN cardinality CDL parsing\r\n- to.hdbcds/hdi/sql: Identifiers are checked and warnings are raised if the identifier exceeds a length limitation which would result in a deployment error.\r\n- OData: Service, entity and element identifiers are checked and warnings are raised if an identifier is not compliant with the OData specification.\r\n\r\n## Version 1.38.0 - 2020-08-25\r\n\r\n### Changed\r\n\r\n- CSN: The property `payload` of an `event` has been renamed to `elements`.\r\n\r\n### Fixed\r\n\r\n- to.hdbcds/hdi/sql: Correctly handle local-scope refs in on-conditions when flattening structures.\r\n- Run checks for associations inside of `many` or `array of` only on entities and views.\r\n\r\n\r\n## Version 1.37.0 - 2020-08-21\r\n\r\n### Added\r\n\r\n- Projections columns can now use expressions like select items,\r\n  both for `entity … as projection on` and `extend projection … with`.\r\n- OData: `array of <structure>` or `many <structure>` is now allowed in OData V4, flat format.\r\n\r\n### Changed\r\n\r\n- to.hdbcds/hdi/sql:\r\n  + Messages of id \"query-no-undefined\" are now raised as errors.\r\n  + Aspects/types/abstract entities containing anonymous aspect compositions\r\n    must not be used as types and are removed during transformation.\r\n\r\n### Fixed\r\n\r\n- to.cdl: Events are rendered.\r\n- to.cds: Anonymous aspect composition are now rendered correctly.\r\n- to.hdbcds/hdi/sql:\r\n  + Events are ignored.\r\n  + local-scope references in on-conditions are now handled correctly during flattening.\r\n  + Removed duplicate messages.\r\n- A model with multilevel `composition of <aspect>` (spread across several aspect declarations,\r\n  composing one another) is now processed successfully with the OData backend.\r\n- The CSN parser supports explicit join cardinalities.\r\n- Prefix a `@assert.unique` table constraint with the table name to avoid name clashes.\r\n\r\n\r\n## Version 1.36.0 - 2020-08-07\r\n\r\n### Added\r\n\r\n- Query select items can now be declared to be virtual.\r\n\r\n- CQL now allows to specify a join cardinality. Allowed are any combinations of  \r\n  `{ [ EXACT ] ONE | MANY } TO { [ EXACT ] ONE | MANY }` for  \r\n  `{ INNER | { LEFT | RIGHT | FULL } [ OUTER ] }` joins.  \r\n  The cardinality is added in the for HANA generated `CREATE VIEW` statements.\r\n\r\n- Support the creation of unique constraints by assigning `@assert.unique.<constraintName>` to\r\n  non-query entities or query entities annotated with `@cds.persistence.table`. The value of the\r\n  annotation is an array of paths referring to elements in the entity. The path leaf may\r\n  be an element of a scalar, structured or managed association type. Individual foreign keys or\r\n  unmanaged associations can not be accessed. In case the path points to a structured element,\r\n  the unique constraint will contain all columns stemming from the structured type. In case\r\n  the path points to a managed association, the unique constraint will contain all foreign key\r\n  columns stemming from this managed association.\r\n  For HANA a `UNIQUE INVERTED INDEX` and for SQLite a `named unique table constraint` is generated.\r\n\r\n### Changed\r\n\r\n- OData: Update vocabularies 'Common', 'UI'\r\n- The association to join transformation treats foreign key accesses with priority. If a foreign key\r\n  of a managed association can be accessed without joins, no joins are generated.\r\n  The priority handling can be turned of with option `joinfk`.\r\n\r\n### Fixed\r\n\r\n- Semantic location in messages is now more precise.\r\n\r\n## Version 1.35.0 - 2020-07-31\r\n\r\n### Added\r\n\r\n- Introduce option `localizedLanguageFallback`; if set to value `\"none\"`, the localized\r\n  convenience views do not use function `coalesce` to select from a default text as fallback.\r\n\r\n### Fixed\r\n\r\n- Properly consider targets of compositions in `mixin`s to be autoexposed.\r\n- Uniformly limit propagation of `@cds.autoexposed`, i.e.\r\n  there is not inheritance from a query source navigating along an association.\r\n  Previously, compiling a compiled model could lead to new autoexposed entities.\r\n- OData:\r\n  + V2: Distribute various `@sap` specific annotations to the entity container.\r\n  + Always set attribute `Nullable` on properties of type `Collection()`.\r\n\r\n## Version 1.34.0 - 2020-07-27\r\n\r\n### Fixed\r\n\r\n- Do not dump with illegal references in explicit `on` conditions of redirections;\r\n  properly report them via error messages.\r\n\r\n## Version 1.33.0 - 2020-07-24\r\n\r\n### Added\r\n\r\n- Allow to declare `many/array of` elements, parameters and return types to be `(not) null`.\r\n  The nullability applies to the array items of the element, not the element itself.\r\n- New boolean option `dependentAutoexposed` to avoid name clashes in dependent\r\n  autoexposed entities (text entities, components of managed compositions).\r\n- cdsc: Add toOdata version 'v4x' to combine `{ version: 'v4', odataFormat: 'structured', odataContainment: true }`.\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + Update vocabularies 'Common', 'Core', 'ODM'.\r\n  + The default nullability for collection value properties is `false`, indicating that the returned collection must\r\n    not contain null value entries.\r\n- toCdl: Identifiers are now quoted with `![` and `]`. Inner `]` characters are escaped with `]]`.\r\n- toCdl/toSql: Function names containing non standard HANA identifier characters are rendered case preserving and quoted\r\n  if an appropriate naming mode has been set in the options.\r\n\r\n### Fixed\r\n\r\n- forHana: Correctly flatten managed associations as foreign keys used in the definition.\r\n  of another managed association.\r\n- OData: Don't render aspects as `edm.ComplexType`.\r\n\r\n## Version 1.32.0 - 2020-07-10\r\n\r\n### Added\r\n\r\n- Provide semantic code completion for elements, enums, actions and parameters\r\n  in `annotate` and `extend`.\r\n- forHana: Allow the relational comparison of structures or managed associations in an ON condition.  \r\n  Both operands must be structurally compatible, that is both structures must be expandable\r\n  to an identical set of leaf paths. Each leaf path must terminate on a builtin CDS scalar type.\r\n  The original relational term of the form `s1 op s2` is replaced by the resulting expression\r\n  `s1.leafpath_0 op s2.leafpath_0 (AND s1.leafpath_i op s2.leafpath_i)*` with `i < n leaf paths`.\r\n\r\n### Changed\r\n\r\n- toCdl: String enums without a value are no longer rendered with their name's string representation as their value.\r\n\r\n### Fixed\r\n\r\n- parseCdl: Fix missing extensions in files that extend unknown services/contexts.\r\n- OData: Do not render an EDM document in case of raised errors\r\n- to.cdl: Aspects are now correctly rendered as aspects and not as types\r\n\r\n## Version 1.31.2 - 2020-07-03\r\n\r\n### Fixed\r\n\r\n- HANA/SQLite: Correctly handle already resolved types when a cds.linked CSN is passed in\r\n- HANA/SQLite: Ensure that all elements in a Draft are non-virtual\r\n\r\n## Version 1.31.0 - 2020-06-26\r\n\r\n### Added\r\n\r\n- forHana/toSql: A (proxy) entity representing a HANA User Defined Function or a HANA Calculation View\r\n  can now be annotated with `@cds.persistence { udf, calcview }` so that queries to these artifacts are\r\n  rendered with the appropriate parameter lists. Parameters for HANA Calculation Views are decorated with\r\n  `PLACEHOLDER.\"$$<id>$$\"`. HANA User Defined Functions without arguments require an empty argument\r\n  list `()` as part of the query source.  \r\n  Entities that are assigned with `@cds.persistence { udf, calcview }` cannot contain associations or act as\r\n  association targets, even if they have no defined parameter list.  \r\n  Multiple assignments of `@cds.persistence { table, udf, calcview }` to the same entity are rejected.\r\n- OData V4: Elements with type `array of <scalar type>` are now supported in flat mode\r\n\r\n### Changed\r\n\r\n- Option `beta` now only works with selective feature flags. Instead of `beta: true`, a dictionary of `<feature>: true` is expected. Available feature flags are:\r\n  1. subElemRedirections\r\n  2. keyRefError\r\n  3. aspectCompositions\r\n  4. odataProxies\r\n  5. uniqueconstraints\r\n- OData V4: Unmanaged associations/compositions with a target cardinality of exactly one (that is `[1..1]`)\r\n  are rendered as `edmx:NavigationProperty` with attribute `Nullable=\"false\"`\r\n- OData: On-condition checks are now performed when generating OData as well.\r\n- SQLite: The property length for string parameters is not longer restricted to 5000 characters.\r\n- HANA/SQLite: Improved the error message when an entity without elements is found to make it clearer what is expected.\r\n\r\n### Fixed\r\n\r\n- An error is emitted if parameters in functions/actions have a default value as it is not yet supported.\r\n  For example by using `type of E:element` where `element` has a default value.\r\n- OData V2: Derived scalar types are not rendered as `<edmx:TypeDefinition>`, so no annotation assignments to\r\n  such carriers must be rendered.\r\n- HANA/SQLite: Fixed a bug when flattening structured elements - instead of a human-readable error, an exception was thrown.\r\n\r\n## Version 1.30.0 - 2020-06-12\r\n\r\n### Added\r\n\r\n- Projections can now have `where` and `group by`/`having` clauses.\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- `doc` comments in CDL now support Windows-style line breaks (CRLF). They are replaced with `\\n` in CSN.\r\n- `toCdl` no longer renders a `*` column if no columns are used in the original source.\r\n- Types that have both `type` and `items`/`elements` properties in CSN are now checked to avoid\r\n  mismatches if a unstructured / non-arrayed type is referenced but `items`/`elements` exists.\r\n- OData:\r\n  + Correctly render CRLF and LF to __&#xa;__ in EDMX\r\n\r\n## Version 1.29.0 - 2020-06-08\r\n\r\n### Added\r\n\r\n- Projections can now have `limit` and `order by` clauses.\r\n\r\n### Changed\r\n\r\n- OData: Update vocabularies 'CodeList', 'Common', 'Graph', 'UI'\r\n\r\n### Fixed\r\n\r\n- Memory usage improvement - compile messages with id `ref-undefined-excluding` uses much less memory.\r\n\r\n- HANA/SQL: Validate ON conditions of mixin association definitions in all subqueries\r\n\r\n- OData V2: Assign various `@sap` annotations to the `<edmx:EnitySet>` and `<edmx:AssociationSet>`\r\n  if such annotations are assigned to CDS entities or associations.\r\n\r\n- OData V4 Structured: Omit foreign keys of managed associations that establish the containment relationship to\r\n  a container, if this association was declared to be primary key.\r\n\r\n- OData: Warn about non-integer enums as they are not supported by OData, yet.\r\n\r\n- Warn about string values in integer enums and vice versa.\r\n\r\n## Version 1.28.0 - 2020-05-27\r\n\r\n### Added\r\n\r\n- API: add `getArtifactCdsPersistenceName()` and `getElementCdsPersistenceName()` which return\r\n  the value of annotation `@cds.persistence.name` for the corresponding artifact/element.\r\n\r\n### Changed\r\n\r\n- Issue error if old backends are used with beta mode.\r\n- Raise severity of message `Unmanaged associations cannot be used as primary key` with id `unmanaged-as-key` to error.\r\n\r\n### Fixed\r\n\r\n- OData:\r\n  + Render vocabulary `<edmx:Reference>` and `<edmx:Include>` if vocabulary namespace was used.\r\n  + Reduce memory consumption in EDM Renderer.\r\n  + Render annotations for navigation properties if association is annotated with `@cds.api.ignore: true`.\r\n\r\n## Version 1.27.0 - 2020-05-15\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n- Improve warning messages for integer enum missing a value and chained array of.\r\n- HANA/SQL\r\n  + Empty structures are not allowed as foreign keys.\r\n- Report a warning for integer enum elements that do not have values.\r\n- Report a warning for enums that are not integer- or string-like.\r\n- OData\r\n  + Update vocabularies 'Common', 'Core', 'Validation'\r\n  + Pass through structures without elements\r\n  + `cds.Decimal` and `cds.DecimalFloat` (deprecated) without precision/scale are rendered\r\n    as `Edm.Decimal` with `Scale=variable` (V4) and `sap:variable-scale=\"true\"` (V2)\r\n\r\n### Fixed\r\n\r\n- Memory usage improvement - compile messages do not inherit from Error any more.\r\n- HANA types in annotation assignments work again.\r\n- HANA/SQL: Correctly handle temporal in conjunction with namespaces.\r\n- Fix a bug in Association to Join translation that prevents exposing managed associations via subqueries.\r\n\r\n### Removed\r\n\r\n## Version 1.26.4 - 2020-05-08\r\n\r\n### Added\r\n\r\n- Add new OData vocabulary `com.sap.vocabularies.HTML5.v1`\r\n\r\n### Changed\r\n\r\n- Report a warning when a deprecated non-snapi backend (OData, HANA/SQL) is called.\r\n\r\n- OData:\r\n  + Update vocabulary 'UI'\r\n  + Add annotation `@Common.Label: '{i18n>Draft_DraftAdministrativeData}'` to entity `DraftAdministrativeData`\r\n  + Improve info message for target mismatch on associations that are compared with $self\r\n\r\n### Fixed\r\n\r\n- The CSN `val` property is now allowed in enum element extensions. Such CSN can be\r\n  generated using the `parseCdl` mode and it is now compilable.\r\n\r\n- Again allow negative values as enum values, fixing a regression introduced with v1.24.6.\r\n\r\n- OData: Correctly handle associations in arrayed elements (keyword `many`).\r\n\r\n- Annotation assignment checks now recognize HANA types.\r\n\r\n## Version 1.26.2 - 2020-04-24\r\n\r\n### Added\r\n\r\n- The client tool `cdsc` has got a new option `--beta <list>` which may be used to\r\n  specify a comma separated list of experimental features to be enabled.\r\n  \r\n- CSN in parse-cdl mode now has a `requires` property that represents `using`s from CDL.\r\n\r\n### Fixed\r\n\r\n- OData:\r\n  + Change foreign key creation order for associations to respect their dependencies.\r\n  + Use correct path during on-condition flattening.\r\n  + Report error when using elements without types for **array of type of (element)** and similar definitions.\r\n\r\n- HANA/SQL:\r\n  + Fix references to `null` enum values in default clauses.\r\n  \r\n- Type arguments are now properly set in CSN when using parse-cdl mode.\r\n\r\n- Avoid unjust warning if the `extensions` property of an input CSN contain `extend` statements.\r\n\r\n## Version 1.26.0 - 2020-04-17\r\n\r\n### Added\r\n\r\n- The client tool `cdsc` has got a new command `parseCdl` which returns a CSN\r\n  that is close to the original CDL file. It does not resolve imports and does\r\n  not apply extensions.\r\n\r\n- Unmanaged associations as primary keys are now warned about.\r\n\r\n- `localized` in combination with `key` is now warned about.\r\n\r\n- Enum values are now checked to only be either numbers or a strings - a warning is raised.\r\n\r\n- Elements in mixin clauses that are _not_ unmanaged associations now produce an error.\r\n\r\n### Changed\r\n\r\n- HANA/SQL:\r\n  + Raise warnings `rewrite-not-supported` and `rewrite-undefined-key` to errors.\r\n\r\n- Compiler: Empty elements are now kept along for the propagation.\r\n\r\n- OData: Annotate all elements of `DraftAdministrativeData` with `@Common.Label: '{i18n>\"Draft_<elementName>\"}'`\r\n  and elements  'DraftUUID', 'DraftIsCreatedByMe' and 'DraftIsProcessedByMe' with `@UI.Hidden`.\r\n\r\n### Fixed\r\n\r\n- Compiler: `type of <unmanaged assocation>` is now handled correctly by raising an error.\r\n\r\n## Version 1.25.0 - 2020-04-09\r\n\r\n### Changed\r\n\r\n- Downgrade `chained array of`-error to a warning\r\n- SQLite: Don't render implicit casts\r\n\r\n## Version 1.24.6 - 2020-04-08\r\n\r\n### Changed\r\n\r\n- OData:\r\n  + Improve messages for misaligned forward/backlink associations in EDM generator\r\n  + For V2 add annotations `@sap.creatable: false`, `@sap.updatable: false`, `@sap.deletable: false`,\r\n  `@sap.pageable: false` to the Parameter EntityType and `@sap.creatable: false`, `@sap.updatable: false`,\r\n  `@sap.deletable: false`, `@sap.addressable: false` to the Result EntityType.\r\n  + Update vocabularies 'Common' and 'Graph' and 'ODM'.\r\n\r\n\r\n### Fixed\r\n\r\n- Various messages mention more appropriate source locations.\r\n\r\n- Improve messages for `array of`\r\n\r\n- OData:\r\n  + Render 'array of' for ReturnType correctly\r\n  + Report error for view fields with no type information early\r\n  + Handle associations in structures with an association as explicit key\r\n\r\n### Removed\r\n\r\n- The client tool `cdsc` does not offer the option `--std-json-parser` anymore,\r\n  as it had no effect.\r\n\r\n## Version 1.24.4 - 2020-03-25\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n- `doc` comment propagation can now also be stopped by comments that only contain whitespace\r\n  (including newlines) like `/**  */`.\r\n\r\n- OData:\r\n  + Remove redundant service name and `__` prefix out of dynamically exposed substructures.\r\n  + Update vocabularies 'Capabilities' and 'Graph'.\r\n\r\n### Fixed\r\n\r\n- OData:\r\n  + Process correctly \"type of\".\r\n  + Process correctly elements with underscore as prefix.\r\n\r\n- Preserve parameter list in localized convenience views.\r\n\r\n## Version 1.24.3 - 2020-03-16\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- Force usage of resolve@1.8.1 instead of semver to avoid issues with file cache\r\n\r\n## Version 1.24.2 - 2020-03-13\r\n\r\n### Added\r\n\r\n- Support function calls like `count( distinct ... )` and `count( all ... )`.\r\n\r\n- With option `--doc-comment` comments of the form `/**...*/` are preserved, if these comments\r\n  appear at positions where annotation assignments are allowed. `doc` comments are propagated\r\n  like annotations until an empty comment `/***/` disrupts the propagation.\r\n  \r\n- OData:\r\n  + Add new OData vocabularies `com.sap.vocabularies.Graph.v1` and `com.sap.vocabularies.ODM.v1`\r\n  + With option `--odata-containment`, `parent` association and inferred key elements for\r\n  `composition of <aspect>` as well as inferred keys of `_texts` entities are not rendered.\r\n  + OData V4: Produce primary key paths with length limited alias names.\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- When not disabled by `@cds.autoexpose:false`, an entity used as composition target\r\n  is auto-exposed in the current service;\r\n  this did not work always if the target was a _query_ entity.\r\n\r\n- Foreign key creation in odata flat-mode when following associations.\r\n\r\n- Rename `@description` to `@Core.Description` in all cases as part of the OData transformation of a CSN.\r\n\r\n- When generating extensions from EDMX annotations, handle correctly targets from an EntityContainer.\r\n\r\n- Apply service annotations in EDMX generation.\r\n\r\n\r\n### Removed\r\n\r\n- Warning 'Service should not have more then one draft root artifact'\r\n\r\n- Experimental annotation '@cds.odata.{v2|v4}.ignore`\r\n\r\n- OData vocabulary `com.sap.vocabularies.odm.v1` (lowercase 'odm')\r\n\r\n- `--beta-mode` from option `--odata-containment`.\r\n\r\n## Version 1.24.1 - 2020-03-06\r\n\r\n### Added\r\n\r\n- Add new OData vocabulary `com.sap.vocabularies.odm.v1`\r\n\r\n### Changed\r\n\r\n- Expressions in mixin-definitions are now validated.\r\n- OData:\r\n  + Redirect inbound associations to entities with parameters to corresponding Parameter EntityType.\r\n  + Update vocabulary `UI`\r\n- Use semver for dependencies\r\n\r\n### Fixed\r\n\r\n- Resolve backlink mixin association usages uniformly in association to join translation.\r\n\r\n\r\n## Version 1.24.0 - 2020-02-28\r\n\r\n### Added\r\n\r\n- If an entity `E` with localized elements has the annotation `@fiori.draft.enabled`,\r\n  a new element `ID_texts` of type `cds.UUID` is added to `E_texts` as the _only key_ and\r\n  the annotation `@odata.draft.enabled` will not be set to false for `E.texts`.\r\n- A comment of the form `/**…*/` at \"annotation positions\" is now considered a doc comment;\r\n  its \"cleaned-up\" text is put into the CSN as value of the property `doc`.\r\n  In the OData/EDMX, it appears as value for the annotation `@Core.Description`.\r\n\r\n### Fixed\r\n\r\n- HANA CDS: When casting a column to an enum type, don't render it as an enum\r\n- Ignore top-level CSN \"annotations\" like `@sql_mapping` in the CSN frontend.\r\n- OData: Key constraint checks for Draft enabled entities consider EDM exposed keys only.\r\n- Message level for draft key checks is raised to 'warning' again.\r\n- Action and function calls are checked for missing arguments.\r\n- All references are correctly transformed in flatten mode.\r\n\r\n## Version 1.23.2\r\n\r\nChanges\r\n\r\n* Association to Join Transformation:\r\n  + Validate paths of an expression in the projection to be compliant with the\r\n    ON condition path constraints if such an expression is used in a mixin.\r\n  + Reject recursive or non-bijective `$self` expressions.\r\n* Reject casting of a structured select item to a different type.\r\n* OData: Update vocabularies `Capabilities`, `Common`, `UI`, `Validation`\r\n\r\nFixes\r\n\r\n* Association to Join Transformation: Resolve compound ON conditions with\r\n  multiple logical terms and/or references to different associations via `$self`.\r\n* Remove temporary property `viaTransformation` from published CSN.\r\n* Do not complain about unaligned `$syntax` attribute in CSN frontend.\r\n\r\n## Version 1.23.1\r\n\r\nChanges\r\n\r\n* OData:\r\n  + Lower message for unknown vocabulary annotations from warning to info.\r\n  + Lower message for `@Analytics.Measure expects @Aggregation.default` from warning to info.\r\n  + Remove empty EntityContainer and raise warning if Schema is empty.\r\n\r\nFixes\r\n\r\n* Correctly calculate code completion candidates for projection items in all\r\n  circumstances (regression introduced in v1.22.0).\r\n* In the Hana/Sql backend, correctly resolve forward `on` condition when using\r\n  mixin association that backlinks to an unrelated 3rd party entity and association.\r\n* Raise a warning if the element of the forward association and the element of\r\n  the query source do not not originate from the same defining entity. Raise an\r\n  error if the element of the forward association cannot be found in the query\r\n  source or is ambiguous.\r\n* Correctly create localization views with compiled model as input;\r\n  it was wrong previously in a model with a high view hierarchy.\r\n\r\n## Version 1.23.0\r\n\r\nFeatures\r\n\r\n* Introduce `![identifier body]` in the CDL source for delimited identifiers.\r\n  (The `!` is inspired by ABAP's identifier tag,\r\n  `[]` by the delimited identifier syntax in Microsoft SQL Server and Sybase;\r\n  we cannot use `[]` alone, because brackets are used for filter conditions.)\r\n* When generating SQL or HDBVIEW, explicit CASTs are now rendered\r\n\r\nChanges\r\n\r\n* Signal a warning for all uses of `\"identifier body\"` in the CDL source, as\r\n  most uses of double-quotes in actual CDS models were likely meant for strings.\r\n  (Yes, we do not adhere strictly to the lexical rules of the SQL Standard with this change…)\r\n* Issue a warning for an `aspect` definition without `{…}`.\r\n* In the CSN, `aspect` definitions have a `$syntax` property with value `\"aspect\"`.\r\n  A future incompatible change will set the `kind` of aspect definitions to value `\"aspect\"`.\r\n* Removed old CSN frontend and the corresponding options: `stdJsonParser` and `oldCsnFrontend`.\r\n* Fix check for arguments and filters in references (__might introduce new errors__).\r\n* Issue an error if explicit `keys` are provided when redirecting *un*managed associations.\r\n* File paths given to `cdsc` which contain symbolic links are now resolved before being\r\n  passed to the compiler.\r\n* Annotating elements with `@Core.Computed` now always overwrites computed value;\r\n  also expressions in parentheses will now induce to set `@Core.Computed` to `true`.\r\n* Update OData vocabulary `UI`\r\n* Increase the length of the element `locale` in generated `_texts` entities from\r\n  `String(5)` to `String(14)`.\r\n* Do not overwrite annotations with generated annotations (such as shortcuts and other\r\n  convenience annotations).\r\n\r\nFixes\r\n\r\n* Automatically calculate `keys` also for published _secondary_ managed\r\n  associations, i.e., associations in a select column which is reached by\r\n  following another association.  The compiler doest not yet calculate the `on`\r\n  condition of published secondary unmanaged associations – provide it explicitly.\r\n* Entities/Views without elements are now detected correctly.\r\n* Fix check for action/function parameters in services.\r\n* OData: Correctly apply annotations to parameters.\r\n\r\n## Version 1.22.0\r\n\r\nFeatures\r\n\r\n* With `redirected to`, model designers can now explicitly provide the `on`\r\n  condition / foreign `keys` for \"consumers\" of the current query (entity).\r\n  This is useful for situations (usually mentioned as message) where the\r\n  compiler does not calculate `on`/`keys` (automatically yet).\r\n* Add OData vocabularies: `com.sap.vocabularies.CodeList.v1`, `Org.OData.Repeatability.V1` and `com.sap.vocabularies.Session.v1`\r\n\r\nChanges\r\n\r\n* In the `sql`, `hdi` and `hdbcds` backends with SQL dialect HANA, `$user.id` is translated to\r\n  `SESSION_CONTEXT('APPLICATIONUSER')`, not `SESSION_CONTEXT('XS_APPLICATIONUSER')` anymore.\r\n  As with the SQL dialect SQLite, it can now be configured.\r\n* The client tool `cdsc` now prints a source excerpt for each message by default;\r\n  use `cdsc --no-message-context` to get the previous behavior.\r\n* Increase severity to `Warning` of messages for a situation where the compiler\r\n  cannot calculate an `on` condition / foreign `keys` automatically.\r\n* Issues warnings for annotation definitions, as their CSN representation will be\r\n  moved from `definitions` into an new property `vocabularies` in a future change.\r\n* OData:\r\n  + Update vocabularies: `Analytics`, `Common`, `Communication`, `Core`, `PersonalData`, `UI`\r\n  + Set reference base URI for SAP Vocabularies to `https://sap.github.io/odata-vocabularies/vocabularies`\r\n\r\nFixes\r\n\r\n* In the `sql`, `hdi` and `hdbcds` backends,\r\n  + correctly ignore contexts containing just actions,\r\n* In all backends, correctly handle models where an `on` condition of a `join` contains a sub query.\r\n* Avoid infloop for cyclic dependencies on select items with explicit redirections.\r\n\r\n## Version 1.21.1\r\n\r\nFeatures\r\n\r\n* OData: Support annotation `@insertonly` at an entity which translates to\r\n  `@Capabilities.DeleteRestrictions.Deletable: false`, `@Capabilities.ReadRestrictions.Readable:false`,\r\n  `@Capabilities.UpdateRestrictions.Updatable: false`.\r\n  A warning is raised if `@insertonly` and `@readonly` are applied at the same entity and no mapping is\r\n  done.\r\n\r\n## Version 1.21.0\r\n\r\nFeatures\r\n\r\n* Support `cds.Decimal` without type facets `precision` and `scale` as substitute for the deprecated `cds.DecimalFloat`. Mapping is as follows:\r\n\r\n  | HANA CDS     | HANA SQL | SQLite  | Odata V4 | Odata V2 |\r\n  |--------------|----------|---------|----------|----------|\r\n  | DecimalFloat | DECIMAL  | DECIMAL | Decimal  | Decimal  |\r\n\r\n* OData:\r\n  + Expand shorthand annotation `@mandatory` to `Common.FieldControl: #Mandatory`.\r\n  + Support edm:Singleton by annotating an entity with either\r\n    `@odata.singleton: Boolean` or `@odata.singleton.nullable: Boolean`.\r\n\r\n    `@odata.singleton.nullable` is a shorthand for `@odata.singleton: true` and sets\r\n    the value for attribute `Nullable` (default is false).\r\n\r\n    If `odata.singleton` is `false`, no singleton is generated regardless of the existence of `@odata.singleton.nullable`.\r\n  + Option `odataContainment: true` renders compositions as `edm:NavigationProperty` with\r\n    containment. This option is only available for OData V4 and with `--beta-mode`.\r\n\r\nChanges\r\n\r\n* CSN frontend: use faster implementation by default.\r\n* CDL frontend: issue warning for suspicious-looking delimited identifiers;\r\n  some people think that they have written strings when they use double-quotes.\r\n* Models delivered with `@sap/cds` are now resolved from `cds.home`; e.g. `using ... from '@sap/cds/common'`.\r\n  This allows working without locally inst# ChangeLog for cdx compiler and backends\r\n  This allows working without locally installed `@sap/cds`, for example in Java projects.\r\n  In that case, respective models will be fetched from a globally installed `@sap/cds-dk`.\r\n* OData:\r\n  + Improve `array of` checks and reject anonymous types and types that are not service members.\r\n  + Set draft properties  `HasActiveEntity` and `HasDraftEntity` to `Nullable: false`.\r\n* Reject old-style CSN from all CSN based transformers and renderers\r\n* `toHana` and `toSql`: Allow aliasing for foreign keys\r\n\r\nFixes\r\n\r\n* OData:\r\n  + Fix `Nullable` attribute for parameters in EDM JSON V4.\r\n  + Do not annotate `edm:NavigationProperty` for term definitions with `AppliesTo: Property` and vice versa.\r\n* Fix bug in ON Condition rendering during transformation of associations to joins for stream based `$self` expressions.\r\n* `toHana`: Only render and allow keys in the leading query\r\n* `toHana` and `toSql`: When following an association, explicitly set the implicit alias to work around a HANA limitation\r\n\r\n## Version 1.20.3\r\n\r\nChanges\r\n\r\n* Core Compiler: Forbid navigating associations (to non foreign key elements) in the ON condition\r\n  of an association definition.\r\n* OData: Do not generate `OnDelete` for Containment Navigation Propertie, as this is redundant.\r\n\r\nFixes\r\n\r\n* In `toSql` for  `Sqlite` generate `current_timestamp` for `$at`\r\n\r\n## Version 1.20.1\r\n\r\nChanges\r\n\r\n* Associations to 'abstract' artifacts and the usage of abstract entities in queries are now rejected.\r\n\r\nFixes\r\n\r\n* OData:\r\n  + Raise level from 'info' to 'warning' for excluded NavigationProperties due to targets outside the service.\r\n  + Fix a bug in mapping of `@Capabilities` (see Version 1.20.0)\r\n  + Flattening of structured elements - @cds.persistence.name was semi-flattened\r\n\r\n* CSN Input:\r\n  + Support views with parameters in queries\r\n  + Support views with parameters in on-conditions of unmanaged associations\r\n  + Support 'not null' for enum elements\r\n\r\n## Version 1.20.0\r\n\r\nChanges\r\n\r\n* Issue error (instead of a warning) if a projected association uses a non-projected element\r\n  in its `on` condition (message id `rewrite-not-projected`).\r\n\r\n* Issue error (instead of a warning) if the redirected target does not originate from the original\r\n  target of an association (message id `redirected-to-unrelated`).\r\n\r\n* In `--beta-mode` remove the annotation `@odata.draft.enabled: false` from generated\r\n  `_texts` entities. Annotate the technical foreign keys of a `_texts` entity with\r\n  `@cds.odata.v4.ignore: true` to allow containment in OData V4 for `_texts`.\r\n\r\n* In `toHana` and `toSql` associations to entities annotated with `@cds.persistence.exists` are\r\n  removed from the generated model. This is an extension to the change introduced with version 1.15.0.\r\n  If a proxy artifact shall be an association target, another 1:1 projection entity shall be created\r\n  wich then can act as the association target.\r\n\r\n* OData:\r\n  + Reject non specification compliant CSN as input to csn2edmx\r\n  + Add annotation `@cds.odata.{v2|v4}.ignore` in `--beta-mode`\r\n  + Rewrite `@Capabilities` annotation to `@Capabilities.NavigationRestrictions` at the containment\r\n    association in case an entity set has been omitted due to containment in OData V4.\r\n  + Update vocabularies `Common` and `UI`\r\n  + Improve error message when not generating a navigation property for association targets outside\r\n    the same service.\r\n\r\n* Draft:\r\n  + Raise an info message if a draft root has not exactly one primary key element of type `cds.UUID`\r\n  + Raise an info message if a draft node (subordinate to a draft root) has not exactly one primary key element\r\n    of type `cds.UUID` and optionally one more additional primary key.\r\n  + Raise an error message if the same draft node is reachable from two separate draft roots.\r\n  + Raise an info message if a service contains more than one draft root entities.\r\n  + Annotate technical elements `IsActiveEntity`, `HasActiveEntity`, `HasDraftEntity`,\r\n    `DraftAdministrativeData` and `DraftAdministrativeData_DraftUUID` with `@UI.Hidden`\r\n\r\n* CSN Input:\r\n  + New simplified parsing of CSN, can be enabled via compiler option stdJsonParser or\r\n    command line option --std-json-parser\r\n  + Support for $location\r\n\r\nFixes\r\n* Compiler:\r\n  + Correctly reject the Promise if errors occur during parsing\r\n\r\n* OData:\r\n  + Correctly render annotations with `null` values in arrays.\r\n  + Correctly render annotations with records of complex types.\r\n  + Correctly annotate artifacts with parameters. Annotations are assigned to the resulting\r\n    EntityType `<name>Type`\r\n  + Correctly flatten substructures when used as types\r\n\r\n* CSN Validation:\r\n  + Correctly process views with parameters in unmanaged associations\r\n\r\n* Make `parseToCqn()` use filter in `FROM` clause as hint for (recommended) colon, i.e.\r\n  never discard the filter.\r\n\r\n## Version 1.19.2\r\n\r\nChanges\r\n\r\n* Improve the semantic checks for `Association to many` with a partial key, not complaining\r\n  about a missing `ON` condition anymore.\r\n\r\n* HANA:\r\n  + When using `names: quoted`, raise a warning when artifacts with `@cds.persistence.exists`\r\n    belong to a CDS namespace, context or service.\r\n\r\n* OData:\r\n  + Raise an `info` message on the usage of deprectated OData vocabulary terms.\r\n  + Raise a `warning` message when applying `@odata.Type` with another type as `Edm.String`, `Edm.Int16`,\r\n    `Edm.Int32`, `Edm.Int64`.\r\n  + Support shorthand annotation `@description` for `@Core.Description`.\r\n\r\n* Never complain about `localization` views when recompiling a CSN file that has localized convenience views\r\n  already expanded. If the definition's absolute name is `localized`, it must be a context. If the definition's\r\n  absolute name starts with `localized.`, it must either be a context or a query entity. An error message is\r\n  raised in all other cases. In all cases, definitions in the namespace `localized` are ignored for further processing.\r\n\r\nFixes\r\n\r\n* Fix a dump when compiling from CSN for query elements without a `key` property that have no column\r\n  counterpart.\r\n\r\n## Version 1.19.1\r\n\r\nFixes\r\n\r\n* Make sure that we really create all localized convenience views for entities\r\n  which have localized elements, select localized elements or can directly or\r\n  indirectly reach (via navigation along associations and compositions) such entities.\r\n\r\nFeatures\r\n\r\n* Allow annotations with `@odata.Type: 'Edm.Int16'` and likewise with value `'Edm.Int32'`\r\n  and `'Edm.Int64'` to influence the type which is chosen in the generated EDMX.\r\n\r\n## Version 1.19.0\r\n\r\nChanges\r\n\r\n* Event definitions are now properly listed in the CSN:\r\n  the `kind` is `event`, the property for its members is called `payload`.\r\n* Omit redundant `kind: 'param'` for parameters in the `params` dictionary of a CSN.\r\n\r\nFixes\r\n\r\n* Do not use upcoming OData v4.01 facet values for `cds.DecimalFloat`, i.e.\r\n  revert v1.18.0 change which had added `Scale: floating` and `Precision: 34`.\r\n* In CSN frontend, support direct `{func: …}` objects in `orderBy` and `groupBy`.\r\n\r\n## Version 1.18.2\r\n\r\nFixes\r\n\r\n* Issue warning instead error when CDS type `cds.DecimalFloat` is used with OData v2.\r\n  Also issue the warning for CDS type `cds.hana.SMALLDECIMAL`.\r\n* Properly render n-ary `cross join`s, typically produced by `select from A, B, C`.\r\n\r\nFeatures\r\n\r\n* Allow to provide HANA-specific magic variables like `current_utctimestamp` via the\r\n  function syntax `current_utctimestamp()`.  Similar for `sysuuid`, `current_connection`,\r\n  `current_schema`, `current_transaction_isolation_level`, `current_utcdate` and `current_utctime`.\r\n  Support SQL Standard magic variable `system_user` (without parentheses); be aware that\r\n  it is not supported (by that syntax) in HANA.\r\n\r\n## Version 1.18.1\r\n\r\nChanges\r\n\r\n* Hide the experimental swagger backend behind `betaMode` and issue a warning even then.\r\n\r\nFixes\r\n\r\n* Properly establish EDMX partnership again between forward and backward association\r\n  even in the presense of \"hidden\" associations (v1.18.0 had introduced a bug).\r\n  Issue a warning if there are multiple (non hidden) partnership candidates.\r\n\r\nFeatures\r\n\r\n* `using from <module>` also tries file extensions `.csn` and `.csn.json`.\r\n\r\n## Version 1.18.0\r\n\r\nChanges\r\n\r\n* OData: add type facet `Scale: floating`, `Precision: 34` to `Edm.Decimal`\r\n  for mapped CDS type `cds.DecimalFloat`.\r\n  Issue __error if `cds.DecimalFloat` is used with OData v2__.\r\n\r\nFixes\r\n\r\n* If a projection in a service selects from a source in a model,\r\n  associations in the projection source are _implicitly redirected_\r\n  to a target in the service.\r\n  The corresponding redirection must also happen for the _localized convenience view_\r\n  for the projection in the service: the new target should be\r\n  the localized convenience view for the \"original\" redirection target\r\n  (if it does not exist: the \"original\" redirection target itself).\r\n\r\n## Version 1.17.3\r\n\r\nChanges\r\n\r\n* OData:\r\n  Disable proxy generation again due to too many runtime conflicts. This effectively\r\n  auto-excludes the associations as navigation properties from the service that reference targets outside the service;\r\n  properties from the foreign keys of managed associations remain.\r\n  As opposed to the pre-v1.16.2 behaviour, this only affects the OData backend.\r\n* OData: Raise error if `EntityType` has no primary key.\r\n* Raise warning if compiler is invoked in `--beta-mode`\r\n\r\nFixes\r\n\r\n* Make `annotate` statements on members of autoexposed entities and\r\n  automatically created text entities work.\r\n\r\n## Version 1.17.2\r\n\r\nFixes\r\n\r\n* Fix stack overflow bug in EDM Preprocessing\r\n\r\n## Version 1.17.1\r\n\r\nChanges\r\n\r\n* OData: Add type facet `Precision=7` to `Edm.DataTimeOffset` if CDS type is `cds.Timestamp`.\r\n* Add semantic check to prevent the usage of `hana.ST_POINT` and `hana.ST_GEOMETRY` as primary key types.\r\n\r\nFixes\r\n\r\n* OData: Do not generate `NavigationPropertyBinding` (V4) or `AssociationSet` (V2) for non-existing `EntitySet`\r\n  of the Proxy `EntityType`s introduced with Version 1.16.2.\r\n\r\n\r\n## Version 1.17.0\r\n\r\nFeatures\r\n\r\n* OData V4:\r\n  With `--beta-mode` enabled, compositions become containment navigation properties. This\r\n  is performed by annotating all compositions with `@odata.contained`. Existing assignments\r\n  are not overwritten.\r\n  Enabling containment is an incompatible change to existing OData metadata documents\r\n  as all composition targets are no longer accessible as EntitySets but only through their\r\n  container.\r\n* Release keyword `event`.\r\n\r\nChanges\r\n\r\n* OData: Update all known Odata vocabularies, this also includes SAP vocabularies which now\r\n  may contain Term definitions marked as *experimental*.\r\n* HANA Datatype Support in SQLite: Render `ST_GEOMETRY` and `ST_POINT` as `CHAR(5000)`.\r\n* Use association names as table aliases during the association to join transformation instead of\r\n  using the association target (this makes the transformed view more comprehensible).\r\n\r\nFixes\r\n\r\n* Parameter lists and filters in ON condition paths are rejected in association to join transformation.\r\n* Append the temporal `WHERE` clause to views that already have a `WHERE` clause.\r\n* View elements with @cds.valid.from/@cds.valid.key are no longer marked as key in the columns.\r\n* CSN validator accepts select statements with a having or a group by clause containing a function call.\r\n\r\n## Version 1.16.2\r\n\r\nFeatures\r\n\r\n* Introduce builtin-types for the (HANA) SQL types `SMALLINT`, `TINYINT`,\r\n  `SMALLDECIMAL`, `REAL`, `CHAR`, `NCHAR`, `VARCHAR`, `CLOB`, `BINARY`,\r\n  `ST_POINT`, `ST_GEOMETRY`.  In the CSN, they appear as `cds.hana.SMALLINT`,\r\n  ….  In CDL, they can be referred to by `hana.SMALLINT`, ….\r\n\r\n  Mapping of the types is as follows:\r\n\r\n  |CDS|HANA|SQLite|OData V4|OData V2|\r\n  |----|----|-----|--------|--------|\r\n  |SMALLINT|SMALLINT|INT|Edm.Int16|Edm.Int16|\r\n  |TINYINT|TINYINT|INT|Edm.Byte|Edm.Byte|\r\n  |SMALLDECIMAL|SMALLDECIMAL|DECIMAL|Edm.Decimal Scale=\"floating\" Precision=\"16\"|Edm.Decimal|\r\n  |REAL|REAL|FLOAT|Edm.Single|Edm.Single|\r\n  |CHAR|CHAR|CHAR|Edm.String|Edm.String|\r\n  |NCHAR|NCHAR|CHAR|Edm.String|Edm.String|\r\n  |VARCHAR|VARCHAR|CHAR|Edm.String|Edm.String|\r\n  |CLOB|CLOB|CHAR|Edm.String|Edm.String|\r\n  |BINARY|BINARY|CHAR|Edm.Binary|Edm.Binary|\r\n  |ST_POINT|ST_POINT|CHAR|Edm.GeometryPoint|n/a|\r\n  |ST_GEOMETRY|ST_GEOMETRY|CHAR|Edm.Geometry|n/a|\r\n\r\nChanges\r\n\r\n* Associations in services with targets outside the service\r\n  are not auto-excluded anymore.\r\n* OData: Create proxy `EntityType`s for association targets that are not\r\n  part of the current service. This maintains the navigation path in the\r\n  EDM model and exposes the primary key tuple of the otherwise unreachable\r\n  target. The primary keys of a proxy entity must be scalar types. No\r\n  complex types are supported. Also all outbound navigations are removed\r\n  from a proxy.\r\n* The package require node version 8 or higher.\r\n\r\nFixes\r\n\r\n* Forbid publishing associations inside unions.\r\n* Fix a bug in the creation of localized convenience views that lead to an erroneously JOIN\r\n  expression if such a view gets transformed into a SQL query with `toSql --assoc joins`.\r\n\r\n* OData: be robust against erroneoulsy assigned @odata.foreignKey4 annotation.\r\n* Improve ON condition path checks in Association to Join transformation.\r\n* Fix crash in forHana generation when determining the type of an enum.\r\n\r\n## Version 1.16.1\r\n\r\nFeatures\r\n\r\n* API: If the compiler frontend reports messages and the `compile` function\r\n  had been called without options having a `messages` property, then\r\n  the resulting CSN contains a non-enumerable `messages` property containing the messages.\r\n\r\nChanges\r\n\r\n* Removed TNT specific behaviours for HANA CDS, SQL and OData from the code.\r\n* Perform usage check of entities annotated with `@cds.persistence.skip` if\r\n  using entity really exists on the database (not annotated with `cds.persistence.table`).\r\n* Remove mixin associations with a target entity annotated with `@cds.persistence.skip` and\r\n  its select item that eventually expose this association.\r\n* csn2edm: Produce all services in a given model in one pass removing the requirement\r\n  to call the EDM transformation for each service individually. The existing API is still\r\n  compatible. If an EDM for only one service is requested, only this EDM will be produced.\r\n* Odata:\r\n  + Don't omit containee's foreign keys if they are also primary key.\r\n  + Remove warning that containment association must be `NOT NULL` .\r\n  + Support annotation `@cds.etag` as (backward compabible) replacement for `@odata.etag`.\r\n  + Update broken UI vocabulary.\r\n\r\nFixes\r\n\r\n* Make property propagation from query sources using associations work.\r\n* Consider associations in `from` clause for `on` condition rewrite.\r\n* Make the CSN parser always produce the correct result for `null`.\r\n* Propagate `@cds.autoexpose` along primary query source in all circumstances.\r\n* Make `annotate` statements on autoexposed entities work in circumstances.\r\n* Do not dump when magic variables like `$now` or `current_date` had been used\r\n  in an entitiy for which the compiler creates a localized convenience view.\r\n* Fix order problem in creation of association `DraftAdministrativeData` for draft enabled entities.\r\n* Fix runtime error in `forHana` in handling of mixin forward and backward associations.\r\n\r\n## Version 1.15.0\r\n\r\nFeatures\r\n\r\n* Release aspect `temporal`.\r\n\r\nChanges\r\n\r\n* Improve handling for entities are either `abstract` or annotated with `@cds.persistence.skip` in `toHana` and `toSql`:\r\n  + Such entities are not part of the generated database model and thus non-existing in the database schema.\r\n  + Associations/compositions to non-existing entities are removed from the generated model but not their eventually\r\n    generated foreign keys (for managed associations). An info message is raised for each removal.\r\n  + An error message is raised if a non-existing entity is used (either directly or indirectly through an association).\r\n\r\nFixes\r\n\r\n* OData\r\n  + Do not assign `@Core.AlternateKeys` for `temporal` aspects if the annotation already assigned.\r\n  + Resolve primitive return types for actions\r\n  + Mark localized _texts entities and convenience views with `@odata.draft.enabled: false`\r\n* JSON parser\r\n  + Allow JavaScript objects as input, as well as JSON\r\n\r\n## Version 1.14.1\r\n\r\nChanges\r\n\r\n* Primary key definitions are only allowed in first `union`. Raise an error if primary keys are defined in\r\n  subordinate `union` clauses when generating `toHana`.\r\n\r\nFixes\r\n\r\n* HANA CDS\r\n  + Don't generate primary keys in subordinate `union` clauses if the element is a key-element of the source entity.\r\n  + In case of multiple chained `union`s, generate all `union` clauses correctly.\r\n* OData\r\n  + Generate unique Names for `<edmx:Association>` elements in Version 2 to avoid name clashes with other entries in `<edmx:Schema>`.\r\n  + Raise error for duplicate definitions in `<edmx:Schema>`.\r\n* CSN Input\r\n  + validation - joins can have value literals in the on condition\r\n\r\n## Version 1.14.0\r\n\r\nFeatures\r\n\r\n* Support aspect `temporal` with option `--beta-mode`:\r\n  + Support magic variables `$at.from` and `$at.to`.\r\n  + OData:\r\n    - Add element annotated with `@cds.valid.from` to the key in the metadata document but not in the CSN, requiring a valid\r\n      primary key in the projection to exist.\r\n    - An element annotated with `@cds.valid.key` becomes the sole primary key in the EntityType.\r\n      Add an `@Core.AlternateKeys` annotation that lists the original primary key tuple as well as the element annotated with `@cds.valid.from`.\r\n  + SQL/HANA CDS:\r\n    - Translate `$at.from` to `SESSION_CONTEXT('VALID-FROM')` in HANA and `current_time` in Sqlite.\r\n    - Translate `$at.to` to `SESSION_CONTEXT('VALID-TO')` in HANA and `current_time` in Sqlite.\r\n    - A `WHERE` claues that allows time travel queries is generated for projection that contain exactly one element annotated\r\n      with `@cds.valid.from` and `@cds.valid.to` that stem from the same origin.\r\n    - An entity elementannotated with `@cds.valid.from` is added to the primary key tuple of the resulting database table.\r\n    - If an entity element is annotated with `@cds.valid.key`, it becomes the sole primary key of the resulting database table.\r\n* Redirect targets of associations in `localized` convenience views to their respective `localized` convenience views.\r\n  In addition to that, create a `localized` convenience view for all entities that contain associations that lead directly\r\nor indirectly (via n other association steps) to a localized entity, so that these associations can also be redirected.\r\n`Localized` convenience views are only created in case the model is error free.\r\n\r\nChanges\r\n\r\n* Allow to `extend` an entity with an empty structure\r\n* OData:\r\n  + An error is raised for entities that have become empty (no elements) due to automatic exclusion of associations.\r\n  + Update the vocabulary `UI`\r\n  + Allow multiple 'backlink' associations via `$self` ON condition, first 'backlink' establishes the partnership\r\n  + Allow 'backlink' associations to define their own target multiplicity.\r\n  + Raise a warning if the forward association is not included in the service (due to autoexclusion).\r\n  + Reclassify error on containment association to be `NOT NULL` down to a warning.\r\n  + `@cds.api.ignore` suppresses annotations.\r\n\r\n\r\nFixes\r\n\r\n* OData: Fix issues with `@cds.odata.bindingparameter.collection`:\r\n  + Correct `$Collection` to `Collection` in EDMX\r\n  + No referential constraints for NavigationProperties with target multiplicity '*'\r\n* Avoid internal errors on cyclic view definitions\r\n* Strengthen checks on reserved names\r\n\r\n\r\n## Version 1.13.4\r\n\r\nFeature\r\n\r\n* `extend projection` with elements\r\n* `extend` entity with aspect, i.e. not by specifying new elements, but via a definition which has elements.\r\n\r\nChanges\r\n\r\n* Localized convenience views (introduced in Version 1.12.0 as beta feature) are now available.\r\n  + The convenience views for views and projections are created as a copy of the regular artifact in\r\n    the `localized` namespace which selects from the corresponding localized artifacts.\r\n  + Associations within localized convenience views aren't redirected yet; they still point to their\r\n    original non-localized target.\r\n  + Convenience views for views containing associations in their `FROM` clause aren't supported yet.\r\n    For those views an `Info` message is produced stating that no convenience view could be created for the given view.\r\n  + In contrast to the beta feature it isn't required anymore to expose the `localized` association or the primary key.\r\n* The automatic exposure of entities, redirection and exclusion of\r\n  associations has been moved from `forHana` and `forOdata` post-processing into the core compiler:\r\n  + When an association is projected, the compiler checks whether all elements are propagated\r\n    which are referred to in the `on` condition of the projected association.\r\n    Please __reexamine warnings__ for your model.\r\n  + The compiler checks whether a redirection target (directly or indirectly) projects from the\r\n    original target (and/or uses the original target as structure include).\r\n  + Elements can be renamed in the redirected target and the `on` condition is rewritten correspondingly\r\n    (currently not if the projected association is an indirect one, i.e. if we project `assoc1.assoc2`,\r\n    which _was an Error in v1.12.0_) → this means that those DB artifacts can be deployed.\r\n  + When following an implicitily redirected association,\r\n    potentially renamed elements are taken into account.\r\n  + Implicit redirections fail less often as the compiler tries to find a \"minimal\" exposure.\r\n  + Auto-exposure via `Composition of` now works in all circumstances.\r\n  + Other features like \"localized\" work for auto-exposed entity and/or with implicitly redirected association.\r\n  + __Redirections for associations which are sub elements do not work__.\r\n* The name of an autoexposed entity now looks like `<Service>.<LastNamePart>`\r\n  where `<LastNamePart>` is the part of the name of the original entity after the final dot.\r\n  If you get an error because of name clashes, just expose one entity explicitly\r\n  (or use the option `longAutoexposed`).\r\n* Multiple backlink associations for one forward association make the OData backend report an error.\r\n\r\nFixes\r\n\r\n* Forward the `key` property to the select items of generated HANA CDS views.\r\n* Remove some issues of the `$projection` and `$self` handling in the association to join translation.\r\n* Add alias for select items that are primary key in HANA CDS.\r\n* Fix support for union queries in localized convenience views.\r\n\r\n## Version 1.12.1\r\n\r\nChanges\r\n* With option `--beta-mode`, automatic exposure of entities, redirection and exclusion of\r\n  associations has been moved from `forHana` and `forOdata` post-processing into the core compiler.\r\n\r\nFixes\r\n* With option `--beta-mode` in v1.12.0, a just inherited `@cds.autoexpose` had not been considered.\r\n* With option `--beta-mode` in v1.12.0, projecting indirect associations (`assoc1.assoc2`) lead to an error.\r\n\r\n## Version 1.12.0\r\n\r\nFeatures\r\n* With option `--beta-mode`, support `localized` convenience views:\r\n  Create a view named `localized.<EntityName>` for an entity with `localized` elements.\r\n  This view allows a coalesced access to `localized` elements and either returns\r\n  the default or translated content, depending on the locale setting.\r\n  + A convencience view is only created if both the `localized` association and some\r\n    localized elements are exposed in the entity.\r\n  + When exposing the `localized` association in an entity, also the complete primary key\r\n    has to be exposed, otherwise an error is thrown.\r\n* Mark calculated and virtual elements as `@Core.Computed:true`. If `@Core.Computed` has\r\n  been set manually, it remains unchanged.\r\n\r\nChanges\r\n\r\n* With option `--beta-mode`, automatic exposure of entities, redirection and exclusion of\r\n  associations has been moved from `forHana` and `forOdata` post-processing into the core compiler.\r\n  _Update to v1.12.1_ if you experience problems – an inherited `@cds.autoexpose` had not been considered.\r\n* In `toSql` and `toHana` errors are raised\r\n  + for duplicate definitions of elements that differ only in spelling,\r\n  + if the the entity is not `abstract` or annotated with any `@cds.persistence` set to true and\r\n    - an element is typed to be an `array of` a `type`,\r\n    - an implicit managed composition has cardinality to many.\r\n* Raise a warning if an element is to be `localized` which is not of type `cds.String`.\r\n\r\nFixes\r\n* OData:\r\n  + On `@Aggregation.ApplySupported.PropertyRestrictions` apply `@sap.sortable':false, '@sap.filterable':false`\r\n    at new `ID__` property.\r\n  + Allow `@Core.OperationAvailable: null`\r\n  + Abstract entities and all inbound navigation properties are removed from the metadata document.\r\n  + Non-properties are not considered as referential constraints.\r\n* Correct annotation `cds.autoexposed`.\r\n\r\n## Version 1.11.0\r\n\r\nFeatures\r\n* Support `localized` elements:\r\n  + Add sibling entity `<entityName>_texts` to store the localized content.\r\n  + Add two associations `texts` and `localized` to the original entity.\r\n  + Add view `localized.<entityName>` to retrieve either the translated or original content.\r\n* Annotate elements that are `virtual` or annotated with `@odata.on.insert` or\r\n  `@odata.on.update` with `@Core.Computed`.\r\n* Support OData `@Common.ValueList` by either\r\n  + annotating an element for which a value help entity shall be used with\r\n    `@Common.ValueList.viaAssociation`. The value is the association to the value list entity.\r\n  + annotating an entity with `@cds.odata.valuelist`. All associations targeting to this entity\r\n    are then annotated with `@Common.ValueList.viaAssociation`.\r\n  + annotating an element statically with `@Common.ValueList.entity`. The annotation value\r\n    is a static entity name and cannot be dynamically adapted during autoexposure.\r\n* Add annotation `@cds.odata.bindingparameter: {name: String, collection: Boolean }`\r\n  which allows overriding the binding parameter name and cardinality of a bound action in\r\n  OData V4. Default is: `name='in'`, `collection=false`.\r\n* Allow a colon in `FROM` and `TYPE OF` references.\r\n* Support using and publishing a mixin association in the same view when activating for HANA CDS.\r\n\r\nChanges\r\n* Produce all CSN output in version 1.0 by default.\r\n* Virtual elements cannot be used in expressions.\r\n* Command `toRename` creates a stored procedure instead of individual statements.\r\n* Don't autoexpose composition target which is annotated with `@cds.autoexpose: false`.\r\n\r\nFixes\r\n* OData:\r\n  + Rename OData annotation vocabulary `Auth` to `Authorization`.\r\n  + Correct exposure of entities with parameters:\r\n    - Set attribute `EntityType` of  element `edm:EntitySet` to the correct type\r\n    - Set attribute `EntitySet` of element `edm:End` in `edm:AssociationSet` to\r\n      the correct set.\r\n  + `EnumMember` in element `edm:Annotation` has only one delimiting slash\r\n* Rewrite ON condition of a mixin backlink association for an inferred and redirected\r\n  forward association.\r\n\r\n## Version 1.10.0\r\n\r\nFeatures\r\n* Annotate entities with `@cds.autoexposed` that are autoexposed in a service.\r\n* Always autoexpose composition targets without annotating them with `@cds.autoexpose`.\r\n* For associations in a service with targets which are not in a service:\r\n  + automatically exclude them if the associaiton is inferred (via select * or include),\r\n  + signal an error if the association is explicitly defined in the service.\r\n* Support the OData annotation vocabulary `Authorization`.\r\n\r\n\r\nChanges\r\n* Generate `null as …` for virtual view elements.\r\n* Update OData annotation vocabulary `Core`.\r\n* Change the tranlation of annotation `@readonly` at an element from `@Core.Immutable` to\r\n  `@Core.Computed` when processing for OData.\r\n\r\nFixes\r\n* Avoid unnecessary aliases for paths that terminate on an association in the FROM clause.\r\n* Fix an issue with table alias handling in Association to Join translation.\r\n* Translate type `Cds.DateTime` to SQL type `TIMESTAMP` for Sqlite.\r\n* Fix an internal error when parsing `view V as select distinct from E`\r\n* Raise an error that an empty service cannot be used to generate an OData metadata document\r\n* Correctly set the OData principal in a referential constraint for compositions with\r\n  free defined ON conditions.\r\n\r\n## Version 1.9.0\r\n\r\nChanges\r\n* Always use quotes around identifiers for `toSql` and `toHana` with `quoted` or\r\n  `hdbcds` names.\r\n* Never use quotes around identifiers for `toSql` and `toHana` with `plain` names.\r\n  Issue a warning if an identifier may conflict with a language keyword.\r\n* Generate `.hdbtable`, `.hdbview` etc. files if option `toSql.src` is `hdi` (default\r\n  `sql` generates `.sql` files).\r\n\r\nFeatures\r\n* Allow `select` clauses with standard SQL syntax (i.e. also accept `select ... from ...`\r\n  in addition to the CDS-specific form `select from ... { ... }`).\r\n* Support `count(*)` etc.\r\n* Support function calls with names arguments.\r\n* Support `aspect` definitions.\r\n\r\nFixes\r\n* Omit unused vocabularies in OData-generated EDMX files.\r\n* For `toOdata`, handle nested anonymous types correctly (also with arrays, e.g. in\r\n  action/function parameters)\r\n* Handle mixins correctly when transforming associations to joins.\r\n\r\n## Version 1.8.1\r\n\r\nChanges\r\n* With `--new-redirect-impl`, associations and compositions in services\r\n  are implicitely redirected to a (unique) projection of the original target\r\n  if the projection is \"simple and similar enough\" and defined in the service.\r\n  This is now always done, not only by the `toOdata` backend;\r\n  association targets explicitly provided in the service are not implicitly redirected.\r\n* With option `--new-csn` (or `--beta-mode`) alone, we do not properly rewrite the\r\n  `on` condition or `keys` anymore.\r\n  Use option `--assoc-on-rewrite` and `--new-redirect-impl` to do so.\r\n\r\nFixes\r\n* With `--new-redirect-impl`, the navigation along implicitly redirected associations now\r\n  properly considers that elements could have been renamed in the new association target.\r\n* With `--new-redirect-impl`, the code completion candidates are the elements\r\n  of the new association target calculated by the implicit redirection.\r\n* With `--new-redirect-impl` and `--assoc-on-rewrite`,\r\n  the `on` condition or `keys` are rewritten with implicit redirections.\r\n* With `toSwagger`, enum constants without values are now correctly rendered.\r\n* With `toSql` in `sqlite` dialect, a warning is now issued if an identifier collides\r\n  with a known SQL keyword.\r\n* For OData, annotations with `null` values are now ignored (this can also be used to\r\n  \"delete\" an annotation in an extension).\r\n* In OData, structured types that are anonymous or not exposed in a service are now\r\n  automatically exposed (unless used as an entity element - in that case they are still\r\n  flattened).\r\n* For OData v2, the namespace for service annotations is now correctly set.\r\n* For `toHana` with `plain` names, all type properties (including `length` ...) are now\r\n  propagated correctly when derived types are used explicitly in view columns.\r\n* CSN version 0.2.0 is now accepted by the compiler.\r\n\r\n## Version 1.8.0\r\n\r\nFeatures\r\n* Support the OData annotation vocabularies `PersonalData` and `Aggregation`.\r\n  The vocabulary for `PersonalData` contains a number of annotations that are flagged\r\n  as \"experimental\". Their usage will result in a warning.\r\n* New option for specifying the locale in SQLite dialect. As part of the `toSql`\r\n  command is now available the options `'-l, --locale <locale>'` for specifying\r\n  value for the \"$user.locale\" variable.\r\n\r\nChanges\r\n* Entity definitions with elements of type `array` and structure type definitions with\r\n  association elements will now lead to an error message when generating edmx for OData v2.\r\n  These constructs are not allowed in OData v2, but there was no corresponding check in the\r\n  cds compiler yet.\r\n\r\n## Version 1.7.1\r\n\r\nFixes\r\n* Restore version function which was deleted by accident\r\n\r\n## Version 1.7.0\r\n\r\nFeatures\r\n* Allow entities to have parameters. They can be referred to inside the query with\r\n  `:Param`. Entites with parameters are not allowed in `toSql` for dialect \"sqlite\".\r\n  When generating for HANA, parameters cannot be used in combination with associations:\r\n  an entity with parameters cannot have associations, and an association must not point\r\n  to an entity with parameters.\r\n* The parameters and return value of actions and functions can now have structured types.\r\n* In the annotation translation for OData, falsy values of the special variable `$value`\r\n  (that is used to provide nested annotations for scalar values) are correctly handled.\r\n* When (new-style) csn is used as input, the compiler ignores unknown attributes.\r\n* Implicit redirection and auto-exposure are now applied recursively, i.e. the associations\r\n  of an auto-exposed entity are considered for implicit redirection and auto-exposure,\r\n  if necessary.\r\n\r\nChanges\r\n* With `--new-csn`, consider `redirected to` on projected associations and\r\n  adapt the `on` condition and the `keys` specification accordingly.  There are\r\n  also Info messages if an element referred to in the `on` condition or `keys`\r\n  specification has not been projected to the new association target.\r\n  _The severity of these messages will be increased if implicit redirections\r\n  will have been performed by the core compiler._\r\n* `toHana` and `toSql` now reject entities that only contain unmanaged associations.\r\n  Such entites would lead to a deployment error later.\r\n* SQL name mapping modes `quoted` and `hdbcds` are only allowed when generating for HANA.\r\n* In the csn, the csn language version is now stored in the top level attribute `$version`.\r\n  The version information via `version.csn` is deprecated and will be removed in a future\r\n  release. The information about the creator of the csn has been moved inside the new\r\n  top level attribute `meta`.\r\n\r\nFixes\r\n* Provide code completion for references in complex select item expressions not\r\n  (yet) having an alias (complex = not consisting of just a reference).\r\n* With `--new-csn`, avoid internal error while rewriting the `on` condition\r\n  from an element of a source entity which refers to a `mixin` definition with\r\n  an `on` condition containing a reference like `$projection.<elem>`.\r\n* OData, edmx generation: correctly escape the characters `<`, `>`, `&`, and `\"`.\r\n* When an entity is auto-exposed, it's annotations are transferred to the generated\r\n  projection.\r\n\r\n## Version 1.6.0\r\n\r\nFeatures\r\n* Provide code completion for `using` declarations.\r\n* Support the OData annotation vocabulary \"Validation\".\r\n* For compositions in EDM, add `<OnDelete Action=\"Cascade\"/>` to the navigation\r\n  property where required.\r\n\r\nChanges\r\n* With `--new-csn`, complain more often about projected associations whose `on`\r\n  condition could not be rewritten correctly.\r\n* Make `associations: 'joins'` the default for `toSql` (because the default for\r\n  `dialect` is already `sqlite`, which requires joins).\r\n* Adapt the command line interface to use commands instead of the `--to...` generation\r\n  options (e.g. `cdsc toHana --src --names plain` instead of `cdsc --toHana src,plain`).\r\n  Please see the [Command Line Migration guide](doc/CommandLineMigration.md)\r\n  for details.\r\n* Add a `generated by cds-compiler version x.y.z` comment to all generated SQL and `hdbcds`\r\n  sources.\r\n* Replace the CSN validator (formerly `ajv`) with a new own implementation.\r\n\r\nFixes\r\n* With `--new-csn`, do not change references to magic variables like `$user.id`\r\n  while rewriting the `on` conditition of a projected association.\r\n* Apply OData specific checks (e.g. that all elements of an entity must have a type)\r\n  applied only to objects that are exposed in a service.\r\n* When generating SQL for SQLite, replace the the special variables `$now`, `$user.id`\r\n  and `$user.locale` by `CURRENT_TIMESTAMP`, `'$user.id'`, and `'EN'`, respectively.\r\n* Issue a warning for conflicting cardinality declarations (e.g. `association[1] to many ...`).\r\n* Handle filters with cardinality correctly when translating associations to joins.\r\n* Avoid crash when checking structured action parameters.\r\n* Handle `$self` as the first of multiple path steps correctly in `toOdata`.\r\n* In `toHana`, render the combination of enums and `type of` correctly.\r\n* In mixins generated by `toHana`, handle special variables starting with `$` correctly.\r\n\r\n## Version 1.5.0\r\n\r\nFeatures\r\n* The DDL statements in the output of `toSql` are now sorted according to kind\r\n  (views after tables), so that they can be deployed sequentially to HANA (view\r\n  dependencies not yet considered).\r\n* (Still work in progress): The output of `toSql` now also contains kind-specific\r\n  dictionaries for `hdbtable`, `hdbview` etc., which should be directly deployable\r\n  to HDI.\r\n\r\nChanges\r\n* Element definitions in multiple entity/structure extensions are now sorted\r\n  according to the layer hierarchy – elements from highest layers come last.\r\n  Report such multiple extensions only if they are potentially problematic.\r\n* The values for the `names` option of `toSql`, `toHana` and `toOdata` have\r\n  been renamed: `flat` (default) is now `plain`, `deep` is now `quoted`. The old\r\n  values are still accepted (with a warning) but **will be removed in a subsequent\r\n  release**.\r\n\r\nFixes\r\n* OData, annotation processing for v2: In a view where translation of analytical annotations\r\n  is switched on, the annotations `@Common.Text`, `@Common.Label`, and\r\n  `@Measures.ISOCurrency/@Measures.Unit` are now translated into the corresponding v2-style annotations\r\n  `sap:label`, `sap:text`, and `sap:unit`, respectively, even if the value is a path or\r\n  has a nested annotation.\r\n* OData V2, generation of EDMX: The Parameters of a FunctionImport now always have\r\n  an attribute `Nullable=\"true\"` if not specified as `not null` in CDS.\r\n* Produce better parentheses for nested set operations (`union`, `intersect`, ...) in views\r\n  for SQL output.\r\n* Correctly strip off the `enum` property of types for HANA CDS, even when derived types are\r\n  involved.\r\n\r\n## Version 1.4.0\r\n\r\nFeatures\r\n* OData, annotation processing: Provide a shortcut for the nesting of the `TextArrangement`\r\n  annotation: In order to annotate a `@Common.Text` annotation, just put an annotation\r\n  `@Common.TextArrangement` next to it.\r\n* Parameters can now be referred to with `:param`, `:1` or `?` in the parse API functions.\r\n\r\nChanges\r\n* More checks for the correct usage of `$self` and associations as values in expressions.\r\n* Backlink-Associations: When transforming an ON-condition `on $self = foo.bar`, check that\r\n  the association `bar` really points to the entity enclosing association `foo`.\r\n* Allow and transform multiple `$self`-comparisons in one association ON-condition\r\n  (but a true backlink association still requires exactly one such comparison).\r\n* Warn if a \"to many\" association or composition does not have an ON-condition\r\n  (likely not intended because the resulting managed association will at most match a single\r\n  item)\r\n\r\nFixes\r\n* Add missing `as` for flattened structured elements.\r\n* Allow `using cds;` to make the namespace `cds` explicitly known, which is\r\n  useful if that had been shadowed by a namespace declaration ending with `cds`.\r\n* OData: don't generate empty `<Annotations ...>` elements any more.\r\n* Draft for OData v2: in the `DraftRoot` and `DraftNode` annotations, the path\r\n  to the draft annotations now contains `EntityContainer`.\r\n* Improved checks for parameters of actions and functions. Inappropriate warnings like\r\n  \"The type of input parameter ... must be from the current service\" and\r\n  \"The action ... can only return an array of entities\" don't appear any more.\r\n* Correctly generate foreign key fields for associations in structured types.\r\n* For `toHana()` and `toSql()`, enclose the artificial condition resulting from\r\n  `$self`-comparisons in parentheses.\r\n* Warn properly when draft-enabled artifacts are not exposed in a service.\r\n* Do not render a full entity name for paths like `$self.foo` to SQL (just skip `$self`).\r\n\r\n## Version 1.3.0\r\n\r\nFeatures\r\n* The `using` declaration can now appear top-level also after artifact definitions.\r\n* Support for `$user.locale` and `$user.id` with HANA generation `SESSION_CONTEXT(…)`.\r\n* For entities annotated with `@odata.draft.enabled`, the generated `DraftAdministrativeData`\r\n  association for ODATA is now annotated with `@odata.contained: true` (avoiding the\r\n  generation of an `<Attribute>` for its foreign key in ODATA V4).\r\n\r\nChanges\r\n* Having just `$user` in CDL is now rendered as `{ref:['$user','id'], as:'$user'}`\r\n  in new-style CSN.\r\n* Using SQL's parameter-less functions not having parentheses (like `current_date`)\r\n  is now rendered as `{func:'current_date'}` in new-style CSN.\r\n* `betaMode` is currently required for entities with parameters.\r\n* In old-style CSN, the `on` condition as source text has been removed.\r\n* Explicit redirection of an association to a target that is completely unrelated to\r\n  the original target is now an error, not just a warning.\r\n* The API function `toI18n()` and the corresponding command line option `--to-i18n` have\r\n  been removed.\r\n* Annotation assignments after sub structure definitions, enum definitions, and\r\n  parameters are now considered an error instead of just a warning.\r\n* For bound actions and functions, the name of the corresponding function import in\r\n  OData v2 edmx is now prefixed with the name of the entity.\r\n\r\nFixes\r\n* For ODATA V2, create correct `<Principal>` and `<Dependent>` for backlink associations\r\n  having `@odata.navigable:false`.\r\n* Avoid the `Expecting artifact to be part of a service` error that occurred when generating\r\n  multiple entities with `@odata.draft.enabled` to SQL.\r\n* Generate correct (fully qualified) action names into the `@Common.DraftRoot` and\r\n  `@Common.DraftNode` annotations.\r\n* When generating the `DRAFT.DraftAdministrativeData` entity for SQL, provide proper\r\n  lengths for all `NVARCHAR` fields.\r\n\r\n## Version 1.2.0\r\n\r\nFeatures\r\n* Provide semantic code completion for the `excluding` clause.\r\n* Add support for \"deep drafts\", i.e. follow compositions from entities annotated\r\n  with `@odata.draft.enabled` (\"draft roots\") and draft-enable them as \"draft nodes\".\r\n\r\nChanges\r\n* Finalize the propagation of the `key` property.\r\n  Provide Info messages if it is not obvious why it has not been propagated.\r\n* Finalize the propagation of the `keys` property and `items` property.\r\n* Check for illegal use of `$self` and associations in expressions (may only occur\r\n  as values in an expression as part of the ON-condition in a backlink association).\r\n\r\nFixes\r\n* Produce warnings instead of errors in the translation of OData annotations.\r\n* For ODATA, in case of managed associations to draft-enabled entities, do not add\r\n  an extra foreign key for the ODATA-generated key field `IsActiveEntity`.\r\n* For HANA, in the generated draft shadow entities, redirect all associations (not\r\n  just compositions) so that they point to the draft shadow entities.\r\n* For ODATA V2, produce an `<EntitySet>` for `DraftAdministrativeData`, too. Ignore\r\n  the `@cds.odata.NoEntitySet` annotation.\r\n* For ODATA V4, do not generate `<Nullable>` for `<NavigationProperty>`s that are\r\n  collections.\r\n\r\n## Version 1.1.3\r\n\r\nFeatures\r\n* A `;` is now always optional before `}` and more often optional after a `}`.\r\n\r\nChanges\r\n* In `toOdata()` for v2, in the edmx the\r\n  **names of bound actions and functions now are prefixed with the corresponding entity's name**\r\n  in order to disambiguate actions and functions with the same name at two or more entities.\r\n  The corresponding implementation code in the CDS runtime needs to be adapted.\r\n* Check `redirected to` target.\r\n\r\nFixes\r\n* Make the compiler more robust wrt/ parse errors and redefinitions.\r\n* Correctly propagate properties inside `returns` and `items`.\r\n* Some corrections to EDM `ActionImport` and `FunctionImport` in ODATA V2 and V4.\r\n* Generate correct joins for mixin associations that are traversed with different filters.\r\n* Generate joins not only for views, but also for projections.\r\n* For entities annotated with `@odata.draft.enabled`, make all non-key fields nullable in\r\n  `toOdata()`.\r\n\r\n## Version 1.1.2\r\n\r\nFeatures\r\n* Allow reserved names for annotations/properties in assignments.\r\n* Allow final `,` for much more \"lists\" (e.g. arguments).\r\n* It is now possible to omit the select list in a view definition,\r\n  which is the same as writing `select from <name> {*}`.\r\n* Allow `array of` as type spec for a parameter definition.\r\n* SQL generation for sqlite now supports a mode where associations are resolved\r\n  to joins.\r\n\r\nChanges\r\n* Improved messages for syntax errors.\r\n* `where` now is a reserved keyword and so cannot be used anymore as name at many places.\r\n\r\nFixes\r\n* In `toOdata()` with the `hdbcds` naming convention, the value of the `@cds.persistence.name`\r\n  annotation now uses `.` rather than `_` as separator for the names of flattened structured\r\n  entity elements.\r\n* Numeric values in OData annotations are now correctly mapped to edmx.\r\n\r\n## Version 1.1.1\r\n\r\nFixes\r\n* Ignore unapplied extensions when generating HANA CDS source.\r\n* Make sure the combination of `collectSources()` and `compileSources()` has the same\r\n  effect as `compile()`, especially regarding annotation precedence.\r\n* Render annotations of `edm:Schema` correctly in for ODATA V4.\r\n\r\n## Version 1.1.0\r\n\r\nFeatures\r\n* Support `@odata.draft.enabled` without the need for option `{ betaMode: true }`).\r\n\r\nFixes\r\n* Return result of `collectSources()` as promise.\r\n\r\n## Version 1.0.33\r\n\r\nFeatures\r\n* Allow to extend query entites with actions.\r\n* Allow `select distinct`.\r\n* With `--tnt-flavor` only: allow to specify (a restricted version of) service include via syntax.\r\n* (Work in progress): New option `{ dialect: 'hana'|'sqlite' }` for `toSql()`, allowing generation\r\n  of SQL statements without HANA-specific constructs (e.g. without `WITH ASSOCIATION`).\r\n* For ODATA V4, handle associations to parameterized entities correctly.\r\n* Allow specifying `key` for projection elements (important in case of partial keys\r\n  not being propagated, see below).\r\n* Annotate entities and elements in the CSN with `@cds.persistence.name`, the name generated\r\n  for the persistence layer according to the naming convention chosen (`flat`, `deep`, `hdbcds`).\r\n* (Work in progress, only available with option `{ betaMode: true }`): Support `@odata.draft.enabled`\r\n  with `toHana()`, `toOdata()` and `toSql()`. Only draft roots so far, no compositions.\r\n\r\nFixes\r\n* Put table alias for `from` into CSN even without having it explicitly provided in CDL\r\n  if necessary (the table has been referred via a `using` with alias).\r\n* Do not assume a specific min cardinality if none was provided.\r\n* For SQL, provide table aliases when required because of `flat` naming.\r\n* Handle `@readonly` annotation correctly when applied to entities.\r\n* Various fixes to the handling of `@odata.contained`.\r\n\r\nChanges in the property propagation, see internalDoc/Propagation.md:\r\n* Propagate properties along primary sources in includes, especially actions/functions.\r\n* The propagation of `key` is more restrictive now, most notably:\r\n  only if all keys are selected (selecting sub elements of a structured key is not enough),\r\n  only if there is no navigation along a to-many association in a select item.\r\n* The propagation of `notNull` has been corrected.\r\n* The propagation of `virtual` has been corrected.\r\n* The propagation of an array type has been corrected.\r\n\r\nOther changes\r\n* For ODATA, provide min cardinality 1 for non-null associations.\r\n* Remove obsolete option `--check-model`. Instead, always perform all checks\r\n  previously hidden behind that option, possibly resulting in more warnings\r\n  (but not more errors).\r\n* Actions and functions are no longer restricted to entities within services.\r\n\r\n## Version 1.0.32\r\n\r\nFeatures\r\n* The `toHana()`, `toSql()` and `toRename()` backends now also support a naming\r\n  convention that is backward compatible to HANA CDS, with option `{ names: 'hdbcds' }`.\r\n* New API function `collectSources()` to conserve a set of compiled sources with\r\n  its hierarchy relations.\r\n* Avoid unnecessary quoting of names generated by `toHana()`, `toSql()` and `toRename()`.\r\n* Implement handling of `@cds.persistence.table`.\r\n* Support \"term casts\" in paths of ODATA annotations.\r\n* Support the `@odata.contained` annotation.\r\n\r\nChanges that only have an effect if the `--new-csn` option is set\r\n* With `--disable-propagate`, produce CSN in `gensrc` flavor:\r\n  + omit inferred elements and keys,\r\n  + omit propagated properties (like annotation assignments),\r\n  + supply annotation assignments on inferred and propagated members with an\r\n    extra `annotate` statement in the model's `extensions` property if necessary.\r\n* Without `--disable-propagate`, produce CSN in `client` flavor:\r\n  + provide inferred elements and keys,\r\n  + provide propagated properties (like annotation assignments),\r\n  + supply annotation assignments directly with the inferred member.\r\n* The `$inferred` property has been removed.\r\n* Rename `foreignKeys` to `keys` for the keys to target elements of associations.\r\n* Rename `filter` to `where` in `ref`s and omit the surrounding `{xpr:…}` of the condition.\r\n* Do not render query `columns` if no columns have been provided (only implicit `*`).\r\n* Render technical configuration correctly.\r\n* Render `select distinct` correctly.\r\n* Let also those backends that produce CSN as a by-product (e.g. `toHana()`, `toOdata()`, ...)\r\n  produce new-style CSN if the `--new-csn` option is set.\r\n\r\nOther changes\r\n* The property propagation has been changed, except with `--tnt-flavor`.\r\n  See internalDoc/Propagation.md, it is still work in progress.\r\n* Remove the special handling of namespaces ending with `::`\r\n* Sort the output of `toHana()` and `toCdl` (also within contexts and services).\r\n* When `@cds.autoexpose` is set for entities that are already exposed, use the existing\r\n  exposure for implicit redirection.\r\n\r\nFixes\r\n* An `annotate` statement on an enum symbol now has the expected effect.\r\n* Annotation `@cds.autoexposure` is renamed to `@cds.autoexpose` (like it is used in documentation)\r\n* EDM `Nullable` and `Cardinality` now handled correctly for ODATA V2.\r\n* Correctly check that elements must have a type for ODATA.\r\n* Handle structured annotation assignments and `#`-variants correctly with `toCdl()`.\r\n* For `toHana`, generate correct aliases for foreign key fields in views if the corresponding\r\n  association has an alias.\r\n* Do not propagate `@cds.persistence.table` and `@cds.persistence.exists`.\r\n* Render artifact paths in `from` correctly with `toSql()`.\r\n* In EDM, do not render `OpenType` and `Abstract` if they have default values.\r\n* For EDM annotations, correctly set `Target` according to vocabulary's `AppliesTo`.\r\n* In EDM, only set `Nullable=false` if `not null` was explicitly specified (i.e. not just for\r\n  all keys).\r\n* In EDM, handle entities with parameters correctly regarding the entity type that\r\n  is generated for the parameters.\r\n\r\n## Version 1.0.31\r\n\r\nFeatures\r\n* Support multiple imported names in `using` declaration:\r\n  `using { foo.bar, this as that } from './othermodule';`\r\n* Add new command line option `--to-rename`, generates SQL DDL statements\r\n  renaming existing HANA tables for migration (work in progress, subject to\r\n  change).\r\n* For ODATA, allow backlink associations on unmanaged associations.\r\n\r\nChanges\r\n* New error for extending views (query entities) with new elements.\r\n* Allow annotations of unknown artifacts - slightly change the name resolution\r\n  in CDL for references in top-level `extend` and `annotate` statements.\r\n* Make the client tool display info messages by default.\r\n* Make keywords `new` and `aspect` to be non-reserved.  With this change, the set\r\n  of reserved keywords of CDL is a real subset of the reserved keywords of SQL.\r\n* Remove command line options and API functions deprecated with v1.0.24.\r\n* In ODATA V2, reuse the `edm::Association` of the original association for backlink\r\n  associations.\r\n\r\nFixes\r\n* Miscellaneous fixes for CSN with option `--new-csn`.\r\n* Avoid internal error by not running extra checks after compilation with error.\r\n* Propagate defaults and `@odata.Type` annotations from keys to generated foreign\r\n  key fields of associations.\r\n* Do not render annotations of subqueries to HANA CDS.\r\n* Suppress `$projection` in ON-conditions for ODATA.\r\n* When looking for candidates for implicit redirection, follow `FROM` sources of\r\n  views/projections and `:`-includes of entities transitively, not just for one level.\r\n  (Please note that this fix **may uncover errors in existing models** where implicit\r\n  redirection now fails because of multiple candidates. Use explicit redirection to\r\n  resolve this to one of the candidates, as suggested in the error message).\r\n* For ODATA and HANA CDS, recognize and transform backlink associations also if the\r\n  condition is in (redundant) parentheses.\r\n* For HANA CDS, replace enum literals in defaults by their values.\r\n* Reject paths in defaults.\r\n\r\n## Version 1.0.30\r\n\r\nFeatures\r\n* Complex queries (with joins, sub-selects etc.) are now supported.\r\n\r\nChanges\r\n* Both `toHana()` and `toSql()` now use `flat` names by default (specify\r\n  options `{ names: 'deep' }` to get the old behavior). The CSN version\r\n  currently starts with `0.1` for `flat` names, with `0.0` for `deep`.\r\n  This is likely to be adapted again later.\r\n* Using `Annotate` on unknown artifacts or members now only leads to an info\r\n  message, not an error anymore.  The CSN with option `--new-csn` then has\r\n  an `extensions` property containing the effective assignments.\r\n* Downward compatibility for `@cds.odata.navigable` was finally removed\r\n  (see 1.0.11, use `@odata.navigable` instead).\r\n\r\nFixes\r\n* Render table aliases correctly for HANA CDS when an entity is used in\r\n  `from` that is aliased by a `using` declaration.\r\n\r\n## Version 1.0.29\r\n\r\nFeatures\r\n* Support the generation of multiple services with `--to-swagger`.\r\n* Support `SELECT DISTINCT`.\r\n\r\nChanges\r\n* Improve smart wildcard handling: simple projections with just redirections now\r\n  have the original element order of the source.\r\n* Restrict `limit` and `offset` value to number (and `null`).\r\n* There is a warning for `key` elements outside entities or views, as an inner\r\n  `key` specification would be ignored for implicit foreign keys and propagation.\r\n* Change propagation of the `key` property: see internalDoc/Propagation.md. Most\r\n  notably, in a view/projection the `key` property is no longer propagated along\r\n  association navigation.\r\n\r\nFixes\r\n* Entities that contain only virtual elements or are empty (recursively) are\r\n  now rejected for HANA CDS, unless they are abstract (was only partly checked before).\r\n* Multiply nested structs in views or projections are now correctly rendered to\r\n  HANA CDS (avoiding a completely unrelated error message complaining about\r\n  extensions).\r\n\r\n## Version 1.0.28\r\n\r\nFeatures\r\n* The mapping of cds to edm types can be overridden by the annotations\r\n  `@odata.Type` and `@odata.MaxLength`. Currently only `Edm.String` can\r\n  be used as target type. This is intended for exceptional cases, where\r\n  the standard type mapping is not wanted (e.g. if `UUID` should be mapped\r\n  to `Edm.String` rather than `Edm.Guid`).\r\n\r\nFixes\r\n* Issue an error, if an association element that is defined in a mixin of the\r\n  same view is explicitly redirected. Up to now this modelling error was not\r\n  recognized and led to the generation of incorrect HANA CDS models.\r\n* We now also allow query entities and their elements to use as type, relaxing\r\n  a check introduces with v1.0.26.\r\n  It needs to be seen whether we allow entites as type only for actions.\r\n\r\n## Version 1.0.27\r\n\r\nChanges\r\n* The `implemented in` clause of entity definitions **has been removed** and will now\r\n  cause a syntax error (this clause is obsolete since version 1.0.21, see corresponding\r\n  changelog entry). Replace it by one of these annotations:\r\n  + use `@cds.persistence.exists` to indicate that an object should not be\r\n    created in the database because the database object already exists.\r\n  + use `@cds.persistence.skip` to indicate that an object should not be\r\n    created in the database because it is implemented in the service layer.\r\n\r\n## Version 1.0.26\r\n\r\nFeatures\r\n* For annotation assignments outside array values,\r\n  allow paths and variants, not just identifiers as keys in structure values.\r\n\r\nChanges\r\n* In `flat` mode, the `toHana` channel will reject quoted identifiers in definitions.\r\n* Smart `*`: just issue a warning if a select item \"overwrites\" an element\r\n  coming from the wildcard.  Might even be downgraded to an Info message in the future.\r\n* Artifact references are checked for plausibility:\r\n  only allow entities as association and composition target and\r\n  for the `select from` clause (allow to navigate along associations there, too),\r\n  only allow (non-query) structures for structure includes,\r\n  only allow types (and entities) and their elements as types.\r\n* Implicit redirection of associations is now also performed for HANA CDS (as it was\r\n  already for ODATA).\r\n\r\nFixes\r\n* IDE support: improve syntactic code completion, and messages for parse errors.\r\n* OData: correctly escape special xml characters in generated edmx.\r\n\r\n## Version 1.0.25\r\n\r\nChanges\r\n* Better command line error reporting for `cdsc`.\r\n\r\nFixes\r\n* Render anonymous structured types correctly to HANA CDS (no `:`).\r\n* Handle structured elements with aliases in views and projections correctly.\r\n* Flatten structured view elements for ODATA (like for HANA CDS).\r\n\r\n## Version 1.0.24\r\n\r\nFeatures\r\n* The `toHana()` channel now also supports the option flag `toHana.names:'flat'`.\r\n  This option affects how the names of database objects and their columns are built.\r\n  This option **will become the default in one of the next versions**.\r\n  The old behavior can then be enforced with option flag `toHana.names:'deep'`.\r\n  With option flag `flat`, ...\r\n  + all names are converted to uppercase\r\n  + in object names, `_` is used as separator instead of `.`\r\n\r\nChanges\r\n* The new command line tool `cdsc` is going to replace the old `cdsv`, which is deprecated **and will\r\n  be removed soon**. Please see the [Command Line Migration guide](doc/CommandLineMigration.md)\r\n  for details.\r\n* New API \"backend\" functions (i.e. those that generate output from a CSN model) are going to replace\r\n  the existing ones. The old API functions `toHanaCdl`, `forHana`, `toOdataOutput`, `exportAnnotations`,\r\n  `exportAnnosUi5Style` and `toSqlDdl`, are deprecated **and will be removed soon**. Please see the\r\n  [API Migration guide](doc/ApiMigration.md) for details.\r\n* ODATA JSON output can no longer be generated for V2 (there is no valid V2 JSON format).\r\n* When generating the CSDL JSON for OData v4, enum values now have an additional attribute `$EnumMember@odata.type`.\r\n  This addition reflects an amendment of the specification of CSDL JSON.\r\n\r\nFixes\r\n* Do not try to find table aliases for references consisting of a single identifier,\r\n  i.e., a column named `x` in the select list is also found\r\n  if the table alias or the table itself has been named `x`, too.\r\n* Fix unjustified message about a undefined reference in `mixin` definitions\r\n  when a reference starting with `$projection` accesses\r\n  a nested element or an element which has been added to the query via `*`.\r\n* Check that ON-conditions of unmanaged associations do not traverse other unmanaged associations.\r\n* When generating EDM, ignore aliased elements in ON conditions of redirected associations.\r\n* Guarantee a deterministic artifact processing order even if async calls are involved.\r\n* When generating edmx for OData v2, referential constraints for entities with multi-part keys\r\n  are now correctly rendered.\r\n\r\n## Version 1.0.23\r\n\r\nChanges\r\n* When generating for Swagger, handle TNT-specific features more gracefully.\r\n\r\n## Version 1.0.22\r\n\r\nFixes\r\n* IDE support: improve syntactic code completion, and messages for parse errors.\r\n* Fix behavior of `@cds.persistence.exists` for HANA CDS (generate correct `using`,\r\n  avoid empty contexts).\r\n* Strip `key` from structured type elements when generating for HANA CDS.\r\n\r\n## Version 1.0.21\r\n\r\nChanges\r\n* The CSN element property `notNull` is not inherited anymore\r\n  if the `select`/`projection` items whose path refering the source element\r\n  navigates along associations or compositions.\r\n* Annotation assignments which are placed after the name of `context` or `service` definitions\r\n  must now use the `@(...)` syntax variant if a value is supplied,\r\n  the same restriction already applies for all other definitions.\r\n  This new syntax restriction can be disabled with option `tntFlavor`, and\r\n  re-enabled with its new sub option `skipSloppyAnnoAssignments`.\r\n* The syntax `implemented in` is deprecated. It is replaced by two new annotations:\r\n  + use `@cds.persistence.exists` to indicate that an object should not be\r\n    created in the database because the database object already exists.\r\n  + use `@cds.persistence.skip` to indicate that an object should not be\r\n    created in the database because it is implemented in the service layer.\r\n* The shortcut for the value list annotation has been simplified, you now can just type\r\n  `@Common.ValueList.entity:'SomeValueList'`\r\n\r\nFixes\r\n* IDE support: improve semantic code completion.\r\n* Self-associations are now handled correctly in the ODATA generation.\r\n\r\n## Version 1.0.20\r\n\r\nFeatures\r\n* For Swagger, one parameter of an action or function can now be selected to become\r\n  the request body, by annotating it with `@Swagger.parameter: 'requestBody'`.\r\n* The shortcut for value help annotation `@Common.ValueList:{ type:#fixed, entity:'SomeValueList' }`\r\n  is now generally available.\r\n* For associations in ODATA that have targets outside the service, projection-like views\r\n  are now also considered as implicit redirection targets (not just projections).\r\n\r\nFixes\r\n* Type properties like `length` are now omitted when generating an ODATA property `Edm.Stream`.\r\n* Nested annotations for ODATA are now handled correctly.\r\n* The transformation of backlink associations for HANA CDS is now more robust against\r\n  artifact processing order.\r\n\r\n## Version 1.0.19\r\n\r\nChanges\r\n* Allow aliases in projections for HANA CDS (although not 100% watertight in all cases).\r\n\r\nFeatures\r\n* Entities annotated with `@cds.autoexposure` are now automatically exposed in a service\r\n  (by means of a full projection) when they are used as association targets\r\n  within that service.\r\n\r\nFixes\r\n* The `$user` variable is now correctly expanded to `SESSION_CONTEXT('XS_APPLICATIONUSER')`,\r\n  with only one underscore.\r\n* The `--check-model` option is now more robust against the order of artifacts in the\r\n  model.\r\n* Enum types are now always reduced to their base type for HANA CDS.\r\n* Options given to the compiler or one of the post-processing functions are now always\r\n  handed down together with the model.\r\n* The query clauses `LIMIT` and `OFFSET` are now really enabled (were accidentally still\r\n  left in beta).\r\n\r\n## Version 1.0.18\r\n\r\nChanges\r\n* Compiler now complains if an entity exposed for ODATA has an element without a type.\r\n* View and projection elements in CSN now always have a `value` property (possibly\r\n  with a path).\r\n\r\nFeatures\r\n* For ODATA, now also the annotations from the Analytics vocabulary are translated.\r\n\r\nFixes\r\n* Workaround for a HANA CDS issue: When providing `LargeString` or `LargeBinary` as\r\n  explicit type for a view element, HANA CDS runs into an error during the deployment\r\n  of the generated HANA CDS (fix pending). This error can be prevented by annotating\r\n  the corresponding elements in CDX with `@cds.workaround.noExplicitTypeForHANA`.\r\n* `not null` at a managed association is no longer added to the corresponding\r\n  unmanaged association in HANA CDS, but only to the foreign keys.\r\n* When a redirected association is used as a view element, the select item for the\r\n  corresponding MIXIN is now correctly rendered for HANA CDS and CDL (accidentally had\r\n  an explicit association type).\r\n* MIXINs that are explicitly added to views are now correctly generated for HANA CDS\r\n  (were accidentally duplicated).\r\n* Do not complain about `@Core.MediaType` for key-less entities.\r\n\r\n## Version 1.0.17\r\n\r\nChanges\r\n* Correct license in `package.json`\r\n* `toSwagger` takes in mind only artifacts from services\r\n\r\nFixes\r\n* Handle type `cds.UUID` correctly when generating SQL.\r\n* Handle associations in GROUP BY and ORDER BY correctly when generating HANA CDS.\r\n* When generating MIXINs for associations in HANA CDS views, use an alias to avoid\r\n  conflicts with association usage in the SELECT.\r\n* Wrap bound action and function definitions in an array when generating EDMX.\r\n\r\n## Version 1.0.16\r\n\r\nChanges\r\n* Allow artifacts to be defined in namespace `cds.foundation`.\r\n\r\nFeatures\r\n* Support the remaining query clauses `group by`, `having`, `order by`\r\n  (with optional `asc`/`desc` and optional `nulls first`/`nulls last`),\r\n  and `limit` (with optional `offset`).\r\n* Support the magic variables `$now` and `$user`.\r\n\r\nFixes\r\n* Complain about artifact extensions inside context/service extensions.\r\n* For ODATA, add a `$Partner` attribute to `edm:NavigationProperty` when\r\n  appropriate for bi-directional asociations.\r\n\r\nThere is a [new document](doc/ErrorMessages.md) which explains some error messages\r\n(more messages will be added in the future).\r\n\r\n## Version 1.0.15\r\n\r\nChanges\r\n* More checks for correct ODATA input (element names, keys, ...).\r\n\r\nFeatures\r\n* Allow `redirected to` in `select` items of views.\r\n* Support the `@Core.MediaType` annotation for ODATA.\r\n\r\nFixes\r\n* Correct bug in the calculation of the `_finalType`,\r\n  which could lead to an internal error within the `odata` backend.\r\n* Properly resolve filter conditions in the `from` clause of `select`,\r\n  as we do in value expressions/conditions.\r\n* Translate associations and filters in `FROM` correctly to HANA CDS.\r\n* Avoid error with `undefined` when checking annotations with structs in arrays.\r\n* Provide correct defaults for `$Nullable` in ODATA V4.\r\n\r\n## Version 1.0.14\r\n\r\nChanges\r\n* Preserve the `key` properties of elements selected in a view (like we do in projections).\r\n* Improve the CSN representation for views.\r\n  Represent the `where` and `on` condition of `select`s like other conditions.\r\n* Project name in github is now `cap/cds-compiler`.\r\n\r\nFeatures\r\n* Support `select *` in views.\r\n* First version of transformation into OpenAPI json with `--to-swagger` option, more about it [here](doc/toSwagger.md)\r\n\r\nFixes\r\n* Resolve the `on` condition for associations defined in the `mixin` clause of a `select`.\r\n* Produce correct `using` directives with `--to-hana` for artifacts with `implemented in`.\r\n* Handle mixins and expression elements in views correctly with `--to-hana`.\r\n* Improve annotation assigment checks with `--check-model`.\r\n* Check that type declarations for ODATA do not contain anonymous struct types.\r\n\r\n## Version 1.0.13\r\n\r\nChanges\r\n* Rename project from `@sap/cdsv` to `@sap/cds-compiler`. Note that you will likely\r\n  __need to adapt your `package.json`__ because of that.\r\n* Check that no sub-`select`s are used in expression and conditions\r\n  (currently: path filters and `on`-conditions of unmanaged associations);\r\n  in views, they are only allowed with option `--beta-mode`.\r\n\r\nFeatures\r\n* Support the `mixin` clause in `select`s (to add unmanaged associations to a `view`).\r\n* Support extending `enum` types (and elements where the `enum` type has been\r\n  defined in-place), and annotating existing enum symbols.\r\n\r\nFixes\r\n* Recognize function calls without parentheses (like `current_data`)\r\n  in all expressions and conditions (not just in `select` items and the `where` condition).\r\n* Make layer computation respect all `using from`-dependencies.\r\n* Make the compiler more robust regarding incomplete/unexpected sources.\r\n* During annotation propagation in the ODATA preprocessing, handle overwriting of\r\n  annotations correctly.\r\n* Fix foreign key checks with `--toHana`.\r\n* The key generated for analytical views now has the name `ID__`.\r\n\r\n## Version 1.0.12\r\n\r\nChanges\r\n* The `--odata-and-hana-output` no longer contains the plain compiled CSN but the result\r\n  of the ODATA-specific preprocessing step. Dito for the API function `cdsv.toOdataOutput`.\r\n\r\nFeatures\r\n* For analytical views (those annotated with `@Aggregation.ApplySupported.PropertyRestrictions`),\r\n  transform keys appropriately.\r\n\r\nFixes\r\n* Views are now handled like projections by `--toHana` (regarding struct flattening and\r\n  transformation of association-typed elements into mixins).\r\n\r\n## Version 1.0.11\r\n\r\nChanges\r\n* Check that user code does not define artifacts in namespace `cds`.\r\n* It is an error to have two assignment for the same annotation on the same artifact/member\r\n  in the same file/layer (see Features below),\r\n  even if one is via `extend` and the other via `annotate`\r\n  (both still overwrite assignments provided with a definition).\r\n\r\nFeatures\r\n* Allow arbitrary expressions and comparison operators in ON-condition of unmanaged associations\r\n  (note: in EDMX, SQL functions that are called without parentheses like `CURRENT_DATE` are not yet supported)\r\n* Annotation assignments are now _layer_-aware:\r\n  an annotation assignment in file _A_ overwrites a annotation assignment in file _B_\r\n  if file _A_ directly or indirectly depends (via `using…from`) on file _B_, but not the other way round.\r\n* New syntax variant `using from '<module>'` (without an artifact name)\r\n  to just add `<module>` to the model (and introduce a dependency between the two files).\r\n\r\nFixes\r\n* Reintroduced attribute `nullable` for function import parameters in edmx generation for OData V2\r\n* Better handling of paths for `--to-hana` in views and projections by using aliases.\r\n* SQL functions without parentheses (like `CURRENT_DATE` etc.) now correctly rendered with `--to-hana`.\r\n* TNT only: Handle `@odata.navigable` like `@cds.odata.navigable`\r\n\r\n## Version 1.0.10\r\n\r\nChanges\r\n* When using the command line tool to generate edmx files, the file names have changed:\r\n  + the file name now contains the exact service name (dots are preserved and no longer replaced by underscore)\r\n  + suffix `default` has been removed\r\n* Removed obsolete command line options `--old-cdl` and `--new-cdl`\r\n\r\nFeatures\r\n* Backlink associations now also work for unmanaged associations\r\n* Support for `WHERE` condition in views\r\n\r\nFixes\r\n* Views are now rendered as EntitySet/EntityType in edmx\r\n* Abstract entites do not appear as EntitySet/EntityType in the generated edmx\r\n* `--to-hana` now correctly handles type casts in view definitions\r\n* In the generated edmx for OData V2, inside a `ReferentialConstraint`, the elements `Dependent` and `Principal` now have the correct order\r\n* Remove attribute `nullable` for function import parameters in edmx generation for OData V2\r\n\r\n## Version 1.0.9\r\n\r\nChanges\r\n* With `--to-hana` the `$self` identifier is replaced by the absolute name of the\r\n  current artifact, when it is part of a path.\r\n* TNT only: Remove obsolete skip options, add new skip options for remaining special cases.\r\n* Check that non-abstract entities must have a key for ODATA.\r\n\r\nFeatures\r\n* (experimental) Introduce shortcut for the value help annotation: `@Common.ValueList:{ type:#fixed, entity:'DeliveryStatus' }`\r\n\r\nFixes\r\n* Also consider annotations of bound actions in the edmx generation.\r\n* Detect illegal cycles with managed associations.\r\n* Remove `key` property from a managed association which is transformed into an unmanaged one.\r\n* Do not swallow `key` in select items of views.\r\n* Handle backlink associations correctly in projections and structs.\r\n* For HANA and ODATA, correctly flatten paths starting within structs.\r\n* With `--export-annotations`, also export view annotations.\r\n* For nullable keys, let corresponding association foreign keys be nullable, too.\r\n* Handle implicit redirections within structs correctly\r\n* Render included (inherited) types and projections with `implemented in` correctly with `--cdl-output`\r\n\r\n## Version 1.0.8\r\n\r\nChanges\r\n* The `namespace` declaration now constructs a `.`-connected namespace,\r\n  use (final) `::` to construct a `::`-connected namespace.\r\n  The `nameprefix` declaration is considered obsolete (and leads to a warning).\r\n* Non-context/service artifacts cannot be named like a namespace.\r\n* New implementation of `--to-hana`, `--cdl-output` and `--odata-and-hana-output`\r\n  produces one `hdbcds` file per top-level artifact (instead of trying to emulate\r\n  the input source structure). Old implementation can still be used by specifying\r\n  `--old-cdl` (will be __removed in next version__).\r\n\r\nFeatures\r\n* Allow path when defining new artifacts.\r\n  You can refer to a namespace in a `using` declaration`.\r\n* Support simple single-source views, which can have expressions in select items\r\n* With option `--beta-mode`, support multi-source views without `union` and `join` -\r\n  work in progress.\r\n* Support more expressions: Path filters, `case`, `is null`, `not`, parentheses,\r\n  unary `-`, quantifiers (`any`, `all`, ...), `between`, `like`, SQL functions.\r\n* Allow CDL files without definitions or extensions.\r\n* Initial support for semantic code completion.\r\n* Annotation assignments can be written at more places (consistently).\r\n* Support structured elements in entities (flattened for ODATA and HANA CDS).\r\n* Support backlink associations for `--to-hana` and `--odata-and-hana-output`\r\n\r\nFixes\r\n* All redefinitions in a source now lead to an error message.\r\n* Always do `--to-hana` checks when necessary.\r\n* With the new implementation, `--to-hana`, `--cdl-output` and `--odata-and-hana-output`\r\n  now handle namespaces, `using` aliases, associations in projections,\r\n  enums in entities, default values, strings without length, structured types,\r\n  managed associations and quoted identifiers correctly.\r\n* Keys can now have the attribute `null` (unless generating for HANA, which does not\r\n  support that)\r\n* Correctly determine multiplicity for backlink associations.\r\n\r\n## Version 1.0.7\r\n\r\nFeatures\r\n* Support for analytical annotations in ODATA V2\r\n* Deprecated`Common.FilterExpressionRestrictions` in favor of `Capabilities.FilterRestrictions.FilterExpressionRestrictions`\r\n* `--to-hana`: Transform managed associations to unmanaged associations (with foreign key fields generated with `_` and\r\n  appropriate ON-conditions). Please note that this __results in different field names on generated HANA tables__.\r\n\r\nFixes\r\n* Handle annotations `@Analytics.Measures`  and `@Semantics.*` annotations correctly\r\n* Check that services and contexts are not illegally nested\r\n\r\n## Version 1.0.6\r\n\r\nFeatures\r\n* Support for the `from` clause of the `using` declaration, see [the README file](README.md#using-from).\r\n\r\nFixes\r\n* EDMX generation for annotations: if an annotation value is an expression that is not a CDS path,\r\n  dots are no longer replaced by slashes\r\n* `--to-hana`: Handle the target of associations inside views with mixins correctly, when `redirected to` is used\r\n* Handle enums and structured types correctly in ODATA transformation\r\n* TNT only: Apply implicit redirection also to CSN output of ODATA translation\r\n* TNT only: Fix options `skipGeneratedFKsWithout_` and `skipAssociationSetsWithTo`\r\n\r\n## Version 1.0.5\r\n\r\nFixes\r\n* Added new dependency on npm module \"resolver\" to npm-shrinkwrap.json\r\n\r\n## Version 1.0.4\r\n\r\nFeatures\r\n* Support for function `SESSION_CONTEXT` in the on ON-condition of unmanaged associations\r\n* The keyword `annotate` can be used to annotate actions and functions\r\n* Annotation translation mechanism works for annotations at actions/functions and their parameters\r\n* Error messages that refer to csn files as input have position information\r\n\r\n## Version 1.0.3\r\n\r\nFeatures\r\n* Automatic redirection of associations: When a service contains a projection on an entity with an association\r\n  with a target that is not part of the service, the association is now automatically redirected to a corresponding\r\n  entity/projection in the service, if this new target can be determined uniquely (via following projections or includes)\r\n* `--to-hana`: now correctly handles elements of type `Composition`, they are translated to `Association`\r\n* Support for annotation `@odata.etag` for enabling optimistic concurrency handling in the (v2) OData provider\r\n* Support for managed associations as foreign keys of managed associations\r\n\r\nFixes\r\n* Generated foreign key elements are now correctly marked as `key` if their association is a key element\r\n\r\nOther\r\n* Removed the message \"compiled successfully\"\r\n* A `service` can now be extended by `extend service` instead of `extend context`\r\n  (the latter still works, but __might lead to a compiler warning in the future__)\r\n\r\n## Version 1.0.3-RC3\r\n\r\nFixes\r\n* Disable EDMX schema aliases again (apparently, not all consumers can properly digest them)\r\n* TNT-specific `@extends`: Multiple services exposing the same inherited context with different redirections\r\n\r\n## Version 1.0.3-RC2\r\n\r\nFeatures\r\n* Support for `virtual` elements\r\n* More semantic checks for actions, functions and managed associations\r\n* Generation of CSDL JSON (work in progress)\r\n\r\nFixes\r\n* CDS annotations with \"inline CSDL JSON\" now also support `$LabeledElement`\r\n* Version number now consistent with suffix like `-RC2` in all places\r\n* EDMX schema aliases now use last part of service name (no dots allowed)\r\n\r\n## Version 1.0.3-RC1\r\n\r\nFeatures\r\n* Command line parameter `--new-odata' is deprecated and has no effect any more (it is ignored).\r\n  Providing this parameter __will lead to an error in future versions__, so please don't use it anymore\r\n* New command line parameter `--odata-preprocessing`: For internal testing only (displays intermediate CSN).\r\n* CSN now contains a `version` attribute (no strict semantic versioning yet, though)\r\n* Allow \"inline CSDL JSON\" attributes to be transported through CSN to EDM annotations (still limited to a few use cases)\r\n* Allow managed associations with `--to-hana` (work in progress)\r\n* More semantic checks for actions and functions\r\n* Support for multiple services in one model. This results in changes to the return value of `cdsv.toOdataOutput` resp. `toTntSpecificOutput`.\r\n  EDMX results (metadata and annotations) are now provided per-service in a dictionary `services`. For backward compatibility, the old return\r\n  value attributes are additionally provided if there is only one service. This __will be abandoned in future versions__.\r\n* Support for entities with parameters in EDMX\r\n\r\nFixes\r\n* Fiori annotation translation for OData v2: Correctly set xmlns attribute for EntitySet annotations\r\n* EDMX generation for actions/functions: Correctly set attribute `EntitySet` in `FunctionImport` or `ActionImport` if the return type is entity or array of entity\r\n* TNT-specific: Ignore annotation \"CoreModel\" in the translation to EDMX\r\n* Various fixes for ReferentialConstraints in EDMX\r\n\r\n## Version 1.0.2\r\n\r\nFeatures\r\n* `implemented in <id>`: Allow wider range of identifier; using `calcview` as identifier is deprecated and __will lead to an error in one of the next versions__,\r\n  please\r\nchange to another identifier\r\n* Allow literals in ON-condition of unmanaged associations\r\n* Name resolution in association definition\r\n\r\nFixes\r\n* Alerts are now sent to `stderr`\r\n* Correct rendering of type `Time` in EDMX v2\r\n\r\n## Version 1.0.1-MS1\r\n\r\nFeatures\r\n* New implementation of name resolution (according to [spec](doc/NameResolution.md)\r\n* Support for bound and unbound actions and functions\r\n* More semantic checks\r\n* Support for `implemented in` (HANA)\r\n* EDMX generation now also for ODATA V4\r\n\r\nFixes\r\n* `skip` options of TNT-flavor now working correctly (TNT only)\r\n* Fixed bug affecting elements called `items` (TNT only)\r\n* Correctly handle `TypeDefinition` in annotations EDMX\r\n\r\n## Version 1.0.0-MS9\r\n\r\nFeatures\r\n* Support for bound functions\r\n* EDMX annotations: Support pseudo-nested annotations, multiple enum values\r\n* New option `--export-annos-ui5-style` for localized annotations\r\n\r\nFixes\r\n* Various fixes for annotation assignment checks\r\n* HANA CDS output now with source files like original (fixes issues with `using`)\r\n* Fixed multiplicity for EDMX V2\r\n* EDMX output: Reject ON-conditions that cannot be expressed in EDMX, reject structured elements, allow service-less input\r\n* EDMX annotation generation: More checks, better error messages\r\n* Compiler: Better handling of errors on top of errors\r\n\r\n## Version 1.0.0-MS8\r\n\r\nFeatures\r\n* First primitive type checks with '--check-model'\r\n\r\nFixes\r\n* TNT-specific: It is in fact `@com.sap.gtt.core.CoreModel.Indexable` that should not be propagated\r\n\r\n## Version 1.0.0-MS7\r\n\r\nFixes\r\n* Render view target paths in HANA CDS output like in original source\r\n* Various fixes for EDMX generation (XML namespace headers, `EntitySet`, `EntityType`, multiplicity, ...)\r\n* Structured elements in projections not yet supported for `--to-hana`\r\n\r\nFeatures\r\n* TNT-specific: Do not propagate `@CoreModel.Indexable`\r\n* New primitive datatype `UUID`\r\n* New option `--check-model` (work in progress, starting with annotations)\r\n* Option `--odata-and-hana-output` now also produces combined V4 EDMX file\r\n\r\n## Version 1.0.0-MS6\r\n\r\nFixes\r\n* Really do not use plural form of entity names anywhere in ODATA\r\n* Properly complain about (most) incomplete/unsupported features\r\n\r\n## Version 1.0.0-MS5\r\n\r\nFixes\r\n* Use all `using` declarations for HANA CDS\r\n* Do not use plural form of entity names for EntitySet in ODATA\r\n\r\n## Version 1.0.0-MS4\r\n\r\nFeatures\r\n* Allow multiple `ReferentialConstraint` nodes for ODATA (`--new-odata` only)\r\n* Support `abstract`, `BaseType`, `TypeDefinition` for ODATA (`--new-odata` only)\r\n* Digest association `ON`-conditions properly\r\n* Support default values for entity elements\r\n* Allow projections with actions\r\n* Support `implemented in` for entities\r\n* Produce combined EDMX file, too (containing both metadata and annotations)\r\n* Support `redirected to` for associations in projections\r\n* Allow CSN files as compiler input\r\n\r\nFixes\r\n* Preserve original order for elements and actions in EDMX\r\n* Handle association cardinality properly for HANA CDS output\r\n* New implementation of EDMX annotation processor\r\n* Handle HANA-specific primitive types correctly (`LocalDate`, `UTCDateTime`, ...)\r\n\r\n## Version 1.0.0-MS3\r\n\r\nDelivery\r\n* Now available as scoped module `@sap/cdsv`\r\n\r\nFeatures\r\n* New command line option `--odata-and-hana-output <dir>` to produce EDMX, HANA CDS and CSN output\r\n* New command line option `--new-odata` to select the new ODATA backend implementation\r\n* New command line option `--odatav4` to produce EDMX metadata with ODADA V4\r\n\r\n## Version 1.0.0-MS2\r\n\r\nFeatures:\r\n* Allow property files as compiler input (for i18n)\r\n* Support managed associations with explicit foreign keys (for ODATA)\r\n\r\nFixes:\r\n* Improved automatic re-targeting of associations based on exposure\r\n* Correct EDMX annotations for `Communication.Contact`\r\n* Complete EDMX primitive type support\r\n* Handle `one/many` cardinality correctly in HANA CDS output\r\n* Provide complete type properties for projection elements\r\n* Add `indexNo` also for action parameters\r\n* Handle `self`-associations correctly in EDMX\r\n\r\n## Version 1.0.0-MS1\r\n\r\nFeatures:\r\n* Allow multiple includes for entities\r\n\r\nMiscellaneous:\r\n* Improvements for delivery\r\n* Cleanup of TNT-specific and not-yet-really-supported features\r\n\r\n<!-- markdownlint-disable -->\r\n\r\n## Version 0.0.5: Make cdsv usable for early adopters like TNT\r\n\r\nMake TNT usage case work:\r\n*   Produce special output for TNT: `annotations.xml`, `metadata.xml` and `csn.json`.\r\n*   Add full TNT model, and smaller TNT examples as tests\r\n    → produce same output as produced by prototype.\r\n*   Adopt CSN format to a format expected by TNT (with option `--tnt-flavor`)\r\n\r\nExtended functionality:\r\n*   Support property files for internationalization (export and import).\r\n*   Support generation of CDL (CDS language source) from CSN,\r\n    with or without transformations to make it HANA-CDS compatible.\r\n*   Started support to compile CSN files together with CDL files.\r\n\r\nGeneral compiler things:\r\n*   Introduce options for (temporary) language variants: `--tnt-flavor`, `--hana-flavor`.\r\n*   Support `extend` and `annotate`, and includes.\r\n*   Support projections.\r\n*   Support actions with their parameters.\r\n*   Support annotation variants and all syntax variants for annotation assignments.\r\n    Support propagation of annotation assignments.\r\n*   Support all type expressions with potential errors.\r\n*   Parse DCL constructs (no further processing yet).\r\n\r\nMiscellaneous:\r\n*   Provide `Promise`-less API.\r\n*   Start with some (internal) documentation.\r\n*   Much more tests.\r\n*   Remove RND-inspired grammar.\r\n*   Miscellaneous fixes and improvements.\r\n\r\n## Version 0.0.4: Adapt ANTLR4 error strategy, use all HANA-CDS tests\r\n\r\nAdapt ANTLR4 error strategy and related things:\r\n*   Allow _unreserved keywords_ as identifier without listing them in error messages if an identifier is expected (but do list those which are to be matched as keywords!).\r\n*   Match even _reserved keywords_ as identifier (with message in the future?) if there is no alternative.\r\n*   Avoid excessive use of ANTLR's adaptive prediction, as it would slow down the parser\r\n    (done in grammar, there is a test which ensure that it stays that way).\r\n*   Proper `xmake` configuration to generate lexer and parser.\r\n*   PEG.js-based parser is discontinued.\r\n\r\nUse all HANA-CDS standalone tests:\r\n*   Cover the complete HANA-CDS language.\r\n    The main grammar use wildcards just for the `SERIES` and `TECHNICAL CONFIGURATION` section of entity definitions.\r\n    (There is currently a second, much slower, grammar without wildcards, which is a one-to-one transformation of the RND grammar for HANA-CDS.)\r\n*   Tests show completeness of parsing (except the wildcard use, see above),\r\n    CSN-output equivalence (on specified parts) for 80% of the test cases.\r\n\r\n## Version 0.0.3: ANTLR4-based Parser and Lexer\r\n\r\nPEG.js-based parser still used by default, because it does not need Java to build.\r\nCurrently, we have a small ANTLR grammar in \"final style\",\r\nand a full ANTLR grammar in \"HANA-CDS style\".\r\n\r\n## Version 0.0.2: Define and Resolve – Augmented CSN\r\n\r\nFunctionality:\r\n\r\n*   Multi-file support with `namespace`/`nameprefix` and `using` declarations\r\n*   Context, entity, type, annotation, and element definitions\r\n*   Types: builtin (also with parameters), derived, structure types\r\n*   Unchecked annotation assignments (with absolute name calculation according to spec)\r\n*   All values: null, bool, number, string and other quoted literals (`x`, `date`, `time`, `timestamp`),\r\n    enum symbols, structure (top-level are flattened for annotation assignments) and arrays\r\n*   \"Define\": merge source ASTs, set `name.absolute` and `_parent` links,\r\n*   \"Resolve\" for main artifacts: set `type.absolute` and `_artifact` links\r\n*   Dependency cycle detection with exact error positioning\r\n*   Compact JSON: for \"official\" CSN and tests\r\n\r\nEnvironment:\r\n\r\n*   Integration with xmake\r\n*   Checked accoding to our eslint rules\r\n*   Full tests: invocation, negative, positive\r\n\r\n\r\n## Version 0.0.1: Package Setup & Initial Grammar\r\n\r\nDone:\r\n*   `Promise` orchestration for asynchronous file processing,\r\n*   avoid checking-in the generated parser,\r\n*   proper whitespace handling in the grammar,\r\n*   source location in AST, location includes filename\r\n*   easy-to-use standard AST creation\r\n\r\nOur **`Promise` orchestration** must support the intended error policy:\r\n*   We do not mix error categories, e.g.,\r\n    we do not output syntax/semantic errors in CDS files\r\n    if the command invocation itself is wrong.\r\n*   Inside one error category, we (intend to) list as many errors as possible,\r\n    e.g. when two given files do not exist and another one is provided repeatedly,\r\n    we report all these 3 errors at once.\r\n\r\nWe **do not include the generated parser**:\r\n*   As we have no `npm publish` phase at the moment,\r\n    we list the parser generator `pegjs` in `package.json`→`dependencies` and\r\n    run the parser generation in `package.json`→`scripts/postinstall`.\r\n*   If the product is published,\r\n    we list the parser generator `pegjs` in `package.json`→`devDependencies` and\r\n    run the parser generation in `package.json`→`scripts/prepublish`.\r\n\r\nParsers generated by [PEG.js](http://pegjs.org) are without tokenizer –\r\nthis looks cool at first, but leads to some problems:\r\n\r\n*   Still open: Error reporting is less then ideal –\r\n    if the intended top-level context definition start with `contxt`, you just see one char after `but`:\r\n        Expected \"context\", … but \"c\" found.\r\n    See the grammar for a potential future hack to cover at least the most common occurrences.\r\n*   We always need to think about correct whitespace handling.\r\n    See the initial comment in the grammar for details and common patterns. (_Solved_).\r\n*   In rules ending with optional whitespaces,\r\n    we need to adjust the end location – it should not include the final whitespaces!\r\n    See the initial comment in the grammar for details. (_Solved_).\r\n\r\nAs an **alternative**, we could look at Antlr3.JavaScript, Antlr4.JavaScript, or RND.JavaScript.\r\n"},{"name":"CHANGELOG_BETA.md","content":"# ChangeLog of Beta Features for cdx compiler and backends\r\n\r\n<!-- markdownlint-disable MD024 -->\r\n<!-- markdownlint-disable MD004 -->\r\n<!-- (no-duplicate-heading)-->\r\n\r\nNote: `beta` fixes, changes and features are listed in this ChangeLog just for information.\r\nThe compiler behavior concerning `beta` features can change at any time without notice.\r\n**Don't use `beta` fixes, changes and features in productive mode.**\r\n\r\n## Version 3.0.0 - 2022-XX-YY\r\n\r\n### Removed `addTextsLanguageAssoc`\r\n\r\nInstead, use the option `addTextsLanguageAssoc`, which is available since v2.8.0.\r\n\r\n## Version 2.12.0 - 2022-01-25\r\n\r\n### Added `sqlSnippets`\r\n\r\n- to.sql/hdi/hdbcds: Introduce the annotations `@sql.prepend` and `@sql.append` that allow inserting user-written SQL snippets into the compiler generated content.\r\n\r\n## Version 2.11.0 - 2021-12-02\r\n\r\n### Removed `foreignKeyConstraints`\r\n\r\n## Version 2.10.4 - 2021-11-05\r\n\r\n### Fixed `nestedProjections`\r\n\r\n- to.sql/hdi/hdbcds: Correctly handle a `*` at the not-first place in the query\r\n\r\n## Version 2.6.0 - 2021-08-23\r\n\r\n### Removed `pretransformedCSN`\r\n\r\n### Removed `renderSql`\r\n\r\n### Removed `keylessManagedAssoc`\r\n\r\nThis is now the default - see CHANGELOG entry for 2.6.0\r\n\r\n### Fixed `nestedProjections`\r\n\r\n- to.sql/hdi/hdbcds: now work correctly when nested projections are used\r\n\r\n### Fixed `foreignKeyConstraints`\r\n\r\n- Always use the name of the association / backlink compared to\r\n  `$self` as name suffix for a constraint\r\n- Composition of one always result in:\r\n  + ON DELETE RESTRICT\r\n  + ON UPDATE RESTRICT\r\n- Composition of one w/o backlink will result in a constraint in\r\n  the entity where the composition is defined\r\n\r\n## Version 2.4.4 - 2021-07-02\r\n\r\n### Added `nestedProjections`\r\n\r\n- Support `expand`: columns can look like `assoc_or_struct_or_tabalias { col_expression1, … }`,\r\n  `longer.ref as name { *, … } excluding { … }`, `{ col_expression1 as sub1, … } as name`, etc.\r\n- Support `inline`: columns can look like `assoc_or_struct_or_tabalias.{ col_expression1, … }`,\r\n  `longer.ref[filter = condition].{ *, … } excluding { … }`, `assoc_or_struct_or_tabalias.*`, etc.\r\n- _Some checks are missing and will be added! Minor changes might occur._\r\n- **The SQL backends might not work properly yet if nested projections are used!**\r\n\r\n## Version 2.4.2 - 2021-07-01\r\n\r\n### Added `keylessManagedAssoc`\r\n\r\n- Support managed associations without foreign keys. Associations targeting a definition without primary keys or with an\r\n  explicit empty foreign key tuple or with empty structured elements as foreign keys and their corresponding `$self`\r\n  comparisons do not describe the relationship between the source and the target entity.\r\n  These associations can be used to establish API navigations but cannot be used to access elements in the target\r\n  entity as they cannot be transformed into a valid JOIN expression.\r\n  Consequently, these associations are not added to the `WITH ASSOCIATIONS` clause or forwarded to HANA CDS.\r\n  Managed Associations without foreign keys must be enabled with `--beta: keylessManagedAssoc`\r\n\r\n## Version 2.4.0 - 2021-06-28\r\n\r\n### Changed `foreignKeyConstraints`\r\n\r\n- `toSql`/`toHdbcds`: omit constraint generation if the option `skipDbConstraints` is set\r\n- If the database constraints are switched off by the global option,\r\n  render constraints nevertheless if an association / composition\r\n  is annotated with `@cds.persistency.assert.integrity: true`\r\n- omit constraint generation if an association / composition\r\n  is annotated with `@cds.persistency.assert.integrity: false`\r\n  -> for managed compositions, the `up_` link in the compositions target entity\r\n  will not result in a constraint if the composition is annotated as described\r\n\r\n## Version 2.0.8\r\n\r\n### Added `foreignKeyConstraints`\r\n\r\nto.sql/to.hdi: If the beta option `foreignKeyConstraints` is supplied,\r\nreferential constraints are generated for compliant associations and compositions.\r\n\r\n## Version 2.0.2\r\n\r\n### Removed `dontRenderVirtualElements`\r\n\r\nVirtual elements are no longer rendered in views as `null as <id>` or\r\nadded to potentially generated draft tables. This behavior can be turned off\r\nwith deprecated option `renderVirtualElements` for backward compatibility.\r\n\r\n### Removed `originalKeysForTemporal`\r\n\r\n### Removed `odataDefaultValues`\r\n\r\nOData: Default values for EntityType properties are rendered always.\r\n\r\n### Removed `subElemRedirections`\r\n\r\nThis option is now enabled by default.\r\n\r\n### Removed `keyRefError`\r\n\r\n## Version 1.44.0\r\n\r\n### Added `addTextsLanguageAssoc`\r\n\r\nWhen the beta option `addTextsLanguageAssoc` is set to true and\r\nthe model contains an entity `sap.common.Languages` with an element `code`,\r\nall generated texts entities additionally contain an element `language`\r\nwhich is an association to `sap.common.Languages` using element `locale`.\r\n\r\n## Version 1.43.0\r\n\r\n### Changed `subElemRedirections`\r\n\r\nWhen the beta option `subElemRedirections` is set to true,\r\n_all_ array (new!) and structure types are expanded when referenced:\r\nmanaged associations (and compositions to entities) in that array are\r\nimplicitly redirected when necessary.\r\nSee [below for details](#version-1300---20200612).\r\n\r\nNested array types (without intermediate structure types) are not supported.\r\n\r\n### Added `ignoreAssocPublishingInUnion`\r\n\r\nFor `to.hdbcds`, with beta flag `ignoreAssocPublishingInUnion` in conjunction with dialect\r\n`hanaJoins`, unmanaged associations in UNIONs are silently ignored and managed associations\r\nare replaced by their foreign keys and silently ignored\r\n\r\n## Version 1.36.0 - 2020-08-07\r\n\r\n### Added `mapAssocToJoinCardinality`\r\n\r\nAnalog to the feature `cardinality for explicit joins`, the association to\r\njoin transformation algorithm now experimentally supports join cardinalities as well.\r\nThe default cardinality `MANY TO ONE` is added to the join node if no cardinality has\r\nbeen specified.\r\n\r\n### Added `odataDefaultValues`\r\n\r\nOData: Enables the rendering of default values for EntityType properties.\r\n\r\n### Added `originalKeysForTemporal`\r\n\r\nOData: The original entity keys are not enhanced with `@cds.valid.from` or replaced with\r\n`@cds.valid.key` elements. The `@Core.AlternateKeys` only mentions the `@cds.valid.key` element.\r\n\r\n### Added `dontRenderVirtualElements`\r\n\r\nVirtual elements are no longer rendered in views as `null as <id>` or added to potentially generated\r\ndraft tables. This behavior can be turned off with `renderVirtualElements` for backward compatibility.\r\n\r\n### Removed `noJoinsForForeignKeys`\r\n\r\nThe association to join transformation treats foreign key accesses with priority now.\r\n\r\n### Removed `uniqueconstraints`\r\n\r\nUnique constraints are now generally available.\r\n\r\n## Version 1.33.0 - 2020-08-24\r\n\r\n### Added `hanaAssocRealCardinality`\r\n\r\nRender JOIN cardinality in native HANA association if provided. If no cardinality has been specified.\r\n\r\n## Version 1.32.0 - 2020-07-10\r\n\r\n### Removed `aspectCompositions`\r\n\r\nAspect compositions aka managed compositions are now avaible without beta option.\r\n_Warning_: the CSN representation can still change.\r\n\r\n## Version 1.31.0 - 2020-06-26\r\n\r\n### Changed `subElemRedirections`\r\n\r\nSignal an error\r\nif an unmanaged association as sub element is to be implicitly redirected,\r\nas we do not automatically rewrite the `on` condition in that situation yet.\r\n\r\n## Version 1.30.0 - 2020-06-12\r\n\r\n### Added `subElemRedirections`\r\n\r\nWhen the beta option `subElemRedirections` is set to true,\r\n_all_ structure types are expanded when referenced:\r\n\r\n- managed associations (and compositions to entities) are implicitly redirected\r\n  when necessary,\r\n- sub elements of referred structure types can be annotated individually,\r\n- the resulting CSN is bigger (will be reduced in the future if possible)\r\n  as `type` references to structures will now have a sibling `elements`.\r\n\r\nThis option does not enable:\r\n\r\n- rewriting the `on` conditions of associations in sub elements,\r\n- aspect compositions as sub elements,\r\n- `localized` sub elements,\r\n- `key` property on sub elements.\r\n\r\n## Version 1.23.0\r\n\r\n### Added `keyRefError`\r\n\r\nAlways signal an error (instead of just a warning in some cases),\r\nif not all references in the `keys` of an managed associations\r\nare projected in the new target.\r\n"},{"name":"CHANGELOG_DEPRECATED.md","content":"# ChangeLog of deprecated Features for cdx compiler and backends\r\n\r\n<!-- markdownlint-disable MD024 -->\r\n<!-- (no-duplicate-heading)-->\r\n\r\nNote: `deprecated` features are listed in this ChangeLog just for information.\r\n`deprecated` features will be removed after a certain grace period.\r\n\r\n**Use `deprecated` features only transitional in productive mode.**\r\n\r\n**When the `deprecated` option is set, the `beta` option is ignored,\r\nand several new features are not available.**\r\n\r\n## Version 3.0.0 - 2022-XX-YY\r\n\r\nVersion 3 of the cds-compiler removes all v2 deprecated flags.\r\n\r\n### Removed `createLocalizedViews`\r\n\r\n### Removed `downgradableErrors`\r\n\r\n### Removed `generatedEntityNameWithUnderscore`\r\n\r\n### Removed `longAutoexposed`\r\n\r\n### Removed `noElementsExpansion`\r\n\r\n### Removed `noInheritedAutoexposeViaComposition`\r\n\r\n### Removed `noScopedRedirections`\r\n\r\n### Removed `oldVirtualNotNullPropagation`\r\n\r\n### Removed `parensAsStrings`\r\n\r\n### Removed `projectionAsQuery`\r\n\r\n### Removed `redirectInSubQueries`\r\n\r\n### Removed `renderVirtualElements`\r\n\r\n### Removed `shortAutoexposed`\r\n\r\n### Removed `unmanagedUpInComponent`\r\n\r\n### Removed `v1KeysForTemporal`\r\n\r\n## Version 2.13.0 - 2022-03-22\r\n\r\n### Added `redirectInSubQueries`\r\n\r\nWhen this option is set, we auto-redirect associations and composition also in\r\nnon-main queries, sometimes without rewriting the `keys`/`on` (there will be no\r\nfix for this).\r\n\r\n### Added `oldVirtualNotNullPropagation`\r\n\r\nWhen this option is set, we do not propagate `notNull` along types.\r\nAdditionally, we propagate `notNull` and `virtual` from a query source element\r\nto the sub elements of a query entity element, even if the property is not\r\npropagated to the query entity element itself (like with type references).\r\n\r\n\r\n## Version 2.2.0\r\n\r\n### Added `noScopedRedirections`\r\n\r\nWhen this option is set, the definition scope is not taken into account when\r\ntrying to find an implicit redirection target.  Setting the following\r\ndeprecated options also switches off scoped redirections (additionally to their\r\nother effect): `noElementsExpansion`, `generatedEntityNameWithUnderscore`,\r\n`shortAutoexposed`, `longAutoexposed`, `noInheritedAutoexposeViaComposition`.\r\n\r\n### Added `noInheritedAutoexposeViaComposition`\r\n\r\nWhen this option is set, only entities directly specified after `Composition of` are\r\nauto-exposed, not entities used as target via explicit or implicit `redirected to`.\r\n\r\n## Version 2.0.16\r\n\r\n### Added `downgradableErrors`\r\n\r\nAllow to change the severity of some errors which should stay to be an error.\r\n\r\n### Added `shortAutoexposed`\r\n\r\nWhen this option is set (and `generatedEntityNameWithUnderscore`), the names of\r\nautoexposed entities are calculated according to the default compiler v1\r\nbehavior (without v1 options `dependentAutoexposed` and `longAutoexposed`).\r\n\r\n## Version 2.0.10\r\n\r\n### Added `longAutoexposed`\r\n\r\nWhen this option is set (and `generatedEntityNameWithUnderscore`),\r\nthe names of autoexposed entities are calculated according to the\r\ncompiler v1 option `longAutoexposed`.\r\n\r\n### Added `generatedEntityNameWithUnderscore`\r\n\r\nKeep using `_` is separator for generated autoexposed entities and for entities\r\ncreated for managed compositions.  It also disables a definition `A.B.C` if `A`\r\nor `A.B` is a definition other than a context or service (v1 behavior).\r\n\r\n## Version 2.0.4-ms1\r\n\r\n### Added `createLocalizedViews`\r\n\r\nAdd localized convenience views in `for.odata`.\r\n\r\n### Added `unmanagedUpInComponent`\r\n\r\nRender association `up_` in composition component unmanaged.\r\n\r\n## Version 2.0.2-ms1\r\n\r\n### Added `renderVirtualElements`\r\n\r\nVirtual elements are no longer rendered in views as `null as <id>` or added to potentially generated\r\ndraft tables. This behavior can be turned off with `renderVirtualElements` for backward compatibility.\r\n\r\n### Added `parensAsStrings`\r\n\r\nRepresent parentheses in expressions with `'('` and `')'` in `xpr` arrays\r\ninstead of using nested `xpr`s or `list`.\r\n\r\n### Added `v1KeysForTemporal`\r\n\r\nRender old and broken temporal EDM API.\r\n\r\n### Added `noElementsExpansion`\r\n\r\nWhen setting it, association in sub elements are not automatically redirected,\r\nand the sub elements cannot be annotated indivually.\r\n\r\nDo not use this.  Setting it might avoid some compile errors,\r\nbut in most cases the reported errors are rightly reported.\r\n\r\n### Added `projectionAsQuery`\r\n\r\nRender `projection` as `query` in CSN.\r\n"},{"name":"CommandLineMigration.md","content":"# Command Line Migration\r\n\r\n> Status Oct 2019: this document is still basically valid.\r\n> The future version of this document (renamed to `CommandLine.md`) will basically explain the recommended CLI options,\r\n> the migration will only be a minor aspect and explained in a later section.\r\n\r\n<!-- The option handling might also change: -->\r\n<!-- the backend-specific structure is overly complex and not always appriopriate (e.g. naming mode). -->\r\n<!-- The placement of options should not depend on a not always apparent distinction between command-specific and general options. -->\r\n\r\n\r\nWith revision 1.5.1, the `cdsc` command line interface has been adapted to use commands with\r\noptions.\r\n\r\nUsage is now `cdsc <command> [options] <files...>` instead of `cdsc [options] <file...>`.\r\n\r\nThe generation options (`--toHana`, `--toSql`, ...) have been replaced by commands\r\n(`toHana`, `toSql`, ...). This allows for better per-command options, which can now be optional,\r\ncan use more single-letter abbreviations, and now match those from the `options` object in the API.\r\n\r\nSome examples:\r\n\r\n| Old command line        | New command line                           |\r\n| -------------------------- | --------------------------------------------- |\r\n| `cdsc --new-csn --toHana csn,plain foo.cds` | `cdsc --new-csn toHana --csn --names plain foo.cds` |\r\n| `cdsc -R --H csn,plain foo.cds` | `cdsc -R H -c -n plain foo.cds` |\r\n| `cdsc --toOdata xml,v2,separate foo.cds` | `cdsc toOdata --xml --version v2 --separate foo.cds` |\r\n| `cdsc --toSql src foo.cds` | `cdsc toSql foo.cds` |\r\n| `cdsc foo.cds` | `cdsc foo.cds` |\r\n\r\nList of commands (as of v1.5.1):\r\n\r\n```\r\n  Commands\r\n    H, toHana [options] <files...>     Generate HANA CDS source files\r\n    O, toOdata [options] <files...>    Generate ODATA metadata and annotations\r\n    C, toCdl <files...>                Generate CDS source files\r\n    S, toSwagger [options] <files...>  Generate Swagger (OpenAPI) JSON\r\n    Q, toSql [options] <files...>      Generate SQL DDL statements\r\n       toCsn [options] <files...>      (default) Generate original model as CSN\r\n       toTntSpecificOutput <files...>  (internal) Generate TNT-specific post-processed CSN\r\n       toRename [options] <files...>   (internal) Generate SQL DDL rename statements\r\n```\r\n\r\nPlease see `cdsc --help` for the list of commands and general options, or `cdsc <command> --help`\r\nfor help regarding a specific command.\r\n\r\n## Some helpful hints\r\n\r\nPlease note the following general concepts regarding the new command line:\r\n- General options can be placed anywhere, command specific options must appear after the command.\r\n- In the unlikely case that a file name starts with `-`, please use `--` to indicate the end of options.\r\n- The `src` argument of `toHana`, `toCdl`, `toSql` is now optional (and it would now be `--src`).  \r\n- If no command is specified, the default is `toCsn --flavor client` (as before).\r\n- When no `--out` option is provided or if `-` is specified as output directory , all output will\r\n  go to `<stdout>` instead of being written to files (like before).\r\n- The `--raw-output` option also affects all commands where a CSN file is generated.\r\n  Instead of `...csn.json`, a `...csn_raw.txt` will be produced (like before).\r\n"},{"name":"DeprecatedOptions.md","content":"# Deprecated Options and How to Avoid Them\r\n\r\nTo ease the migration to CDS Compiler Version 2,\r\nthe compiler can be called with an option `deprecated`\r\nwhich make the compiler behave more like Compiler Version 1 for certain features.\r\n\r\nAs the name suggest, this option should be used only for a limited time.\r\nThe support for certain v1 features might also be dropped after a while\r\n(without an increase of the compiler major version).\r\n\r\n__When the `deprecated` option is set, the `beta` option is ignored,\r\nand several new features are not available.__\r\n\r\nThe value of the option `deprecated` is a dictionary\r\nmapping v1 feature names to (usually boolean) values.\r\nThis document lists all those features,\r\nand describes what you can do instead of setting these features.\r\n\r\n\r\n## Deprecated features influencing the name of generated entities\r\n\r\nThe `compile()` function generates entities in the following cases:\r\n\r\n1. When an element in an entity is specified to be `localized`,\r\n   it creates a __texts entity__ for that entity.\r\n2. For managed composition of aspects,\r\n   it creates a __target entity__ based on the provided target aspect.\r\n3. A projection in a service is automatically generated\r\n   for correspondingly tagged entities in the model (which is then “__auto-exposed__”)\r\n   if an association/composition to the model entity is to be _implicitly redirected_\r\n   to an exposed entity in the service and no such entity exists yet.\r\n\r\nAs a short example for 1 and 3 (2 is similar to 1):\r\n\r\n```\r\nentity my.Model.Base {\r\n  key id: UUID;\r\n  text: localized String;\r\n}\r\nservice our.Service {\r\n  entity Proj as projection on my.Model.Base;\r\n}\r\n```\r\n\r\nThe compiled model contains the following generated entities:\r\n\r\n* the text entity `my.Model.Base.texts`,\r\n  which is a composition target of the generated element `my.Model.Base:texts`\r\n* the auto-exposed projection `our.Service.Proj.texts`\r\n  which is a composition target of `our.Service.Proj:texts`\r\n\r\nFor the following sub sections (and in general), is is important to understand that\r\nyou can define all auto-exposed entities yourself (well, they are not\r\n_auto_-exposed anymore)\r\n_without_ any difference in the compiled model\r\nexcept for the sequence of entities in `‹csn›.definitions`.  \r\nThat means, you can append the following line to the above example:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Proj.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nThe annotation `@cds.autoexposed` ensures that this self-exposed entity\r\nreally behaves exactly like an auto-exposed entity:\r\n\r\n* it is only used as a direct redirection target, not as an indirect one\r\n  (a detailed explanation of this topic is out-of-scope for this document),\r\n* runtimes also attach a runtime semantics to the annotation `@cds.autoexposed`.\r\n\r\nThus, if you do not like the name of the generated auto-exposed entity,\r\nyou can simply __expose the model entity__ yourself and choose the name you like.\r\n__Never ever__ define a projection on the auto-exposed entity,\r\nwhich has worked in v1 versions and in the v2.1.x versions in certain situations.\r\n\r\n\r\n### Deprecated `generatedEntityNameWithUnderscore`\r\n\r\nWith compiler v1,\r\nthe generated entities had no suffix starting with a `.` like `.texts` for texts entities,\r\nbut a suffix starting with a `_`.\r\n\r\nIf you have a reference to a generated entity in your model,\r\nyou now have to change the model accordingly.  \r\nFor example, if you had for v1\r\n\r\n```\r\nusing { my.Model.Base, my.Model.Base_texts } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base_texts;\r\n}\r\n```\r\n\r\nyou now have to write for v2 (you see that it is usually actually simpler now)\r\n\r\n```\r\nusing { my.Model.Base } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base.texts;\r\n}\r\n```\r\n\r\nIf you are a CSN consumer and analyse the compiled model, you might need\r\nto adopt your code for the name change from `my.Model.Base_texts` to `my.Model.Base.texts`.\r\n\r\nIn the following areas, nothing will change:\r\n\r\n* In the OData backend,\r\n  the “new” `.`s are replaced by `_`s to make the names conform to the OData naming rules.  \r\n  In other words, the EDMX (for the generated entities) looks the same as with v1.\r\n* In the SQL/Hana backends,\r\n  the “new” `.`s are also replaced by `_`s to adopt to HANA CDS naming restrictions\r\n  (with the standard naming mode `plain`, all `.`s are replaced by `_`s anyway).  \r\n  In other words, no texts table migration will take place.\r\n\r\nBut anyway, you might temporarily want to keep the v1 behavior\r\nby setting the option `deprecated.generatedEntityNameWithUnderscore`.\r\nIf you do so, scoped definitions are not possible (like they aren't in v1).\r\n\r\n### Deprecated `shortAutoexposed`\r\n\r\nIn compiler v1 without an option\r\n(especially the v1 option `dependentAutoexposed` which basically leads the v2 default behavior),\r\nthe name for auto-exposed entities were constructed by\r\nadding the name part after the last `.` to the service name.\r\n\r\nThat is, for the above example,\r\nthe auto-exposed projection on `my.Model.Base_texts` (in v1) is named\r\n`our.Service.Base_texts` in v1.\r\n\r\nYou can temporarily enable that behavior in v2 by setting the options\r\n`deprecated.generatedEntityNameWithUnderscore` and `deprecated.shortAutoexposed`.\r\n\r\nIf you just set `deprecated.shortAutoexposed`, you get `our.Service.Base.texts`.\r\n\r\nIf you really need that name (instead of the v2 name `our.Service.Proj.texts`),\r\nyou can expose the texts entity manually instead of setting the deprecated option:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Base.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nAgain, never define a projection on the auto-exposed entity –\r\nyou get an error for that starting with compiler v2.2.0\r\n(and earlier for certain definition sequences anyway, actually in v1 also).\r\n"},{"name":"DeprecatedOptions_v2.md","content":"# Deprecated Options and How to Avoid Them\r\n\r\n__Important__: With compiler v3, these deprecated options were removed!\r\n\r\nTo ease the migration to CDS Compiler Version 2,\r\nthe compiler can be called with an option `deprecated`\r\nwhich makes the compiler behave more like Compiler Version 1 for certain features.\r\n\r\nAs the name suggest, this option should be used only for a limited time.\r\nThe support for certain v1 features might also be dropped after a while\r\n(without an increase of the compiler major version).\r\n\r\n__When the `deprecated` option is set, the `beta` option is ignored,\r\nand several new features are not available.__\r\n\r\nThe value of the option `deprecated` is a dictionary\r\nmapping v1 feature names to (usually boolean) values.\r\nThis document lists all those features,\r\nand describes what you can do instead of setting these features.\r\n\r\n\r\n## Deprecated features influencing the name of generated entities\r\n\r\nThe `compile()` function generates entities in the following cases:\r\n\r\n1. When an element in an entity is specified to be `localized`,\r\n   it creates a __texts entity__ for that entity.\r\n2. For managed composition of aspects,\r\n   it creates a __target entity__ based on the provided target aspect.\r\n3. A projection in a service is automatically generated\r\n   for correspondingly tagged entities in the model (which is then “__auto-exposed__”)\r\n   if an association/composition to the model entity is to be _implicitly redirected_\r\n   to an exposed entity in the service and no such entity exists yet.\r\n\r\nAs a short example for 1 and 3 (2 is similar to 1):\r\n\r\n```\r\nentity my.Model.Base {\r\n  key id: UUID;\r\n  text: localized String;\r\n}\r\nservice our.Service {\r\n  entity Proj as projection on my.Model.Base;\r\n}\r\n```\r\n\r\nThe compiled model contains the following generated entities:\r\n\r\n* the text entity `my.Model.Base.texts`,\r\n  which is a composition target of the generated element `my.Model.Base:texts`\r\n* the auto-exposed projection `our.Service.Proj.texts`\r\n  which is a composition target of `our.Service.Proj:texts`\r\n\r\nFor the following sub sections (and in general), is is important to understand that\r\nyou can define all auto-exposed entities yourself (well, they are not\r\n_auto_-exposed anymore)\r\n_without_ any difference in the compiled model\r\nexcept for the sequence of entities in `‹csn›.definitions`.  \r\nThat means, you can append the following line to the above example:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Proj.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nThe annotation `@cds.autoexposed` ensures that this self-exposed entity\r\nreally behaves exactly like an auto-exposed entity:\r\n\r\n* it is only used as a direct redirection target, not as an indirect one\r\n  (a detailed explanation of this topic is out-of-scope for this document),\r\n* runtimes also attach a runtime semantics to the annotation `@cds.autoexposed`.\r\n\r\nThus, if you do not like the name of the generated auto-exposed entity,\r\nyou can simply __expose the model entity__ yourself and choose the name you like.\r\n__Never ever__ define a projection on the auto-exposed entity,\r\nwhich has worked in v1 versions and in the v2.1.x versions in certain situations.\r\n\r\n\r\n### Deprecated `generatedEntityNameWithUnderscore`\r\n\r\nWith compiler v1,\r\nthe generated entities had no suffix starting with a `.` like `.texts` for texts entities,\r\nbut a suffix starting with a `_`.\r\n\r\nIf you have a reference to a generated entity in your model,\r\nyou now have to change the model accordingly.  \r\nFor example, if you had for v1\r\n\r\n```\r\nusing { my.Model.Base, my.Model.Base_texts } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base_texts;\r\n}\r\n```\r\n\r\nyou now have to write for v2 (you see that it is usually actually simpler now)\r\n\r\n```\r\nusing { my.Model.Base } from './myModel';\r\nentity Root {\r\n  key ID: UUID;\r\n  base:   Association to Base;\r\n  texts:  Association to Base.texts;\r\n}\r\n```\r\n\r\nIf you are a CSN consumer and analyse the compiled model, you might need\r\nto adopt your code for the name change from `my.Model.Base_texts` to `my.Model.Base.texts`.\r\n\r\nIn the following areas, nothing will change:\r\n\r\n* In the OData backend,\r\n  the “new” `.`s are replaced by `_`s to make the names conform to the OData naming rules.  \r\n  In other words, the EDMX (for the generated entities) looks the same as with v1.\r\n* In the SQL/Hana backends,\r\n  the “new” `.`s are also replaced by `_`s to adopt to HANA CDS naming restrictions\r\n  (with the standard naming mode `plain`, all `.`s are replaced by `_`s anyway).  \r\n  In other words, no texts table migration will take place.\r\n\r\nBut anyway, you might temporarily want to keep the v1 behavior\r\nby setting the option `deprecated.generatedEntityNameWithUnderscore`.\r\nIf you do so, scoped definitions are not possible (like they aren't in v1).\r\n\r\n### Deprecated `shortAutoexposed`\r\n\r\nIn compiler v1 without an option\r\n(especially the v1 option `dependentAutoexposed` which basically leads the v2 default behavior),\r\nthe name for auto-exposed entities were constructed by\r\nadding the name part after the last `.` to the service name.\r\n\r\nThat is, for the above example,\r\nthe auto-exposed projection on `my.Model.Base_texts` (in v1) is named\r\n`our.Service.Base_texts` in v1.\r\n\r\nYou can temporarily enable that behavior in v2 by setting the options\r\n`deprecated.generatedEntityNameWithUnderscore` and `deprecated.shortAutoexposed`.\r\n\r\nIf you just set `deprecated.shortAutoexposed`, you get `our.Service.Base.texts`.\r\n\r\nIf you really need that name (instead of the v2 name `our.Service.Proj.texts`),\r\nyou can expose the texts entity manually instead of setting the deprecated option:\r\n\r\n```\r\n@cds.autoexposed entity our.Service.Base.texts as projection on my.Model.Base.texts;\r\n```\r\n\r\nAgain, never define a projection on the auto-exposed entity –\r\nyou get an error for that starting with compiler v2.2.0\r\n(and earlier for certain definition sequences anyway, actually in v1 also).\r\n"},{"name":"ErrorMessages.md","content":"# Error Messages Explained\r\n\r\n> Status Oct 2019: up-to-date\r\n\r\nThis document tries to explain some of the less-obvious error messages.\r\n\r\n## Common Compiler Messages (Independent From Backend)\r\n\r\n### Duplicate definitions\r\n\r\nIn most cases, you really have just used the same name twice when defining an artifact.\r\nThis section is about a situation where you are pretty sure that you have not done that.\r\n\r\n```\r\nnode_modules/Base/index.cds:1:6-7: Error: Duplicate definition of artifact \"T\"\r\nnode_modules/base/index.cds:1:6-7: Error: Duplicate definition of artifact \"T\"\r\nnode_modules/dep/node_modules/model/index.cds:1:8-9: Error: Duplicate definition of artifact \"E\"\r\nnode_modules/model/index.cds:1:8-9: Error: Duplicate definition of artifact \"E\"\r\n```\r\n\r\nHere, the CDS Compiler considers `…/Base/index.cds` to be different to `…/base/index.cds`,\r\nand also considers the two `…/model/index.cds` files to be different files.\r\nWhy is that the case?  Consider the following \"top-level\" file\r\n\r\n```\r\nusing from 'Base';     // upper-case 'B'!\r\nusing from 'model';\r\nusing from 'dep';\r\n```\r\n\r\nFile node_modules/dep/index.cds` looks like:\r\n\r\n```\r\nusing from 'base';     // lower-case 'b'!\r\nusing from 'model';\r\n```\r\n\r\n`node_modules/Base/index.cds` is the same file as\r\n`node_modules/base/index.cds` on case-insensitive file systems (Windows, Mac):\r\n\r\n```\r\ntype T: Integer;\r\n```\r\n\r\nWe have `node_modules/model/index.cds` and a copy of it in\r\n`node_modules/dep/node_modules/model/index.cds`:\r\n\r\n```\r\nentity E { i: Integer; }\r\n```\r\n\r\nThe technical explanation is that the CDS Compiler considers\r\ntwo file names pointing to the same file if their `fs.realpath` is equal.\r\nThat means that we properly _recognize symlinks_ (Linux, Mac),\r\nbut we do _not_ recognize two files to be equal if:\r\n\r\n* the same file is referred to with different name casing,\r\n  which does not work on case-sensitive file systems (Linux) anyway\r\n  (yes, we might issue a better message when `node v9.2` is widely adopted),\r\n* a file is _copied_ within the NPM package (or when _hardlinks_ are used).\r\n\r\nThe CDL code/package can be corrected as follows:\r\n\r\n* Use __consistent casing__ when referring to file and modules in `using from`\r\n  (if in doubt, please check the error output provided by the CDS compiler client tool).\r\n* __Clean up a dirty NPM installation__.  Then, the file\r\n  `node_modules/dep/node_modules/model/index.cds` should disappear\r\n  (or be a symlink to `node_modules/model/index.cds`).\r\n\r\n\r\n### Nested extensions\r\n\r\nIf you use nested extensions, you might get messages like:\r\n\r\n```\r\nnested-extensions.cds:3:20-26: Error: No `EXTEND artifact` within CONTEXT extensions\r\nnested-extensions.cds:4:20-28: Error: No `ANNOTATE artifact` within SERVICE extensions\r\nnested-extensions.cds:5:14-22: Error: Elements only exist in entities, types or typed constructs\r\nnested-extensions.cds:6:12-36: Error: Elements only exist in entities, types or typed constructs\r\n```\r\n\r\nArtifacts (entities, types, …) should not be extended within other extensions –\r\njust elements (and other members) are to be extended within an artifact extension.\r\nThe above messages are reported for the following CDL code:\r\n\r\n```\r\ncontext C { entity E { d: Integer; } }\r\nservice S { entity E { d: Integer; } }\r\nextend context C { extend C.E { e: Integer; } }\r\nextend service S { annotate S.E @Anno; }\r\nannotate C { E @Anno; }\r\nextend S { extend E { e: Integer; } }\r\n```\r\n\r\nThe reason for these messages is – if we would allow it:\r\n\r\n* If we follow the [normal name resolution rules](NameResolution.md),\r\n  people would have to refer to the entity the same way\r\n  as outside `extend context`/`extend service`.\r\n  Most people would probably expect being able\r\n  to write just `E` instead `C.E`/`S.E` in line 3 and 4,\r\n  but this not only require special rules, but leads to other surprises – see below.\r\n* Using `{ … }` inside a plain `annotate` or `extend` statement\r\n  is supposed to annotate/extend elements (or enums), not containing artifacts.\r\n\r\nThe CDL code can be corrected as follows:\r\n\r\n```\r\ncontext C { entity E { d: Integer; } }\r\nservice S { entity E { d: Integer; } }\r\nextend C.E { e: Integer; }\r\nannotate S.E @Anno;\r\nannotate C.E @Anno;\r\nextend S.E { e: Integer; }\r\n```\r\n\r\nNow consider that you could use the following to extend the entity `C.E`:\r\n\r\n```\r\ncontext C { entity E { key d: Integer; } }\r\nentity E { key x: Integer; }\r\nextend context C {\r\n    extend E { e: Integer; }          // i.e. extend C.E\r\n}\r\nextend context C {\r\n    entity F { a: association to E; } // target: E, not C.E (normal name resolution)\r\n}\r\n```\r\n\r\nWhat about combining the two `extend context`:\r\n\r\n```\r\ncontext C { entity E { key d: Integer; } }\r\nentity E { key x: Integer; }\r\nextend context C {\r\n    extend E { e: Integer; }          // i.e. extend C.E\r\n    entity F { a: association to E; } // target: E or C.E ?\r\n}\r\n```\r\n\r\nIn summary, allowing artifact extensions inside `extend context`/`extend service`\r\nwould provide little benefit, but would add complexity and confusion.\r\n\r\n\r\n### Redirection issues\r\n\r\nThe target `OrigTarget` of an existing association can only be redirected to another target `NewTarget`\r\nif the `NewTarget` is a direct or indirect projection of `OrigTarget`\r\n(complex views are questionable and lead to a Warning),\r\nor an entity definition which directly or indirectly includes `OrigTarget`.\r\n\r\n```\r\nentity Base {\r\n    key i: Integer;\r\n}\r\nentity Proj as projection on Base;\r\nentity NewTarget as projection on Intermediate;\r\nentity Intermediate as projection on Base;\r\n\r\nentity Assocs {\r\n    base: association to Base;\r\n    proj: association to Proj;\r\n}\r\nentity Redirect as projection on Assocs {\r\n    base: redirected to NewTarget, // works\r\n    proj: redirected to NewTarget  // ERROR: does not originate from Proj\r\n}\r\n```\r\n\r\nFor the above CDS code, you get the following error message:\r\n\r\n```\r\nredirect-to-unrelated.cds:16:25-34: Error: The redirected target does not originate from \"Proj\"\r\n    (in entity:\"Redirect\"/element:\"proj\")\r\n```\r\n"},{"name":"FioriAnnotations.md","content":"# Translation of Fiori annotations\r\n\r\n> Status Oct 2019: too vague, old links, to be moved to internalDoc if we want to keep it.\r\n\r\nFiori annotations are translated in a generic way. Essentially, write down in CDS precisely what you want to get in edmx.\r\n\r\nA more detailed description will follow soon, for the time being we hope the following example will give the idea:\r\n\r\nThese CDS annotations\r\n```\r\n@(\r\n  UI.Chart : {\r\n    ChartType: #Bullet,\r\n    Measures: [ Revenue ],\r\n    MeasureAttributes: [\r\n      {\r\n        Measure: Revenue,\r\n        Role: #Axis1,\r\n        DataPoint: '@UI.DataPoint#BulletChartDataPoint'\r\n      }\r\n    ]\r\n  },\r\n  UI.DataPoint#BulletChartDataPoint: {\r\n    Title: 'Product',\r\n    Value: Revenue,\r\n    TargetValue: TargetRevenue,\r\n    ForecastValue: ForecastRevenue,\r\n    MinimumValue: MinValue,\r\n    MaximumValue: MaxValue,\r\n    CriticalityCalculation: {\r\n      ImprovementDirection: #Target,\r\n      ToleranceRangeLowValue: ToleranceRangeLow,\r\n      ToleranceRangeHighValue: ToleranceRangeHigh,\r\n      DeviationRangeLowValue: DeviationRangeLow,\r\n      DeviationRangeHighValue: DeviationRangeHigh\r\n    }\r\n  }\r\n)\r\nSomething ...;\r\n```\r\nare translated into the following edmx:\r\n```xml\r\n<Annotations Target=\"Something\">\r\n  <Annotation Term=\"UI.Chart\">\r\n    <Record>\r\n      <PropertyValue EnumMember=\"UI.ChartType/Bullet\"\r\n        Property=\"ChartType\" />\r\n      <PropertyValue Property=\"Measures\">\r\n        <Collection>\r\n          <PropertyPath>Revenue</PropertyPath>\r\n        </Collection>\r\n      </PropertyValue>\r\n      <PropertyValue Property=\"MeasureAttributes\">\r\n        <Collection>\r\n          <Record Type=\"UI.ChartMeasureAttributeType\">\r\n            <PropertyValue Property=\"Measure\" PropertyPath=\"Revenue\" />\r\n            <PropertyValue Property=\"Role\" EnumMember=\"UI.ChartMeasureRoleType/Axis1\" />\r\n            <PropertyValue Property=\"DataPoint\" AnnotationPath=\"@UI.DataPoint#BulletChartDataPoint\" />\r\n          </Record>\r\n        </Collection>\r\n      </PropertyValue>\r\n    </Record>\r\n  </Annotation>\r\n  <Annotation Term=\"UI.DataPoint\" Qualifier=\"BulletChartDataPoint\">\r\n    <Record>\r\n      <PropertyValue String=\"Product\" Property=\"Title\" />\r\n      <PropertyValue Path=\"Revenue\" Property=\"Value\" />\r\n      <PropertyValue Path=\"TargetRevenue\" Property=\"TargetValue\" />\r\n      <PropertyValue Path=\"ForecastRevenue\" Property=\"ForecastValue\" />\r\n      <PropertyValue Path=\"MinValue\" Property=\"MinimumValue\" />\r\n      <PropertyValue Path=\"MaxValue\" Property=\"MaximumValue\" />\r\n      <PropertyValue Property=\"CriticalityCalculation\">\r\n        <Record>\r\n          <PropertyValue Property=\"ImprovementDirection\" EnumMember=\"UI.ImprovementDirectionType/Target\" />\r\n          <PropertyValue Path=\"ToleranceRangeLow\" Property=\"ToleranceRangeLowValue\" />\r\n          <PropertyValue Path=\"ToleranceRangeHigh\" Property=\"ToleranceRangeHighValue\" />\r\n          <PropertyValue Path=\"DeviationRangeLow\" Property=\"DeviationRangeLowValue\" />\r\n          <PropertyValue Path=\"DeviationRangeHigh\" Property=\"DeviationRangeHighValue\" />\r\n        </Record>\r\n      </PropertyValue>\r\n    </Record>\r\n  </Annotation>\r\n</Annotations>\r\n```\r\n\r\n\r\nAll suppoted Fiori annotations are defined in the following vocabularies:\r\n* [Core](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Core.V1.xml)\r\n* [Measures](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Measures.V1.xml)\r\n* [Capabilities](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Capabilities.V1.xml)\r\n* [Aggregation](http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs02/vocabularies/Org.OData.Aggregation.V1.xml)\r\n* [Common](https://wiki.scn.sap.com/wiki/download/attachments/448470974/Common.xml?api=v2)\r\n* [Communication](https://wiki.scn.sap.com/wiki/download/attachments/448470971/Communication.xml?api=v2)\r\n* [UI](https://wiki.scn.sap.com/wiki/download/attachments/448470968/UI.xml?api=v2)\r\n"},{"name":"NameResolution.md","content":"# Name Resolution in CDS\r\n\r\n> Status Sep 2020: TODOs must be filled, say more about name resolution in CSN.\r\n\r\nName resolution refers to the resolution of names (identifiers) within expressions of the source to the intended artifact or member in the model.\r\n\r\nAs CDL is related to SQL, its name resolution strategy must be natural to SQL programmers.\r\nThis forbids us to use the simple _lexical scoping_ name resolution for all language constructs.\r\n\r\nThis document presents the exact **semantics** of the resolution in CDS\r\nespecially how it is influenced by the language constructs where the reference is embedded in.\r\n\r\nIn explanations, we have CDL as the main focus, but name resolution in CSN is covered as well.\r\n\r\nThe overall goal is that the name resolution is low on surprises throughout the complete life-cycle of any CDS model,\r\nand robust concerning any model extensions.\r\n\r\nRemark: **this is the intended behavior, the code must still be adapted at some places.**\r\n\r\nThe impatient reader might want to jump to the [summary],\r\nothers might want to [skip the introduction](#design-principles).\r\n\r\n## Table of Contents\r\n\r\n<!-- toc: start -->\r\n\r\n1. [Table of Contents](#table-of-contents)\r\n2. [Introduction](#introduction)\r\n   1. [Background: SQL](#background-sql)\r\n   2. [Background: modern programming languages](#background-modern-programming-languages)\r\n3. [Design Principles](#design-principles)\r\n4. [Name Resolution - the Basics](#name-resolution---the-basics)\r\n   1. [Common rules](#common-rules)\r\n   2. [Resolving paths](#resolving-paths)\r\n   3. [Navigation environment](#navigation-environment)\r\n5. [References to main artifacts](#references-to-main-artifacts)\r\n6. [Values and references to elements](#values-and-references-to-elements)\r\n   1. [References in queries](#references-in-queries)\r\n   2. [References to sibling elements](#references-to-sibling-elements)\r\n   3. [Other element references](#other-element-references)\r\n7. [Paths as annotation values](#paths-as-annotation-values)\r\n8. [Differences to HANA-CDS](#differences-to-hana-cds)\r\n9. [Summary](#summary)\r\n\r\n<!-- toc: end -->\r\n\r\n\r\n## Introduction\r\n\r\nIf you look at typical examples given in introductionary documents about CDS,\r\nyou might wonder why there is a lengthy document about the name resolution.\r\nSo, let us start with such an example:\r\n\r\n```\r\nnamespace sap.core;\r\n\r\ncontext types {\r\n    type Price {\r\n        amount:   Amount;\r\n        currency: CurrencySymbol;\r\n    }\r\n    type Amount: Decimal(5,3);\r\n};\r\ntype CurrencySymbol: String(3);\r\n\r\nview Products as select from ProductsInternal {\r\n    productId,\r\n    salesPrice\r\n};\r\nentity ProductsInternal {\r\n    productId: Integer;\r\n    retailPrice: types.Price;\r\n    salesPrice = retailPrice;  // calculated fields are not supported yet\r\n};\r\n```\r\n\r\nLet us first go a step backwards:\r\nin CDS, all entities and other **main artifacts** (short: artifacts) have a _unique name_,\r\nwhich we call **absolute name**.\r\nWhy don't we just use that name, like we do in SQL and in CSN?\r\n\r\nAs we want to support a hierarchical naming convention,\r\nit should be easy to _define_ and to _refer to_ artifacts sharing a common name prefix.\r\nIn the example above, we have 3 types with the absolute names\r\n`sap.core.types.Price`, `sap.core.types.Amount` and `sap.core.CurrencySymbol`.\r\n\r\nFor **convenience**, we do not use these lengthy names in CDL,\r\nbut shorter names without the common prefix.\r\nThese are then \"translated\" by the name resolution into the absolute names.\r\nThis also allows us to easily change the common name prefix in the development phase.\r\n\r\nIn which area of the code do we assume which common name prefix?\r\nIn the example above, we refer to these 3 types by `types.Price`, just `Amount`, and `CurrencySymbol`.\r\nThe first observation is:\r\n**name resolution** (and the new name introduced by an artifact definition) **depends on the block structure**.\r\n\r\nThat being said, name resolution does **not depend on the order of definitions**.\r\nIn the example above, the element `amount` has a type `Amount`\r\nwhich is defined _after_ the element definition.\r\nSimilar for the view `Products` whose source entity `ProductsInternal` is defined after the view.\r\n\r\nIn the view, we also refer to **elements** of (another) artifact.\r\nThere is no special language construct for such references –\r\nit is a simple identifier (or path)\r\nlike the references to the types and the source entity of the view.\r\nThe second observation is:\r\n**name resolution** in CDL **depends on the argument position**,\r\ni.e. the place of the reference relative to the statement\r\n(e.g. in the `from` or `where` clause of a `select` statement).\r\nThis is not only valid in SQL and related languages like CDL,\r\nbut also in languages like C (for labels after `goto`).\r\n\r\n---\r\n\r\nLet us now look at the name resolution and why it is not as obvious as it might seem to be…\r\n\r\n> What happens if an inner block introduces the same name as an outer block?\r\n\r\nDo we have **name shadowing**\r\n(we cannot access the artifact defined in the outer block by its simple name)?\r\nConsider that we have defined a type `CurrencySymbol` inside the block of the context `types`…\r\nIs the same true for nested element definitions?\r\n\r\n> How do we refer to elements and subelements inside the definition of a subelement?\r\n\r\nDoes a simple name refer to a subelement of the same parent element,\r\nor an element of the corresponding main artifact?\r\n\r\n> How do we access artifacts which are defined in another file?\r\n\r\nThat is an easy one: the `using` declarations introduce a file-local alias name to an absolute name\r\nfor accessing artifacts in other files or in the current file (useful to refer to shadowed definitions).\r\n\r\n> Can something bad happen if extensions come into play?\r\n\r\nYes, extensions must be used with care.  Extensions might break existing models –\r\nif two extensions decide to add an element with the same name to the same entity,\r\nthere is nothing we can do about it.\r\n\r\nBut we make sure that something real bad cannot happen:\r\nan **extension cannot silently change the semantics of a model** –\r\nthe name resolution is defined in such a way that a valid and potentially unrelated reference\r\ndoes not silently (without errors or warnings) point to another artifact\r\nwhen the extension is applied to the model.\r\n\r\n\r\n### Background: SQL\r\n\r\nIn this section, we look at the heritage from SQL.\r\nGiven is the following SQL query:\r\n\r\n```SQL\r\nSELECT a,\r\n       a.b as e\r\n  FROM a as x,\r\n       tab as a\r\n```\r\n\r\nThe identifier `a` refers to different objects:\r\n\r\n* at the \"select item\" position in line 1, `a` refers to a _column_ in one of the tables,\r\n* at the \"select item\" position in line 2, `a` refers to the _table alias_ introduced in line 4,\r\n* at the \"table reference\" position in line 3, `a` refers to the _table_ `a`, and\r\n* in line 4, we _define_ a table alias with name `a` (`a` is no reference here).\r\n\r\n---\r\n\r\nOur task is to\r\n\r\n* generalize the semantics to make it applicable for CDS features not found in SQL:\r\n  sub structures, associations, extensions, …\r\n* find argument positions which are \"similar\" to argument positions with given name resolution semantics –\r\n  we then apply the same semantics to the \"new\" argument positions\r\n\r\nAs an example for the latter,\r\nlet us consider an SQL view which is a projection on a given table and additionally exposes one of its column under an extra name:\r\n\r\n```\r\nentity B {\r\n    a: Integer;\r\n}\r\nview E as select from B {\r\n    *,\r\n    a as e\r\n};\r\n```\r\n\r\nIn CDS, we can define a table which uses the same layout as a given table and additionally exposes one of its elements under an extra name:\r\n\r\n```\r\nentity B {\r\n    a: Integer;\r\n}\r\nentity E : B {\r\n    e = a;       // calculated fields are not supported yet\r\n}\r\n```\r\n\r\nAs the situation is very similar,\r\nthe name resolution strategy for the referred column/element should be the same\r\n(the syntax is unfortunately not the same due to the SQL syntax of select items).\r\n\r\nIn SQL, we have silent semantic changes, but only with subqueries –\r\nsee the first example in Section [\"Design Principles\"](#design-principles).\r\nTo avoid this situation in CDL, we are a bit incompatible in this case.\r\n\r\n\r\n### Background: modern programming languages\r\n\r\nModern programming languages (try to) use just one name resolution strategy: lexical scoping.\r\n\r\nAssuming that the \"free-floating\" column `a` was defined in table `a`,\r\nthe `SELECT` query from the beginning of previous section would look like the following in JavaScript:\r\n\r\n```javascript\r\nselect( [a, tab],\r\n        (x, a) => ({ a: x.a, e: a.b }) )\r\n```\r\n\r\nApart from the syntax and expression structure, the difference to SQL is that\r\nthere are **no \"free-floating\" references**:\r\nthe column `a` in (the line of) table `a` must be prefixed by the corresponding table alias `x`\r\n(parameter name of the anonymous function in JavaScript).\r\n\r\nThis is not only a good thing for itself\r\n(the original SQL query would be considered incorrect if a column `a` is added later to table `tab`)\r\nit also enables lexical scoping, as the table alias names are defined in the query expression itself.\r\n\r\nAny \"convenience\" declaration which \"extends\" lexical scoping\r\nis usually soon to be declared as obsolete,\r\nbecause its **little convenience benefit is not worth the additional issues**.\r\nAs an example, see the fate of the `with` statement in JavaScript.\r\n\r\n---\r\n\r\nIf sold with the label \"OO\", the convenience is often considered to be more important.\r\nGiven is the following Java program:\r\n\r\n```Java\r\nclass T {\r\n    int C = 0;\r\n}\r\nclass B {\r\n//  class T { int C = 1; }\r\n}\r\nclass J extends B {\r\n    int go() {\r\n        return (new T()).C;\r\n    }\r\n    public static void main(String[] args) {\r\n        System.out.println ((new J()).go());\r\n    }\r\n}\r\n```\r\n\r\nUncomment the definition of `B.T` → the output changes from `0` to `1` (silent semantic change).\r\nNow consider that class `B` is usually defined somewhere else →\r\nsame kind of convenience, same kind of issues.\r\n\r\n\r\n## Design Principles\r\n\r\nThe name resolution rules in the following sections are based on the following design principles:\r\n\r\n 1. Applications/customers can safely add new artifacts without silently changing the semantics of other applications.\r\n 2. A valid SQL SELECT should be a valid CDL SELECT with the same semantics\r\n    (modulo changes in the concrete syntax),\r\n    as CDL uses CQL – an \"official\" extension of SQL SELECT.\r\n 3. Applications/customers can safely add new artifacts without inducing other applications to compile with an error.\r\n 4. The name resolution does not depend on package definitions and its dependencies.\r\n 5. The chosen name resolution strategy for an argument position should not come at a surprise.\r\n 6. Convenience: there must be a more convenient solution than always using absolute names.\r\n\r\nPlease note that these principles are ordered.\r\nThere are __many cases where one principle cannot be fulfilled__ in order to fulfill a higher prioritized design principles.\r\nThe first design principle is therefore always fulfilled.\r\nThis can be seen in the following examples.\r\n\r\n---\r\n\r\nFor (1), CDL compiles the following source with an error:\r\n\r\n```\r\nentity A { a: String(20); j: Integer; x: Integer; }\r\nentity B { b: String(20); j: Integer; }\r\nview V as select from A { a, x } where     // x is valid here\r\n    j = (select from B { j + x });         // invalid: use A.x instead of x (ok: j)\r\n\r\n```\r\n\r\nIt contradicts (2), because SQL would compile the subquery.\r\nBut there would be a silent semantic change when column `x` is added to table `B`.\r\n\r\n---\r\n\r\nFor (2), CDL needs to support unqualified element (column) names in the SELECT clause even if a JOIN is used -\r\nwe might issue a warning for this case, though.\r\n\r\n```\r\nentity A { a: String(20); j: Integer; x: Integer; }     // from Partner A\r\nentity B { b: String(20); j: Integer; }                 // from Partner B\r\nview V as select from A join B {a, b, x} ON A.j = B.j;  // valid customer view\r\n```\r\n\r\nIt contradicts (3), as the unchanged customer view compiles with an error\r\nwhen partner B adds an element `x` to their table `B`.\r\n\r\n---\r\n\r\nPrinciple (3) is also contradicted for specific features like (multiple) entity includes.\r\n\r\nPrinciple (4) is not part of the name resolution rules in HANA-CDS.\r\n\r\nAs we never allow to break Principle (1), we have the following guideline:\r\n\r\n> **It is fine if definitions in the own source shadow other definitions (in the own source or others),\r\n> because the programmer is aware (and in control) of all these definitions.\r\n> It is evil if definitions made in other sources shadow other definitions (in the own source or others).**\r\n\r\n\r\n## Name Resolution - the Basics\r\n\r\nWe start with some terminology:\r\n\r\n* An **environment** is a dictionary binding/mapping (local) names to language constructs (e.g. entities or elements).\r\n\r\n* A **navigation environment** of a construct is the dictionary for definitions within that construct or a type/entity referred by that construct.\r\n\r\n  For contexts (and services), these are the sub artifacts defined within that context.\r\n  For types, entities, elements, these are the elements (or enum symbols) defined within that object or the object's (direct or indirect) type;\r\n  for association types, these are the elements of the target entity.\r\n  (The actions and parameters of an object cannot be accessed this way.)\r\n\r\n```\r\ncontext C { type X: Integer; };  // context \"C\" supplies env{ X: type(\"C.X\") }\r\ntype S { E: Integer; }\r\nextend S with { F: Integer; };   // type \"S\" supplies env{ E: elem(\"S\",\"E\"), F: … }\r\ntype T: S;                       // type \"T\" supplies the same env as type \"S\"\r\n```\r\n\r\n\r\n### Common rules\r\n\r\nName resolution is **case sensitive**.\r\nIn general, a model can contain artifacts and members whose name differ in case only;\r\nthere might be a linter check which informs model writers if they make use of this \"feature\".\r\n\r\nWhile being case sensitive might be against the original intention of SQL,\r\nit actually _conforms_ to the SQL Specification after abstraction from the lexical syntax,\r\nsee e.g. [SQL-92, §5.2.10 and 5.2.12…14](http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt)\r\nfor the semantics of quoted and non-quoted identifiers.\r\nIn CDL, we just do *not* transform non-quoted identifiers to all-upper names.\r\n\r\nAlso, CSN-processors are cumbersome to write if they have to deal with (partial/feigned) case-insensitivity.\r\n\r\n---\r\n\r\nIn CDL, an identifier may be used before its definitions,\r\nthere is **no need of forward declarations**.\r\nThus, the sequence of definitions inside a block does not matter for the scope rules:\r\n\r\n```\r\nusing T as OuterT;    // introduced to have a name for the shadowed \"T\"\r\ntype T: String(20);\r\ncontext C {\r\n    type D: T;        // -> C.T -> cds.Integer\r\n    type T: Integer;\r\n    type O: OuterT;   // -> T -> String(20)\r\n}\r\n// type C.O: T;       // alternative: define \"C.O\" outside the block of \"C\"\r\n```\r\n\r\nThere are two reasons to do so:\r\n\r\n* When using associations, (mutually) recursive usage is quite common, and forward references are cumbersome.\r\n  (We can always access shadowed artifacts.)\r\n* Real-world models will very likely reside in multiple files/resources – there is no natural order in which the definitions are to be processed.\r\n\r\n\r\n### Resolving paths\r\n\r\nThe algorithm for resolution of paths (consisting of dot-connected names)\r\nis as follows:\r\n\r\n 1. First, we try to find the language construct _O_ for the first name in the path;\r\n    this language construct is called the **path base**.\r\n\r\n 2. We resolve the next name in the path by inspecting the navigation environment of _O_.\r\n    The found language artifact is our next _O_.\r\n\r\n 3. We repeat Step 2 until the complete path is resolved.\r\n\r\nEven the algorithm for finding the path base follows the same pattern:\r\n\r\n* We have a list of search environments, which we inspect in order.\r\n  The first hit is the path base.\r\n  It is an error if the name (the first name of the path) cannot be found in any environment of the list.\r\n\r\n* All but the last environment are constructed from definitions in the current source\r\n  following the lexical block structure of the source,\r\n  or a small, fixed number of predefined names (e.g. `$self`.)\r\n  We will call such an environment a **lexical search environment**.\r\n\r\n* Only the last environment contains bindings **defined externally**, at least potentially.\r\n  It can be the environment for predefined artifacts (like `cds.Integer`),\r\n  or the navigation environment of the \"current artifact/member of interest\" (like the elements of the projection source).\r\n\r\nSo the guideline at the end of the previous section essentially becomes\r\n**lexical scoping first, search in one externally provided environment last**.\r\n\r\nThe basic difference between the name resolution strategies is the relevance of the lexical and the last environments,\r\nand how they are build.\r\n\r\n\r\n### Navigation environment\r\n\r\nThe navigation environment might depend on the argument position.\r\n\r\nIf an object is typed with an array,\r\nthe environment supplied by that object is usually considered to be empty.\r\nFor `type of` references and the to-be-extended element referenced in an inner extend,\r\nit is the environment supplied by the array item type:\r\n\r\n```\r\n@A.e: 1     // warning: cannot find `e` for annotation assignments\r\nannotation A : array of { e: Integer; };\r\n\r\nentity E {\r\n    items: many { i: Integer; };\r\n}\r\ntype T: type of E:items.i;      // valid = Integer\r\nannotate E with {\r\n    items { i @lineElement; };  // valid annotation\r\n}\r\nview V as select from E {\r\n    items.i                     // not valid (yet)\r\n}\r\n```\r\n\r\nFor the to-be-extended element referenced in an inner extend,\r\nwe consider the environment supplied by an association to be empty:\r\n\r\n```\r\ntype A: association to E;\r\nentity E { i: Integer; }\r\nannotate A with {\r\n    @targetElem i;     // err(info): do not follow associations\r\n}\r\ntype S { e: Integer; }\r\ntype T : S;\r\nannotate T with {\r\n    @derivedElem e;    // ok: follow derived type (not yet without beta)\r\n}\r\n```\r\n\r\n\r\n## References to main artifacts\r\n\r\nWhen we have an argument position where we expect a main artifact,\r\n\r\n* the list of lexical search environments depends on the blocks containing the current statement, and\r\n* the last, non-lexical search environment is independent from the block structure or a current object of interest.\r\n\r\nA reference to a main artifact can be a reference to a:\r\n\r\n* **projection or view source** (table reference after `SELECT … FROM` in SQL),\r\n* **association target**,\r\n* **type** (but not the reference after `type of`, see below)\r\n* **annotation** for an annotation assignment,\r\n* to-be-extended main artifact of an **outer extend**\r\n* **structure include**,\r\n* **type parameter** (should be a constant, not yet).\r\n\r\n---\r\n\r\nThe construction of the list of lexical search environments **starts at the innermost block** containing the current statement,\r\nand then continues to the next outer block:\r\n\r\n* As opposed to HANA-CDS, we skip blocks containing just element definitions\r\n  (or generally definitions of members like actions).\r\n* For blocks of `context` and `service` definitions, we add the definition inside that block\r\n  (all definitions in the environment supplied by the context or service can contain more definitions).\r\n* For the top-level block of the current source,\r\n  we add the top-level definitions and the bindings for the `using` declarations.\r\n\r\nThe last, non-lexical search environment is the environment for built-in artifacts.\r\nCurrently, it contains `String` for `cds.String`, similarly `LargeString`,\r\n`Integer`, `Integer64`, `Binary`, `LargeBinary`, `Decimal`, `DecimalFloat`, `Double`,\r\n`Date`, `Time`, `Timestamp`, `DateTime`, and `Boolean` and `hana`, also the namespace `cds`.\r\n\r\nWhen searching for an annotation (after the initial `@`), the last search environment\r\nare the model definitions.\r\n\r\n---\r\n\r\nWe conclude this section with a little weird example –\r\nnobody would write models like that, but it demonstrates the exact semantics.\r\n\r\n```\r\nnamespace test;\r\nusing cds.Boolean as Integer;\r\ntype Time {\r\n    @Date                  // @Date: true, not @cds.Date: true\r\n    Date: Date;            // typeOf(test.Time,Date) = cds.Date, no error\r\n    C: C.Date;             // typeOf(test.Time,C) = test.C.Date, no error\r\n}\r\n@C.Anno                    // @test.C.Anno: true\r\ndefine context C {\r\n    type Date: Time;       // test.C.Date -> test.C.Time, not test.Time\r\n    type Time: Integer;    // test.C.Time -> alias Integer -> cds.Boolean\r\n    type CC: C.Integer;    // test.C.CC -> test.C.Integer\r\n}\r\n@Integer                   // @cds.Boolean: true (warning: is no annotation)\r\ntype C.Integer: Time;      // test.C.Integer -> test.Time, not test.C.Time\r\n```\r\n\r\nIn this example, we have the following two lexical search environments:\r\n\r\n* The search environment containing definitions directly inside the block after `define context C`:\r\n  `Date`, `Time` and `CC`, but not `Integer` (but which is in the environment supplied by `test.C`).\r\n  Used as first search environment when resolving main artifact references in the block after `define context C`,\r\n  the next search environment is the environment containing top-level definitions.\r\n\r\n* The search environment containing the top-level definitions and using declarations of the source:\r\n  `Integer`, `Time` and `C`.\r\n  Used as first search environment when resolving main artifact references outside the block after `define context C`,\r\n  the next search environment is the non-lexical environment containing built-in artifacts.\r\n\r\nThere is no lexical search environment for the element definitions supplied by `test.Time`.\r\n\r\n---\r\n\r\nWe allow paths for names in top-level definitions.\r\nAll but the last name in the paths are (on-the-fly) contexts,\r\nwhich do _not introduce blocks_ for the lexical scoping:\r\n\r\n```\r\nentity N.mid.E {\r\n   key i: Integer;\r\n   to1: association to E;                // invalid\r\n   to2: association to mid.E;            // invalid\r\n   to3: association to N.mid.E;          // valid\r\n}\r\ncontext C {\r\n   context mid {\r\n       entity E {\r\n           key i: Integer;\r\n           to1: association to E;        // valid\r\n           to2: association to mid.E;    // valid\r\n           to3: association to C.mid.E;  // valid\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Values and references to elements\r\n\r\nWhen we have an argument position where we expect a value or a reference to an element,\r\n\r\n* We usually have just one lexical search environment\r\n  which is – dependening on the call context – only inspected if the path consists of at least two identifiers.\r\n  This basically introduces an **escape mechanism**.\r\n* The last, non-lexical environments is usually the environment either\r\n  supplied from an artifact referred by the current statement or\r\n  supplied by the object containing the current definition.\r\n\r\nIt is often allowed to switch to the [\"main artifact name resolution\"](#references-to-main-artifacts)\r\nby prefixing the path with a `:`, used usually to refer to constants.\r\n\r\nThe semantics is best explained separately for the _different groups_ of argument positions.\r\n\r\n\r\n### References in queries\r\n\r\nWe start with the most complicated group, because it is known from SQL:\r\nreferences in `SELECT` item positions –\r\nsimilar: `WHERE`, `ON`, **TODO**: `GROUP BY`, `ORDER BY` (or special?), …\r\n\r\n**TODO**: do the same for `as projection on`?\r\n\r\n**TODO**: names in `mixins`\r\n\r\nThe list of search environments is created as follows:\r\n\r\n* The (first) lexical search environment is build from the explicit and implicit alias names\r\n  for the sources (table references after `from`);\r\n  we also bind `$projection` to the resulting view/projection elements of the current SELECT\r\n  if not already used as a table alias.\r\n* If the current SELECT is a sub-SELECT,\r\n  we have additional lexical search environments containing alias names for the corresponding outer SELECTs;\r\n  their `$projection` bindings are shadowed.\r\n* For compatibility with ABAP CDS, we have another environment with one entry:\r\n  we bind `$parameters` to the parameters of the current view –\r\n  the SQL way is to use `:param1` instead of `$parameters.param1`, see below.\r\n* The last, non-lexical environment is the environment containing the elements from all source entities of the current SELECT;\r\n  if an element with the same name is contained in more than one source,\r\n  this search environment binds the name to an \"ambiguity\" entry (i.e. a reference to it leads to an error)\r\n* There are no additional non-lexical search environments for the elements of outer SELECTs.\r\n\r\nThe above mentioned `:`-escape mechanism leads to the following name resolution:\r\n\r\n* The first lexical search environment is the the environment containing all parameter names of the current view.\r\n* The following search environments are the usual ones from the \"main artifact name resolution\";\r\n  constant values can be accessed this way (_TODO_: probably not now).\r\n\r\n\r\n### References to sibling elements\r\n\r\nThe next group is for references in member definitions to other elements of the same main artifact.\r\nSuch a reference can be a reference to a:\r\n\r\n* **calculated field**\r\n* references in the **`default` value** (HANA SQL does not allow this)\r\n* references in the `ON` condition of an **unmanaged association***\r\n* reference after **`type of`** – can also be a references to an element of another main artifact\r\n\r\nThe list of search environments is created as follows:\r\n\r\n* There is one lexical search environment, it has one entry:\r\n  we bind `$self` to the main artifact, or to be exact:\r\n  to the current instance of that artifact, e.g. the current line of an entity.\r\n  This environment is also inspected if the path consists of just `$self` –\r\n  useful for `on` conditions of unmanaged associations.\r\n* The second and last, the non-lexical search environment is the environment supplied by\r\n  the object (main artifact or element) where the current member is defined in.\r\n\r\nThe above mentioned `:`-escape mechanism leads to the \"main artifact name resolution\";\r\nit can be used to access constants, or –for references after `type of`– elements of other artifacts.\r\n\r\nThe reason for the `$self` references is visible in an example with subelements\r\n(calculated fields are not supported yet):\r\n\r\n```\r\ntype T {\r\n    a: Integer;\r\n    b = a;            // b = a\r\n    c = $self.a;      // c = a\r\n}\r\nentity E {\r\n    a: Integer;\r\n    x: T;             // x.b = x.a, x.c = x.a\r\n    y { a: Integer;\r\n        b = a;        // y.b = y.a\r\n        c = $self.a;  // y.c = a\r\n    };\r\n}\r\nentity S {\r\n    $self: Integer;   // we might complain about such an element name\r\n    x = $self.$self;  // x = $self (the element)\r\n}\r\n```\r\n\r\n\r\n### Other element references\r\n\r\nA **foreign key** in the definition of a managed association,\r\nis just searched in the environment supplied by the target entity.\r\nNo lexical search environment is inspected first.\r\n\r\nIn an **inner extend**,\r\nwe just search in the navigation environment of the current language construct.\r\nNo lexical search environment is inspected first.\r\n<br/>\r\nThese are actually not necessary references to elements,\r\nbut also sub artifacts (e.g. `extend` in `extend context`),\r\nactions (in the `actions` clause of `extend entity`), or\r\nparameters (in the `parameters` clause of `extend action`).\r\n\r\n_TODO_: more use cases, like references inside filter conditions of paths.\r\n\r\n\r\n## Paths as annotation values\r\n\r\nWe can also use paths as annotation assignment values.\r\n\r\nIf there is _no annotation definition_ (there might be a warning for this)\r\nthen the path cannot be resolved at all.\r\nThe same is true if the annotation type\r\ndoes not allow path values (then there might be a warning for this)\r\nor just a `cds.UnspecifiedRef`.\r\n\r\nIf there is an annotation definition which allows to use paths\r\nby specifying the type _`cds.ArtifactRef`_ (or a variant of it),\r\nthen the path resolution works as described in\r\n[Section \"References to Main Artifacts\"](#references-to-main-artifacts).\r\n\r\nIf there is an annotation definition which allows to use paths\r\nby specifying the type _`cds.ElementRef`_\r\nthen the path resolution works as described in\r\n[Section \"References sibling elements\"](#references-to-sibling-elements).\r\nIf that annotation is assigned to a main artifact\r\nthen _same main artifact_ means the main artifact itself.\r\n\r\n\r\n\r\n## Differences to HANA-CDS\r\n\r\nThe most visible differences in the name resolution semantics of CDL compared to HANA CDS are:\r\n\r\n* Using constant values requires to prefix the path (referring to the constant) with a `:`.\r\n* There is a new semantic for paths (without initial `:`) used in annotation assignments.\r\n* In the definitions of sub elements, accessing elements supplied by the corresponding main artifact\r\n  requires to prefix the path with `$self.`.\r\n  Accessing sibling elements works the same as in HANA CDS.\r\n* It is no problem to define elements which have the same (local) name as the referenced type.\r\n* In views with more than one source entity,\r\n  selecting an element `e` from one source without the use of a table alias (which is not recommended anyway!)\r\n  suddenly does not compile anymore if another source entity is extended by a new element `e`.\r\n\r\nIn HANA-CDS, the name resolution works quite uniformly for all argument positions,\r\nwith most clauses of `SELECT` being the main exception.\r\nIt is also compatible to the \"pre-extension\" name resolution semantics of HANA-CDS.\r\nThis is nice!  Why do we specify a different name resolution semantics for CDL?\r\n\r\nThe reason is:\r\nwe do not want to have the \"extended\" lexical scoping semantics of HANA CDS concerning elements,\r\nwhich heavily relies on the package hierarchy.\r\nTo avoid silent semantic changes with extensions,\r\nthe HANA-CDS compiler enforces the following properties:\r\n\r\n* Every source belongs to a package;\r\n  packages can depend on other packages, no cycles are allowed.\r\n* No language construct can be extended in the same package where it is defined in,\r\n  no language construct can be extended twice in the same package\r\n* Artifacts can only be extended by top-level extend statements,\r\n  elements can only be extended by inner extends (the second is true for CDx/Language, too).\r\n\r\nThese are properties which do not hold for consumers of the CAP CDS Compiler.\r\n\r\nAdditionally, while direct changes in base packages can always lead to semantic changes,\r\nthe following example shows that this unwanted effect is more likely in HANA-CDS:\r\n\r\n```\r\n// BaseApp.cds ---\r\nentity E {\r\n  a: String(20);\r\n  b {\r\n    // a: Integer;   // CHANGE: introduce sub element\r\n    x: Integer;\r\n  };\r\n}\r\n// MyExtension.cds ---\r\nextend E with {\r\n  extend b with {\r\n    z = a;           // in CDL: $self.a, calculated fields are not supported yet\r\n  }\r\n}\r\n```\r\n\r\nIn HANA-CDS, both files compile before and after the change in `BaseApp.cds`:\r\nthe element `b.z` of `E` refers to element `a` of `E`, but after the change to `b.a` of `E`,\r\nbecause that element is visible in the base package and all its extensions\r\n(we would not see the problem if `b.a` would have been introduced by an extension in another package).\r\n\r\nIn CDx/Language, the files only compile after the change in `BaseApp.cds`:\r\n(with the same semantics as in HANA-CDS).  To make it work before the change,\r\nelement `b.z` of `E` can refer to element `a` of `E` by writing this references as `$self.a` –\r\nwith this path, `b.z` still refers to `a` of `E` after the change in `BaseApp.cds`.\r\n\r\n\r\n## Summary\r\n\r\n[summary]: #summary\r\n\r\nTo avoid silent semantic changes with extensions or new CDL versions,\r\nwe follow the following principle:\r\n\r\n> **After we have tried to find a local name in an environment containing\r\n> artifacts or elements which are potentially defined somewhere else (e.g. via an extension),\r\n> we do not inspect any other environment.**\r\n\r\nIn CDx/Language, we basically have two search strategies.\r\nBut let us start with Strategy 0:\r\n\r\n**Resolving a name in the tail of a path**.\r\n\r\nFor a path `a.b`, we only inspect one environment when resolving `b`: the environment supplied by `a`.\r\nFor example, if `a` is a structured element, we try to find `b` in all sub elements of `a` –\r\nit does not matter\r\nwhether the sub element `b` has been directly defined with the definition of element `a`, or\r\nwhether is has been defined externally:\r\nvia an extension or as an element of the referenced type.\r\n\r\n**Resolving the first name of a path when looking for artifacts**.\r\n\r\nWe apply _lexical scoping_  when we refer to types, entities and similar artifacts.\r\nWhen looking for an artifact `A`,\r\nwe search in the blocks of surrounding `context`, `service` and top-level definitions,\r\nstarting at the _innermost block_ and ending at the _top-level block_ of the source.\r\nTo make it clear: we do not search in blocks of type, entity or other definitions,\r\njust blocks of contexts (and similar constructs).\r\n\r\nWe only consider definitions within these blocks, _not_ all sub artifacts of the contexts,\r\nwhich might have been introduced by context extensions, or\r\nby using a path in the definition, e.g. `type MyContext.A: …`.\r\n\r\nIf the search is not successful so far,\r\nwe finally inspect an environment containing artifacts\r\nwhich are normally not defined in our own source:\r\n\r\n* For the `@A` of an _annotation assignment_,\r\n  we look for `A` in the `definitions` property of the model.\r\n* For all other references,\r\n  we look for `A` in the built-in environment,\r\n  where we define things like `cds.Integer`.\r\n\r\nThis search is also used for path references in annotation assignments\r\nwhen the corresponding definition allows the type `cds.ArtifactRef` (or variants, future).\r\n\r\n**Resolving the first name of a path when looking for values or elements**.\r\n\r\nWe search for elements supplied by the current \"language construct of interest\",\r\nwhich depends on the argument position.\r\nThe most relevant ones are:\r\n\r\n* The element or artifact where the current (sub) artifact is defined in,\r\n  i.e. we access sibling elements.\r\n* The source of the current projection or view.\r\n\r\nDepending on the argument position,\r\nthere is an _escape mechanism_ – which is tried first – to access also other elements.\r\nThe most relevant ones are:\r\n\r\n* If the paths starts with the identifier `$self`,\r\n  we look for the next name of the path in the environment supplied by the\r\n  corresponding main artifact of the current element.\r\n  This is useful for element references inside sub elements to access siblings of ancestors.\r\n* If a path in most clauses of a view starts with `a`,\r\n  and `a` is an explicit or implicit table alias (which we always see in our source),\r\n  we look for the next identifier of the path in the environment supplied by the corresponding entity.\r\n* If the path is prefixed by a `:`,\r\n  we actually switch to the other search strategy: looking for artifacts like types.\r\n  This is useful to access constant values (or for `type of`).\r\n\r\nThis search is also used for path references in annotation assignments\r\nwhen the corresponding definition allows the type `cds.ElementRef` (future).\r\n"},{"name":"ODataTransformation.md","content":"# ODATA Transformation\r\n\r\n> Status Oct 2019: outdated, uses old-style CSN, to be reworked completely -> move to internalDoc/.\r\n> For users, OData is a backend, they do not care too much that it works via a CSN transformation.\r\n\r\nPrior to the generation of EDMX (Entity Data Model XML) files from a CDS model,\r\nthe following transformations are applied to the model. Most (but not all) of\r\nthem become visible both in Augmented CSN and in Plain CSN:\r\n\r\n## Generated foreign key fields for managed associations\r\n\r\nManaged associations do not have ON-conditions. Instead, they implicitly\r\ncompare fields (usually the key fields) of the association's target entity with\r\nforeign key fields automatically generated into the entity containing the\r\nassociation.\r\n\r\n### Creating the generated fields\r\n\r\nThe ODATA transformation adds the generated foreign key fields to the model.\r\nThe names of the generated foreign key fields are a concatenation of the\r\nassociation element name, an underscore, and the key name or its alias.\r\n\r\nEach generated foreign key field gets the name of the corresponding association\r\nas an annotation `@odata.foreignKey4`.\r\n\r\n_FIXME_: Do we want to keep that?\r\n\r\nFor example, for the three association elements `a1`, `a2` and `a3` in the\r\nfollowing snippet:\r\n\r\n```\r\nservice S {\r\n  entity FromEntity {\r\n    a1 : association to ToEntity;          // Use target's keys\r\n    a2 : association to ToEntity {x};      // Explicitly specified key\r\n    a3 : association to ToEntity {x as z}; // Key with alias\r\n  }\r\n\r\n  entity ToEntity {\r\n    key x : Integer;\r\n    key y : Integer;\r\n  }\r\n}\r\n```\r\n\r\nthe ODATA transformation would generate foreign key fields in the resulting CSN\r\nas follows (shown here in CDS source form):\r\n\r\n```\r\nentity FromEntity {\r\n  a1 : association to ToEntity;\r\n  a2 : association to ToEntity {x};\r\n  @odata.foreignKey4: 'a1'\r\n  a1_x : Integer;  // Generated foreign key\r\n  @odata.foreignKey4: 'a1'\r\n  a1_y : Integer;  // Generated foreign key\r\n  @odata.foreignKey4: 'a2'\r\n  a2_x : Integer;  // Generated foreign key\r\n  @odata.foreignKey4: 'a3'\r\n  a3_z : Integer;  // Generated foreign key\r\n}\r\n```\r\n\r\nIt is an error if the generated fields conflict with existing fields.\r\n\r\n### Annotation propagation\r\n\r\nThe ODATA transformation propagates all annotations from the association to all\r\nits generated foreign key fields.\r\n\r\n_FIXME_: Do we want to keep that?\r\n\r\n### Connecting the associations with the generated fields\r\n\r\nThe CSN for the managed association elements contains a `foreignKeys` property,\r\nwhich is a dictionary of foreign key names (taken from the target key names, or\r\nfrom explicitly specified keys resp. their aliases) to the foreign key\r\nproperties.\r\n\r\nThe ODATA transformation adds a `generatedFieldName` property to each foreign\r\nkey, containing the name of the generated foreign key field. Together with the\r\n`@odata.foreignKey4` annotation described above, this provides a bi-directional\r\nlink between the association and its generated field.\r\n\r\nFor the example shown above, the CSN for the three association elements `a1`,\r\n`a2` and `a3` would look as follows:\r\n\r\n```\r\n  \"a1\": {\r\n    \"indexNo\": 1,\r\n    \"target\": \"S.ToEntity\",\r\n    \"type\": \"cds.Association\",\r\n    \"foreignKeys\": {\r\n      \"x\": {\r\n        \"indexNo\": 1,\r\n        \"path\": \"x\",\r\n        \"generatedFieldName\": \"a1_x\"\r\n      },\r\n      \"y\": {\r\n        \"indexNo\": 2,\r\n        \"path\": \"y\",\r\n        \"generatedFieldName\": \"a1_y\"\r\n      }\r\n    }\r\n  },\r\n  \"a2\": {\r\n    \"indexNo\": 2,\r\n    \"target\": \"S.ToEntity\",\r\n    \"type\": \"cds.Association\",\r\n    \"foreignKeys\": {\r\n      \"x\": {\r\n        \"path\": \"x\",\r\n        \"indexNo\": 1,\r\n        \"generatedFieldName\": \"a2_x\"\r\n      }\r\n    }\r\n  },\r\n  \"a3\": {\r\n    \"indexNo\": 3,\r\n    \"target\": \"S.ToEntity\",\r\n    \"type\": \"cds.Association\",\r\n    \"foreignKeys\": {\r\n      \"z\": {\r\n        \"path\": \"x\",\r\n        \"indexNo\": 1,\r\n        \"generatedFieldName\": \"a3_z\"\r\n      }\r\n    }\r\n  },\r\n```\r\n\r\n## (Augmented CSN only): Adding `_service` to exposed artifacts\r\n\r\nFor each artifact that is exposed by a service (including the service itself),\r\nthe ODATA transformation adds a non-enumerable property `_service` to the\r\nartifact in the Augmented CSN model, containing a link to the corresponding\r\nservice artifact.\r\n\r\nThis is convenient for EDMX processors that want to process only exposed\r\nartifacts or only artifacts belonging to a specific service.\r\n\r\n## Implicit redirection for non-exposed association targets\r\n\r\nFor each exposed artifact that contains associations, it is checked that the\r\nassociation target is also exposed by the same service. If this is not the\r\ncase, the ODATA transformation tries to find an \"exposed representative\" of\r\nthe target, i.e. an exposed projection or view on the target, or an exposed entity\r\nthat includes the target. If such a representative is found and unique, the\r\nassociation is implicitly redirected to the exposed representative.\r\n\r\nNote that only projections and projection-like views (i.e. those that have a\r\nsingle `from` source without `union`, `join` or nested queries) are considered\r\nas implicit redirection targets.\r\n\r\nExample:\r\n\r\n```\r\n// All these entities are used as association targets below\r\n// Simple target\r\nentity E1 {\r\n  key id : Integer;\r\n}\r\n// Base target included by E2a\r\nentity E2 {\r\n  key id : Integer;\r\n}\r\nentity E2a : E2 {\r\n  s : String(10);\r\n}\r\n// Base target included by S.E3a\r\nentity E3 {\r\n  key id : Integer;\r\n}\r\n\r\n// Exposure in service\r\nservice S {\r\n  entity P1 as projection on E1;    // Exposes simple target E1\r\n  entity P2a as projection on E2a;  // Exposes E2a but also its included E2\r\n  entity E3a : E3 { };              // Exposes included E3\r\n\r\n  entity Redirected {\r\n    toE1 : association to E1;   // Implicitly redirected to P1 (projection exposes E1)\r\n    toE2 : association to E2;   // Implicitly redirected to P2a (projection exposes something that includes E2)\r\n    toE3 : association to E3;   // Implicitly redirected to E3a (entity includes E3)\r\n  }\r\n}\r\n```\r\n\r\n## Exposure checking\r\n\r\nCurrently, it is assumed that services must be self-contained, i.e. that all\r\nassociations within a service must point to targets also exposed by this\r\nservice. This is checked by the ODATA transformation.\r\n\r\n_FIXME: The same restriction will probably apply when structured types are\r\nallowed as element types within exposed entities._\r\n\r\n## Unraveling derived scalar types\r\n\r\nThe ODATA transformation unravels derived scalar types, i.e. primitive types\r\nfor which the user has provided a custom name (possibly multiple times in a\r\nchain) are replaced by the original primitive type. Annotations are propagated\r\nupwards in the chain from the primitive type to the most derived type.\r\n\r\nFor example, the following CDS source\r\n\r\n```\r\n@IsName: true\r\ntype Name : String(20);\r\n\r\n@IsCustomer: true\r\ntype CustomerName : Name;\r\n\r\nservice S {\r\n  entity E {\r\n    name : CustomerName;\r\n  }\r\n}\r\n```\r\n\r\nessentially behaves as if the user had written\r\n\r\n```\r\nservice S {\r\n  entity E {\r\n    @IsCustomer: true\r\n    @IsName: true\r\n    name : String(20);\r\n  }\r\n}\r\n```\r\n\r\n## (Tentative): Checking ON-conditions\r\n\r\nCurrently, the ODATA transformation checks for various restrictions regarding\r\nON-conditions of unmanaged associations:\r\n\r\n- only `=` and `AND` operators may be used\r\n- operands may only be paths or values (not expressions)\r\n- exactly one of the operands must traverse the association\r\n\r\nThe intention behind this restriction is to produce a meaningful value for the\r\n`ReferentialConstraint` of the resulting `NavigationProperty`.\r\n\r\n_FIXME_: Do we want to keep that?\r\n\r\n## (Tentative): Renaming annotations\r\n\r\nCurrently, the ODATA transformation renames various \"shorthand\" annotations to\r\ntheir more elaborate \"long form\".\r\n\r\n| Original name              | New name                                      |\r\n| -------------------------- | --------------------------------------------- |\r\n| `@label`                   | `@Common.Label`                               |\r\n| `@label`                   | `@Common.Label`                               |\r\n| `@title`                   | `@Common.Label`                               |\r\n| `@ValueList.entity`        | `@Common.ValueList.entity`                    |\r\n| `@ValueList.type`          | `@Common.ValueList.type`                      |\r\n| `@Capabilities.Deletable`  | `@Capabilities.DeleteRestrictions.Deletable`  |\r\n| `@Capabilities.Insertable` | `@Capabilities.InsertRestrictions.Insertable` |\r\n| `@Capabilities.Updatable`  | `@Capabilities.UpdateRestrictions.Updatable`  |\r\n| `@readonly`                | `@Core.Immutable`                             |\r\n| `@important`               | `@UI.Importance`                              |\r\n| `@assert.format`           | `@Validation.pattern: value`                  |\r\n| `@assert.range`            | `@Validation.Minimum/Maximum: value`          |\r\n|                            | or `@Validation.AllowedValues: {`             |\r\n|                            |      `@Core.SymbolicName: enum-name }`        |\r\n\r\n\r\nFor the annotation `@important` (which is renamed to `@UI.Importance`), the\r\nvalues `true`/`false` are also replaced by the enum constants `#High`/`#Low`.\r\n\r\n_FIXME_: Do we want to keep that?\r\n"},{"name":"toSwagger.md","content":"# To Swagger transformation\r\n\r\n> Status Oct 2019: outdated.  As long as the `toSwagger` backend only works with `--beta-mode`, this doc should be in internalDoc/.\r\n> Some JSON code snippets might be a bit too long.\r\n\r\n\"The OpenAPI Specification, originally known as the Swagger Specification, is\r\na specification for machine-readable interface files for describing, producing,\r\nconsuming, and visualizing RESTful Web services.\" - [Wikipedia](https://en.wikipedia.org/wiki/OpenAPI_Specification)\r\n\r\nIn 2015 the Swagger specification was renamed to the OpenAPI specification.\r\nThe compiler's functionality provides an output as per the OpenAPI 3.0.0 specification,\r\nregardless of being called 'to Swagger'.\r\n\r\n## Transform a CDS model to a swagger json file\r\n\r\nExecuting the compiler with the `--to-swagger` option or in short `-S` gives the opportunity\r\nbased on your CDS model an OpenAPI json file(s) to be produced. In addition to the option, a mandatory\r\nflag(s) needs to be added. The flags can be a comma-separated combination of \"json\" and \"csn\".\r\nThe `json` flag generate output for each service in the model, the `csn` flag the\r\npreprocessed model with to swagger specifics.\r\n\r\n### Basic information\r\n\r\nMultiple services generation is supported as for each service in the input CDS model a separate swagger\r\ndocument is created.\r\n\r\nEvery OpenAPI 3.0.0 document should have an \"openapi\" property, which specifies the version of the\r\nspecification followed, in our case the \"3.0.0\" value is assigned. Also, the document receives a property\r\n\"info\" with \"title\" and value is the name of the corresponding service for the swagger document.\r\n\r\n### Paths\r\n\r\nThe \"paths\" property of the OpenAPI document describes the available paths and operations for\r\nthe API in question. The unbound actions and functions play a role as a feeder for the\r\ninformation in the `paths` property of the swagger model.\r\n\r\nAs the paths property is a mandatory one, if no content for generation is found in the model, then an empty\r\nobject will be generated.\r\n\r\n#### HTTP method\r\n\r\nThe corresponding definitions of paths in CDS model are the (un)bound actions and functions.\r\nSuch an action or a function must be annotated with the specified annotation so the generator takes\r\nit in mind. The annotation declares the desired HTTP method and the response code.\r\nThree different syntaxes are available:\r\n\r\n 1. __@Swagger.GET : 200__ - a GET operation with response code 200 is generated\r\n 2. __@Swagger.POST__ - a POST operation with the default response code is generated\r\n 3. __@Swagger.DELETE : [202, 204, 200]__ - a DELETE operation with responses for every of 202, 204 and 200 codes\r\n or the three variants can be combined in:\r\n __@Swagger : { GET : 200, POST, DELETE : [202, 204, 200] }__\r\n\r\n> To define a range of response codes, you may use the following range definitions:\r\n> __1XX__, __2XX__, __3XX__, __4XX__, and __5XX__.\r\n\r\nBy the OpenAPI specification __GET__, __PUT__, __POST__, __DELETE__, __OPTIONS__, __HEAD__, __PATCH__ and __TRACE__\r\nare the supported http verbs. Still not supported in the CDS compiler are only __OPTIONS__ and __TRACE__.\r\n\r\nIf the user decides not to specify a response code(using the __@Swagger.*method*__), then an operation with default code will be\r\ngenerated. The default code for a __PATCH__ operation is __204__, for the rest of the operations is __200__.\r\n\r\n#### Path to an individual endpoint\r\n\r\nIf a relative path to an individual endpoint is not specified by the user, then the default one is assigned.\r\nThis default path is composed from the service name, the entity name(if the action/function is bound) and the\r\nname of the action. An example for bound action will be:\r\n`/com.test.MyService.MyEntyty/myAction` and for\r\nunbound: `/com.test.MyService/myFunction`.\r\n\r\nFor the case when the user wants an operation to serves under a specific path, that can be arranged with the __@Swagger.path__\r\nannotation. The custom path can include parameters e.g. ``@Swagger.path : '/MyPath/bookByName/{bookName}'``.\r\n> In this case the user has to take care the names of the parameters to correspond to the name\r\n> of parameters specified in the action/function declaration.\r\n\r\n#### Operations parameters\r\n\r\nThe OpenAPI specification states that a parameter can have location ([the property 'in' of a parameter object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#parameterObject))\r\nwith one of the following values:\r\n- query\r\n- header\r\n- path\r\n- cookie\r\n\r\nWith the __@Swagger.parameter__ annotation applied to a parameter this location can be specified. If not specified - __query__ is taken as value.\r\n\r\n> If a value *path* is given for the __@Swagger.parameter__ annotation, this means that automatically the name of the parameter\r\n> is prepended to the path name. This is valid only if a __@Swagger.path__ annotation is not used.\r\n\r\nThe parameter location resolving is illustrated with the following example:\r\n\r\nGiven is the CDS model\r\n```\r\n...\r\nactions {\r\n  @Swagger.GET\r\n  action bookById(@Swagger.parameter: 'path' bookId : Integer) returns Book;\r\n  @Swagger.GET\r\n  action bookByName(@Swagger.parameter: 'cookie' bookName: String) returns Book;\r\n  @Swagger.GET\r\n  action booksByAuthor(authorName: String) returns array of Book;\r\n};\r\n...\r\n```\r\n\r\nthe result will look like:\r\n```json\r\n...\r\n\"paths\": {\r\n  \"/Bookstore/Book/bookById/{bookId}\": {\r\n    \"get\": {\r\n      \"summary\": \"\",\r\n      \"operationId\": \"\",\r\n      \"tags\": [],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Expected response to a valid request\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"default\": {\r\n          \"description\": \"unexpected error\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Error\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"bookId\",\r\n          \"in\": \"path\",\r\n          \"description\": \"\",\r\n          \"required\": true,\r\n          \"schema\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"/Bookstore/Book/bookByName\": {\r\n    \"get\": {\r\n      \"summary\": \"\",\r\n      \"operationId\": \"\",\r\n      \"tags\": [],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Expected response to a valid request\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"default\": {\r\n          \"description\": \"unexpected error\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Error\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"bookName\",\r\n          \"in\": \"cookie\",\r\n          \"description\": \"\",\r\n          \"required\": false,\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"/Bookstore/Book/booksByAuthor\": {\r\n    \"get\": {\r\n      \"summary\": \"\",\r\n      \"operationId\": \"\",\r\n      \"tags\": [],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Expected response to a valid request\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"type\": \"array\",\r\n                \"items\": {\r\n                  \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          \"headers\": {\r\n            \"x-next\": {\r\n              \"description\": \"A link to the next page of responses\",\r\n              \"schema\": {\r\n                \"type\": \"string\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"default\": {\r\n          \"description\": \"unexpected error\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Error\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"authorName\",\r\n          \"in\": \"query\",\r\n          \"description\": \"\",\r\n          \"required\": false,\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n...\r\n```\r\n\r\n#### Request body\r\n\r\nFor the __@Swagger.parameter__ annotation can be given one more value - __requestBody__.\r\nThis value can be used in a *POST*, *PUT* or *PATCH* requests. It indicates that for the specified parameter\r\na __requestBody__ property will be generated for the path object.\r\n> Only one parameter can be annotated with this value - the first found will be taken in mind.\r\n> The annotated parameter will *not be included* in the __parameters__ property.\r\n\r\n#### Arrayed responses\r\n\r\nAs seen in the example above, if an action/function has a return type ``... returns array of <entity_name>``, then for the\r\nOpenAPI document the schema for this specific response is of type array with items of type the pointed entity and a header, which\r\nis a link to the next page of responses, or:\r\n```json\r\n\"200\": {\r\n  \"description\": \"Expected response to a valid request\",\r\n  \"content\": {\r\n    \"application/json\": {\r\n      \"schema\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n          \"$ref\": \"#/components/schemas/<entity_name>\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"headers\": {\r\n    \"x-next\": {\r\n      \"description\": \"A link to the next page of responses\",\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      }\r\n    }\r\n  }\r\n},\r\n```\r\n\r\n### Schemas\r\n\r\nOne of the major components in an OpenAPI interface file is the components' schemas.\r\nThe corresponding artifacts to schemas in the OpenAPI file from a CDS model are the definitions.\r\n\r\nExecuting the following model:\r\n```\r\nservice Petstore {\r\n  entity Pet {\r\n    id : Integer64 not null;\r\n    name : String not null;\r\n    tag : String(10);\r\n  };\r\n};\r\n```\r\nwill result in:\r\n```json\r\n...\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"Petstore.Pet\": {\r\n        \"required\": [\r\n          \"id\",\r\n          \"name\"\r\n        ],\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int64\"\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"tag\": {\r\n            \"maxLength\": 10,\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      }\r\n...\r\n```\r\n\r\nIn short, all the artifacts enclosed in a service definition of a CDS model are transformed into a top-level\r\ndefinitions into the `schemas` part of an OpenAPI json file, except for the services/contexts, unbound actions and functions, namespaces.\r\nA service declaration in a CDS model should be self-containing, which means that is declarations outside of the service are used, an error will\r\nbe thrown. The only case that is an exception here is when an element is of a type which is user-defined and the user-defined type is builtin\r\nand outside of the service, then the type of the element is expanded to the builtin type.\r\n\r\nWhen we have an association the target should be from the current service or exposed in the current service via projection.\r\n\r\nEvery top-level artifact is represented like a Schema Object as described in the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject)\r\n\r\nThe associations are treated regarding their cardinality respectively:\r\n- to-one leads to a single object response with schema as the target\r\n- to-many is represented as an array with items of a type the corresponding target\r\n\r\n#### Association redirection in projections\r\n\r\nThis redirection is expressed in switching the target of an association, which is part of a projection\r\nto the corresponding projection(on the target of the association in the underlying context) from the current service.\r\nFor example the following model:\r\n\r\n```\r\nservice Bookstore {\r\n  entity Book as projection on BookstoreContext.Book;\r\n  entity Author as projection on BookstoreContext.Author;\r\n  @Swagger.GET\r\n  action books() returns array of Book;\r\n};\r\n\r\ncontext BookstoreContext {\r\n  entity Book {\r\n    id : Integer64 not null;\r\n    name : String not null;\r\n    author : association to Author;\r\n  };\r\n\r\n  entity Author {\r\n    key id : Integer;\r\n    firstName : String;\r\n    lastName : String;\r\n  };\r\n};\r\n```\r\nwill result in:\r\n```json\r\n{\r\n  \"openapi\": \"3.0.0\",\r\n  \"info\": {\r\n    \"version\": \"\",\r\n    \"title\": \"Bookstore\"\r\n  },\r\n  \"paths\": {\r\n    \"/Bookstore/books\": {\r\n      \"get\": {\r\n        \"summary\": \"\",\r\n        \"operationId\": \"\",\r\n        \"tags\": [],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"Expected response to a valid request\",\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"type\": \"array\",\r\n                  \"items\": {\r\n                    \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            \"headers\": {\r\n              \"x-next\": {\r\n                \"description\": \"A link to the next page of responses\",\r\n                \"schema\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          \"default\": {\r\n            \"description\": \"unexpected error\",\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"$ref\": \"#/components/schemas/Error\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"Bookstore.Book\": {\r\n        \"required\": [\r\n          \"id\",\r\n          \"name\"\r\n        ],\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int64\"\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"author\": {\r\n            \"$ref\": \"#/components/schemas/Bookstore.Author\"\r\n          }\r\n        }\r\n      },\r\n      \"Bookstore.Author\": {\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          },\r\n          \"firstName\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"lastName\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      },\r\n      \"Error\": {\r\n        \"required\": [\r\n          \"code\",\r\n          \"message\"\r\n        ],\r\n        \"properties\": {\r\n          \"code\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          },\r\n          \"message\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThe same redirection is performed for user-defined types, as the type declaration should be also exposed to the service in question.\r\n\r\n#### CDS Views\r\n\r\nFrom a view declared in the CDS model is generated a schema similar to the one coming from an entity, as\r\nthe logic from the view is not applicable for describe in the API spec.\r\n\r\n#### Enums\r\n\r\nDeclared in the CDS model enums are generated as the values are taken in mind.\r\n\r\n```\r\n...\r\n  entity MyEntity {\r\n    elem : String enum { foo = 'bar'; };\r\n  };\r\n...\r\n```\r\nThe output:\r\n```json\r\n...\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"MyEntity\": {\r\n        \"properties\": {\r\n          \"elem\": {\r\n            \"enum\": [\r\n              \"bar\"\r\n            ],\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      },\r\n...\r\n```\r\n"},{"name":"Versioning.md","content":"# Versioning\r\n\r\nThe cds-compiler uses [Semantic Versioning][SemVer] for its version numbers.\r\n\r\nThis document clarifies how we use [SemVer] and what you can and what you can‘t\r\nexpect from version updates.\r\n\r\n<!-- toc: start -->\r\n\r\n1. [Public API](#public-api)\r\n2. [Patch Versions](#patch-versions)\r\n3. [Minor Versions](#minor-versions)\r\n4. [Beta Flags](#beta-flags)\r\n5. [Deprecated Flags](#deprecated-flags)\r\n6. [Command Line Tool `cdsc`](#command-line-tool-cdsc)\r\n\r\n<!-- toc: end -->\r\n\r\n## Public API\r\n\r\nAccording to [§1] of SemVer, a public API must be made available.  Our public\r\nAPI is available through `lib/main.js` which can be used by\r\n`const compiler = require('@sap/cds-compiler');` in NodeJS or, if you use\r\nES modules, with `import compiler from \"@sap/cds-compiler\";`\r\n\r\nFurthermore, any exported property in `lib/main.js` whose name starts with `$`\r\nis _not_ part of the public API.\r\n\r\nUsing any other file is not considered “public” and is not covered by any\r\nguarantees about API stability.\r\n\r\n## Patch Versions\r\n\r\nIn [§6] of SemVer, it is stated that only “backwards compatible bug fixes” are\r\nto be introduced by patch versions.  And “A bug fix is defined as an internal\r\nchange that fixes incorrect behavior.”\r\n\r\nWe _may_ introduce new compiler-checks in patch versions that catch incorrect\r\nCDS which may lead to invalid SQL or EDM(X) files.  Therefore, if your code\r\ncontains invalid CDS, a patch release may make them visible and CDS files _may_\r\nfail to compile.  \r\nHowever, most of the time, new errors are first introduced as warnings and are\r\nonly later upgraded to errors.\r\n\r\n## Minor Versions\r\n\r\n[§7] of SemVer covers minor version updates.  The same exceptions as for\r\n“patch versions” can be applied.\r\n\r\nWe may introduce new compiler-checks that might make your compilation fail if\r\nwe detect invalid CDS code.\r\n\r\n## Beta Flags\r\n\r\nThe compiler provides so-called “beta flags” that enable or disable certain\r\nfeatures.  We do not guarantee that any such flags stay consistent between\r\npatch versions!  Beta flags may change any time.\r\n\r\nRefer to [CHANGELOG_BETA.md](./CHANGELOG_BETA.md) for changes to beta flags.\r\n\r\n## Deprecated Flags\r\n\r\n“Deprecated flags” allow developers to switch to old behavior and make it\r\neasier to upgrade to a later major version.  These flags may be changed or\r\nremoved anytime as they only serve to make upgrades easier during a grace\r\nperiod.\r\n\r\nRefer to [CHANGELOG_DEPRECATED.md](./CHANGELOG_DEPRECATED.md) for changes\r\nto deprecated flags.\r\n\r\n## Command Line Tool `cdsc`\r\n\r\n`bin/cdsc.js` as well as all other command line tools do _not_ guarantee any\r\nstability.  It is considered a compiler internal tool that only serves for\r\ndebugging.  The official command line tool `cds` of the `@sap/cds` and\r\n`@sap/cds-dk` packages are to be used by users.  That means commands and\r\noptions may change any time without prior notice.  Changes may still be listed\r\nin [CHANGELOG.md](../CHANGELOG.md).\r\n\r\n[SemVer]: https://semver.org/\r\n[§1]: https://semver.org/#spec-item-1\r\n[§6]: https://semver.org/#spec-item-6\r\n[§7]: https://semver.org/#spec-item-7\r\n"}]},{"name":"ErrorMessages.md","content":"# Error Messages Explained\r\n\r\n> Status Oct 2019: up-to-date\r\n\r\nThis document tries to explain some of the less-obvious error messages.\r\n\r\n## Common Compiler Messages (Independent From Backend)\r\n\r\n### Duplicate definitions\r\n\r\nIn most cases, you really have just used the same name twice when defining an artifact.\r\nThis section is about a situation where you are pretty sure that you have not done that.\r\n\r\n```\r\nnode_modules/Base/index.cds:1:6-7: Error: Duplicate definition of artifact \"T\"\r\nnode_modules/base/index.cds:1:6-7: Error: Duplicate definition of artifact \"T\"\r\nnode_modules/dep/node_modules/model/index.cds:1:8-9: Error: Duplicate definition of artifact \"E\"\r\nnode_modules/model/index.cds:1:8-9: Error: Duplicate definition of artifact \"E\"\r\n```\r\n\r\nHere, the CDS Compiler considers `…/Base/index.cds` to be different to `…/base/index.cds`,\r\nand also considers the two `…/model/index.cds` files to be different files.\r\nWhy is that the case?  Consider the following \"top-level\" file\r\n\r\n```\r\nusing from 'Base';     // upper-case 'B'!\r\nusing from 'model';\r\nusing from 'dep';\r\n```\r\n\r\nFile node_modules/dep/index.cds` looks like:\r\n\r\n```\r\nusing from 'base';     // lower-case 'b'!\r\nusing from 'model';\r\n```\r\n\r\n`node_modules/Base/index.cds` is the same file as\r\n`node_modules/base/index.cds` on case-insensitive file systems (Windows, Mac):\r\n\r\n```\r\ntype T: Integer;\r\n```\r\n\r\nWe have `node_modules/model/index.cds` and a copy of it in\r\n`node_modules/dep/node_modules/model/index.cds`:\r\n\r\n```\r\nentity E { i: Integer; }\r\n```\r\n\r\nThe technical explanation is that the CDS Compiler considers\r\ntwo file names pointing to the same file if their `fs.realpath` is equal.\r\nThat means that we properly _recognize symlinks_ (Linux, Mac),\r\nbut we do _not_ recognize two files to be equal if:\r\n\r\n* the same file is referred to with different name casing,\r\n  which does not work on case-sensitive file systems (Linux) anyway\r\n  (yes, we might issue a better message when `node v9.2` is widely adopted),\r\n* a file is _copied_ within the NPM package (or when _hardlinks_ are used).\r\n\r\nThe CDL code/package can be corrected as follows:\r\n\r\n* Use __consistent casing__ when referring to file and modules in `using from`\r\n  (if in doubt, please check the error output provided by the CDS compiler client tool).\r\n* __Clean up a dirty NPM installation__.  Then, the file\r\n  `node_modules/dep/node_modules/model/index.cds` should disappear\r\n  (or be a symlink to `node_modules/model/index.cds`).\r\n\r\n\r\n### Nested extensions\r\n\r\nIf you use nested extensions, you might get messages like:\r\n\r\n```\r\nnested-extensions.cds:3:20-26: Error: No `EXTEND artifact` within CONTEXT extensions\r\nnested-extensions.cds:4:20-28: Error: No `ANNOTATE artifact` within SERVICE extensions\r\nnested-extensions.cds:5:14-22: Error: Elements only exist in entities, types or typed constructs\r\nnested-extensions.cds:6:12-36: Error: Elements only exist in entities, types or typed constructs\r\n```\r\n\r\nArtifacts (entities, types, …) should not be extended within other extensions –\r\njust elements (and other members) are to be extended within an artifact extension.\r\nThe above messages are reported for the following CDL code:\r\n\r\n```\r\ncontext C { entity E { d: Integer; } }\r\nservice S { entity E { d: Integer; } }\r\nextend context C { extend C.E { e: Integer; } }\r\nextend service S { annotate S.E @Anno; }\r\nannotate C { E @Anno; }\r\nextend S { extend E { e: Integer; } }\r\n```\r\n\r\nThe reason for these messages is – if we would allow it:\r\n\r\n* If we follow the [normal name resolution rules](NameResolution.md),\r\n  people would have to refer to the entity the same way\r\n  as outside `extend context`/`extend service`.\r\n  Most people would probably expect being able\r\n  to write just `E` instead `C.E`/`S.E` in line 3 and 4,\r\n  but this not only require special rules, but leads to other surprises – see below.\r\n* Using `{ … }` inside a plain `annotate` or `extend` statement\r\n  is supposed to annotate/extend elements (or enums), not containing artifacts.\r\n\r\nThe CDL code can be corrected as follows:\r\n\r\n```\r\ncontext C { entity E { d: Integer; } }\r\nservice S { entity E { d: Integer; } }\r\nextend C.E { e: Integer; }\r\nannotate S.E @Anno;\r\nannotate C.E @Anno;\r\nextend S.E { e: Integer; }\r\n```\r\n\r\nNow consider that you could use the following to extend the entity `C.E`:\r\n\r\n```\r\ncontext C { entity E { key d: Integer; } }\r\nentity E { key x: Integer; }\r\nextend context C {\r\n    extend E { e: Integer; }          // i.e. extend C.E\r\n}\r\nextend context C {\r\n    entity F { a: association to E; } // target: E, not C.E (normal name resolution)\r\n}\r\n```\r\n\r\nWhat about combining the two `extend context`:\r\n\r\n```\r\ncontext C { entity E { key d: Integer; } }\r\nentity E { key x: Integer; }\r\nextend context C {\r\n    extend E { e: Integer; }          // i.e. extend C.E\r\n    entity F { a: association to E; } // target: E or C.E ?\r\n}\r\n```\r\n\r\nIn summary, allowing artifact extensions inside `extend context`/`extend service`\r\nwould provide little benefit, but would add complexity and confusion.\r\n\r\n\r\n### Redirection issues\r\n\r\nThe target `OrigTarget` of an existing association can only be redirected to another target `NewTarget`\r\nif the `NewTarget` is a direct or indirect projection of `OrigTarget`\r\n(complex views are questionable and lead to a Warning),\r\nor an entity definition which directly or indirectly includes `OrigTarget`.\r\n\r\n```\r\nentity Base {\r\n    key i: Integer;\r\n}\r\nentity Proj as projection on Base;\r\nentity NewTarget as projection on Intermediate;\r\nentity Intermediate as projection on Base;\r\n\r\nentity Assocs {\r\n    base: association to Base;\r\n    proj: association to Proj;\r\n}\r\nentity Redirect as projection on Assocs {\r\n    base: redirected to NewTarget, // works\r\n    proj: redirected to NewTarget  // ERROR: does not originate from Proj\r\n}\r\n```\r\n\r\nFor the above CDS code, you get the following error message:\r\n\r\n```\r\nredirect-to-unrelated.cds:16:25-34: Error: The redirected target does not originate from \"Proj\"\r\n    (in entity:\"Redirect\"/element:\"proj\")\r\n```\r\n"},{"name":"FioriAnnotations.md","content":"# Translation of Fiori annotations\r\n\r\n> Status Oct 2019: too vague, old links, to be moved to internalDoc if we want to keep it.\r\n\r\nFiori annotations are translated in a generic way. Essentially, write down in CDS precisely what you want to get in edmx.\r\n\r\nA more detailed description will follow soon, for the time being we hope the following example will give the idea:\r\n\r\nThese CDS annotations\r\n```\r\n@(\r\n  UI.Chart : {\r\n    ChartType: #Bullet,\r\n    Measures: [ Revenue ],\r\n    MeasureAttributes: [\r\n      {\r\n        Measure: Revenue,\r\n        Role: #Axis1,\r\n        DataPoint: '@UI.DataPoint#BulletChartDataPoint'\r\n      }\r\n    ]\r\n  },\r\n  UI.DataPoint#BulletChartDataPoint: {\r\n    Title: 'Product',\r\n    Value: Revenue,\r\n    TargetValue: TargetRevenue,\r\n    ForecastValue: ForecastRevenue,\r\n    MinimumValue: MinValue,\r\n    MaximumValue: MaxValue,\r\n    CriticalityCalculation: {\r\n      ImprovementDirection: #Target,\r\n      ToleranceRangeLowValue: ToleranceRangeLow,\r\n      ToleranceRangeHighValue: ToleranceRangeHigh,\r\n      DeviationRangeLowValue: DeviationRangeLow,\r\n      DeviationRangeHighValue: DeviationRangeHigh\r\n    }\r\n  }\r\n)\r\nSomething ...;\r\n```\r\nare translated into the following edmx:\r\n```xml\r\n<Annotations Target=\"Something\">\r\n  <Annotation Term=\"UI.Chart\">\r\n    <Record>\r\n      <PropertyValue EnumMember=\"UI.ChartType/Bullet\"\r\n        Property=\"ChartType\" />\r\n      <PropertyValue Property=\"Measures\">\r\n        <Collection>\r\n          <PropertyPath>Revenue</PropertyPath>\r\n        </Collection>\r\n      </PropertyValue>\r\n      <PropertyValue Property=\"MeasureAttributes\">\r\n        <Collection>\r\n          <Record Type=\"UI.ChartMeasureAttributeType\">\r\n            <PropertyValue Property=\"Measure\" PropertyPath=\"Revenue\" />\r\n            <PropertyValue Property=\"Role\" EnumMember=\"UI.ChartMeasureRoleType/Axis1\" />\r\n            <PropertyValue Property=\"DataPoint\" AnnotationPath=\"@UI.DataPoint#BulletChartDataPoint\" />\r\n          </Record>\r\n        </Collection>\r\n      </PropertyValue>\r\n    </Record>\r\n  </Annotation>\r\n  <Annotation Term=\"UI.DataPoint\" Qualifier=\"BulletChartDataPoint\">\r\n    <Record>\r\n      <PropertyValue String=\"Product\" Property=\"Title\" />\r\n      <PropertyValue Path=\"Revenue\" Property=\"Value\" />\r\n      <PropertyValue Path=\"TargetRevenue\" Property=\"TargetValue\" />\r\n      <PropertyValue Path=\"ForecastRevenue\" Property=\"ForecastValue\" />\r\n      <PropertyValue Path=\"MinValue\" Property=\"MinimumValue\" />\r\n      <PropertyValue Path=\"MaxValue\" Property=\"MaximumValue\" />\r\n      <PropertyValue Property=\"CriticalityCalculation\">\r\n        <Record>\r\n          <PropertyValue Property=\"ImprovementDirection\" EnumMember=\"UI.ImprovementDirectionType/Target\" />\r\n          <PropertyValue Path=\"ToleranceRangeLow\" Property=\"ToleranceRangeLowValue\" />\r\n          <PropertyValue Path=\"ToleranceRangeHigh\" Property=\"ToleranceRangeHighValue\" />\r\n          <PropertyValue Path=\"DeviationRangeLow\" Property=\"DeviationRangeLowValue\" />\r\n          <PropertyValue Path=\"DeviationRangeHigh\" Property=\"DeviationRangeHighValue\" />\r\n        </Record>\r\n      </PropertyValue>\r\n    </Record>\r\n  </Annotation>\r\n</Annotations>\r\n```\r\n\r\n\r\nAll suppoted Fiori annotations are defined in the following vocabularies:\r\n* [Core](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Core.V1.xml)\r\n* [Measures](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Measures.V1.xml)\r\n* [Capabilities](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/vocabularies/Org.OData.Capabilities.V1.xml)\r\n* [Aggregation](http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs02/vocabularies/Org.OData.Aggregation.V1.xml)\r\n* [Common](https://wiki.scn.sap.com/wiki/download/attachments/448470974/Common.xml?api=v2)\r\n* [Communication](https://wiki.scn.sap.com/wiki/download/attachments/448470971/Communication.xml?api=v2)\r\n* [UI](https://wiki.scn.sap.com/wiki/download/attachments/448470968/UI.xml?api=v2)\r\n"},{"name":"NameResolution.md","content":"# Name Resolution in CDS\r\n\r\n> Status Sep 2020: TODOs must be filled, say more about name resolution in CSN.\r\n\r\nName resolution refers to the resolution of names (identifiers) within expressions of the source to the intended artifact or member in the model.\r\n\r\nAs CDL is related to SQL, its name resolution strategy must be natural to SQL programmers.\r\nThis forbids us to use the simple _lexical scoping_ name resolution for all language constructs.\r\n\r\nThis document presents the exact **semantics** of the resolution in CDS\r\nespecially how it is influenced by the language constructs where the reference is embedded in.\r\n\r\nIn explanations, we have CDL as the main focus, but name resolution in CSN is covered as well.\r\n\r\nThe overall goal is that the name resolution is low on surprises throughout the complete life-cycle of any CDS model,\r\nand robust concerning any model extensions.\r\n\r\nRemark: **this is the intended behavior, the code must still be adapted at some places.**\r\n\r\nThe impatient reader might want to jump to the [summary],\r\nothers might want to [skip the introduction](#design-principles).\r\n\r\n## Table of Contents\r\n\r\n<!-- toc: start -->\r\n\r\n1. [Table of Contents](#table-of-contents)\r\n2. [Introduction](#introduction)\r\n   1. [Background: SQL](#background-sql)\r\n   2. [Background: modern programming languages](#background-modern-programming-languages)\r\n3. [Design Principles](#design-principles)\r\n4. [Name Resolution - the Basics](#name-resolution---the-basics)\r\n   1. [Common rules](#common-rules)\r\n   2. [Resolving paths](#resolving-paths)\r\n   3. [Navigation environment](#navigation-environment)\r\n5. [References to main artifacts](#references-to-main-artifacts)\r\n6. [Values and references to elements](#values-and-references-to-elements)\r\n   1. [References in queries](#references-in-queries)\r\n   2. [References to sibling elements](#references-to-sibling-elements)\r\n   3. [Other element references](#other-element-references)\r\n7. [Paths as annotation values](#paths-as-annotation-values)\r\n8. [Differences to HANA-CDS](#differences-to-hana-cds)\r\n9. [Summary](#summary)\r\n\r\n<!-- toc: end -->\r\n\r\n\r\n## Introduction\r\n\r\nIf you look at typical examples given in introductionary documents about CDS,\r\nyou might wonder why there is a lengthy document about the name resolution.\r\nSo, let us start with such an example:\r\n\r\n```\r\nnamespace sap.core;\r\n\r\ncontext types {\r\n    type Price {\r\n        amount:   Amount;\r\n        currency: CurrencySymbol;\r\n    }\r\n    type Amount: Decimal(5,3);\r\n};\r\ntype CurrencySymbol: String(3);\r\n\r\nview Products as select from ProductsInternal {\r\n    productId,\r\n    salesPrice\r\n};\r\nentity ProductsInternal {\r\n    productId: Integer;\r\n    retailPrice: types.Price;\r\n    salesPrice = retailPrice;  // calculated fields are not supported yet\r\n};\r\n```\r\n\r\nLet us first go a step backwards:\r\nin CDS, all entities and other **main artifacts** (short: artifacts) have a _unique name_,\r\nwhich we call **absolute name**.\r\nWhy don't we just use that name, like we do in SQL and in CSN?\r\n\r\nAs we want to support a hierarchical naming convention,\r\nit should be easy to _define_ and to _refer to_ artifacts sharing a common name prefix.\r\nIn the example above, we have 3 types with the absolute names\r\n`sap.core.types.Price`, `sap.core.types.Amount` and `sap.core.CurrencySymbol`.\r\n\r\nFor **convenience**, we do not use these lengthy names in CDL,\r\nbut shorter names without the common prefix.\r\nThese are then \"translated\" by the name resolution into the absolute names.\r\nThis also allows us to easily change the common name prefix in the development phase.\r\n\r\nIn which area of the code do we assume which common name prefix?\r\nIn the example above, we refer to these 3 types by `types.Price`, just `Amount`, and `CurrencySymbol`.\r\nThe first observation is:\r\n**name resolution** (and the new name introduced by an artifact definition) **depends on the block structure**.\r\n\r\nThat being said, name resolution does **not depend on the order of definitions**.\r\nIn the example above, the element `amount` has a type `Amount`\r\nwhich is defined _after_ the element definition.\r\nSimilar for the view `Products` whose source entity `ProductsInternal` is defined after the view.\r\n\r\nIn the view, we also refer to **elements** of (another) artifact.\r\nThere is no special language construct for such references –\r\nit is a simple identifier (or path)\r\nlike the references to the types and the source entity of the view.\r\nThe second observation is:\r\n**name resolution** in CDL **depends on the argument position**,\r\ni.e. the place of the reference relative to the statement\r\n(e.g. in the `from` or `where` clause of a `select` statement).\r\nThis is not only valid in SQL and related languages like CDL,\r\nbut also in languages like C (for labels after `goto`).\r\n\r\n---\r\n\r\nLet us now look at the name resolution and why it is not as obvious as it might seem to be…\r\n\r\n> What happens if an inner block introduces the same name as an outer block?\r\n\r\nDo we have **name shadowing**\r\n(we cannot access the artifact defined in the outer block by its simple name)?\r\nConsider that we have defined a type `CurrencySymbol` inside the block of the context `types`…\r\nIs the same true for nested element definitions?\r\n\r\n> How do we refer to elements and subelements inside the definition of a subelement?\r\n\r\nDoes a simple name refer to a subelement of the same parent element,\r\nor an element of the corresponding main artifact?\r\n\r\n> How do we access artifacts which are defined in another file?\r\n\r\nThat is an easy one: the `using` declarations introduce a file-local alias name to an absolute name\r\nfor accessing artifacts in other files or in the current file (useful to refer to shadowed definitions).\r\n\r\n> Can something bad happen if extensions come into play?\r\n\r\nYes, extensions must be used with care.  Extensions might break existing models –\r\nif two extensions decide to add an element with the same name to the same entity,\r\nthere is nothing we can do about it.\r\n\r\nBut we make sure that something real bad cannot happen:\r\nan **extension cannot silently change the semantics of a model** –\r\nthe name resolution is defined in such a way that a valid and potentially unrelated reference\r\ndoes not silently (without errors or warnings) point to another artifact\r\nwhen the extension is applied to the model.\r\n\r\n\r\n### Background: SQL\r\n\r\nIn this section, we look at the heritage from SQL.\r\nGiven is the following SQL query:\r\n\r\n```SQL\r\nSELECT a,\r\n       a.b as e\r\n  FROM a as x,\r\n       tab as a\r\n```\r\n\r\nThe identifier `a` refers to different objects:\r\n\r\n* at the \"select item\" position in line 1, `a` refers to a _column_ in one of the tables,\r\n* at the \"select item\" position in line 2, `a` refers to the _table alias_ introduced in line 4,\r\n* at the \"table reference\" position in line 3, `a` refers to the _table_ `a`, and\r\n* in line 4, we _define_ a table alias with name `a` (`a` is no reference here).\r\n\r\n---\r\n\r\nOur task is to\r\n\r\n* generalize the semantics to make it applicable for CDS features not found in SQL:\r\n  sub structures, associations, extensions, …\r\n* find argument positions which are \"similar\" to argument positions with given name resolution semantics –\r\n  we then apply the same semantics to the \"new\" argument positions\r\n\r\nAs an example for the latter,\r\nlet us consider an SQL view which is a projection on a given table and additionally exposes one of its column under an extra name:\r\n\r\n```\r\nentity B {\r\n    a: Integer;\r\n}\r\nview E as select from B {\r\n    *,\r\n    a as e\r\n};\r\n```\r\n\r\nIn CDS, we can define a table which uses the same layout as a given table and additionally exposes one of its elements under an extra name:\r\n\r\n```\r\nentity B {\r\n    a: Integer;\r\n}\r\nentity E : B {\r\n    e = a;       // calculated fields are not supported yet\r\n}\r\n```\r\n\r\nAs the situation is very similar,\r\nthe name resolution strategy for the referred column/element should be the same\r\n(the syntax is unfortunately not the same due to the SQL syntax of select items).\r\n\r\nIn SQL, we have silent semantic changes, but only with subqueries –\r\nsee the first example in Section [\"Design Principles\"](#design-principles).\r\nTo avoid this situation in CDL, we are a bit incompatible in this case.\r\n\r\n\r\n### Background: modern programming languages\r\n\r\nModern programming languages (try to) use just one name resolution strategy: lexical scoping.\r\n\r\nAssuming that the \"free-floating\" column `a` was defined in table `a`,\r\nthe `SELECT` query from the beginning of previous section would look like the following in JavaScript:\r\n\r\n```javascript\r\nselect( [a, tab],\r\n        (x, a) => ({ a: x.a, e: a.b }) )\r\n```\r\n\r\nApart from the syntax and expression structure, the difference to SQL is that\r\nthere are **no \"free-floating\" references**:\r\nthe column `a` in (the line of) table `a` must be prefixed by the corresponding table alias `x`\r\n(parameter name of the anonymous function in JavaScript).\r\n\r\nThis is not only a good thing for itself\r\n(the original SQL query would be considered incorrect if a column `a` is added later to table `tab`)\r\nit also enables lexical scoping, as the table alias names are defined in the query expression itself.\r\n\r\nAny \"convenience\" declaration which \"extends\" lexical scoping\r\nis usually soon to be declared as obsolete,\r\nbecause its **little convenience benefit is not worth the additional issues**.\r\nAs an example, see the fate of the `with` statement in JavaScript.\r\n\r\n---\r\n\r\nIf sold with the label \"OO\", the convenience is often considered to be more important.\r\nGiven is the following Java program:\r\n\r\n```Java\r\nclass T {\r\n    int C = 0;\r\n}\r\nclass B {\r\n//  class T { int C = 1; }\r\n}\r\nclass J extends B {\r\n    int go() {\r\n        return (new T()).C;\r\n    }\r\n    public static void main(String[] args) {\r\n        System.out.println ((new J()).go());\r\n    }\r\n}\r\n```\r\n\r\nUncomment the definition of `B.T` → the output changes from `0` to `1` (silent semantic change).\r\nNow consider that class `B` is usually defined somewhere else →\r\nsame kind of convenience, same kind of issues.\r\n\r\n\r\n## Design Principles\r\n\r\nThe name resolution rules in the following sections are based on the following design principles:\r\n\r\n 1. Applications/customers can safely add new artifacts without silently changing the semantics of other applications.\r\n 2. A valid SQL SELECT should be a valid CDL SELECT with the same semantics\r\n    (modulo changes in the concrete syntax),\r\n    as CDL uses CQL – an \"official\" extension of SQL SELECT.\r\n 3. Applications/customers can safely add new artifacts without inducing other applications to compile with an error.\r\n 4. The name resolution does not depend on package definitions and its dependencies.\r\n 5. The chosen name resolution strategy for an argument position should not come at a surprise.\r\n 6. Convenience: there must be a more convenient solution than always using absolute names.\r\n\r\nPlease note that these principles are ordered.\r\nThere are __many cases where one principle cannot be fulfilled__ in order to fulfill a higher prioritized design principles.\r\nThe first design principle is therefore always fulfilled.\r\nThis can be seen in the following examples.\r\n\r\n---\r\n\r\nFor (1), CDL compiles the following source with an error:\r\n\r\n```\r\nentity A { a: String(20); j: Integer; x: Integer; }\r\nentity B { b: String(20); j: Integer; }\r\nview V as select from A { a, x } where     // x is valid here\r\n    j = (select from B { j + x });         // invalid: use A.x instead of x (ok: j)\r\n\r\n```\r\n\r\nIt contradicts (2), because SQL would compile the subquery.\r\nBut there would be a silent semantic change when column `x` is added to table `B`.\r\n\r\n---\r\n\r\nFor (2), CDL needs to support unqualified element (column) names in the SELECT clause even if a JOIN is used -\r\nwe might issue a warning for this case, though.\r\n\r\n```\r\nentity A { a: String(20); j: Integer; x: Integer; }     // from Partner A\r\nentity B { b: String(20); j: Integer; }                 // from Partner B\r\nview V as select from A join B {a, b, x} ON A.j = B.j;  // valid customer view\r\n```\r\n\r\nIt contradicts (3), as the unchanged customer view compiles with an error\r\nwhen partner B adds an element `x` to their table `B`.\r\n\r\n---\r\n\r\nPrinciple (3) is also contradicted for specific features like (multiple) entity includes.\r\n\r\nPrinciple (4) is not part of the name resolution rules in HANA-CDS.\r\n\r\nAs we never allow to break Principle (1), we have the following guideline:\r\n\r\n> **It is fine if definitions in the own source shadow other definitions (in the own source or others),\r\n> because the programmer is aware (and in control) of all these definitions.\r\n> It is evil if definitions made in other sources shadow other definitions (in the own source or others).**\r\n\r\n\r\n## Name Resolution - the Basics\r\n\r\nWe start with some terminology:\r\n\r\n* An **environment** is a dictionary binding/mapping (local) names to language constructs (e.g. entities or elements).\r\n\r\n* A **navigation environment** of a construct is the dictionary for definitions within that construct or a type/entity referred by that construct.\r\n\r\n  For contexts (and services), these are the sub artifacts defined within that context.\r\n  For types, entities, elements, these are the elements (or enum symbols) defined within that object or the object's (direct or indirect) type;\r\n  for association types, these are the elements of the target entity.\r\n  (The actions and parameters of an object cannot be accessed this way.)\r\n\r\n```\r\ncontext C { type X: Integer; };  // context \"C\" supplies env{ X: type(\"C.X\") }\r\ntype S { E: Integer; }\r\nextend S with { F: Integer; };   // type \"S\" supplies env{ E: elem(\"S\",\"E\"), F: … }\r\ntype T: S;                       // type \"T\" supplies the same env as type \"S\"\r\n```\r\n\r\n\r\n### Common rules\r\n\r\nName resolution is **case sensitive**.\r\nIn general, a model can contain artifacts and members whose name differ in case only;\r\nthere might be a linter check which informs model writers if they make use of this \"feature\".\r\n\r\nWhile being case sensitive might be against the original intention of SQL,\r\nit actually _conforms_ to the SQL Specification after abstraction from the lexical syntax,\r\nsee e.g. [SQL-92, §5.2.10 and 5.2.12…14](http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt)\r\nfor the semantics of quoted and non-quoted identifiers.\r\nIn CDL, we just do *not* transform non-quoted identifiers to all-upper names.\r\n\r\nAlso, CSN-processors are cumbersome to write if they have to deal with (partial/feigned) case-insensitivity.\r\n\r\n---\r\n\r\nIn CDL, an identifier may be used before its definitions,\r\nthere is **no need of forward declarations**.\r\nThus, the sequence of definitions inside a block does not matter for the scope rules:\r\n\r\n```\r\nusing T as OuterT;    // introduced to have a name for the shadowed \"T\"\r\ntype T: String(20);\r\ncontext C {\r\n    type D: T;        // -> C.T -> cds.Integer\r\n    type T: Integer;\r\n    type O: OuterT;   // -> T -> String(20)\r\n}\r\n// type C.O: T;       // alternative: define \"C.O\" outside the block of \"C\"\r\n```\r\n\r\nThere are two reasons to do so:\r\n\r\n* When using associations, (mutually) recursive usage is quite common, and forward references are cumbersome.\r\n  (We can always access shadowed artifacts.)\r\n* Real-world models will very likely reside in multiple files/resources – there is no natural order in which the definitions are to be processed.\r\n\r\n\r\n### Resolving paths\r\n\r\nThe algorithm for resolution of paths (consisting of dot-connected names)\r\nis as follows:\r\n\r\n 1. First, we try to find the language construct _O_ for the first name in the path;\r\n    this language construct is called the **path base**.\r\n\r\n 2. We resolve the next name in the path by inspecting the navigation environment of _O_.\r\n    The found language artifact is our next _O_.\r\n\r\n 3. We repeat Step 2 until the complete path is resolved.\r\n\r\nEven the algorithm for finding the path base follows the same pattern:\r\n\r\n* We have a list of search environments, which we inspect in order.\r\n  The first hit is the path base.\r\n  It is an error if the name (the first name of the path) cannot be found in any environment of the list.\r\n\r\n* All but the last environment are constructed from definitions in the current source\r\n  following the lexical block structure of the source,\r\n  or a small, fixed number of predefined names (e.g. `$self`.)\r\n  We will call such an environment a **lexical search environment**.\r\n\r\n* Only the last environment contains bindings **defined externally**, at least potentially.\r\n  It can be the environment for predefined artifacts (like `cds.Integer`),\r\n  or the navigation environment of the \"current artifact/member of interest\" (like the elements of the projection source).\r\n\r\nSo the guideline at the end of the previous section essentially becomes\r\n**lexical scoping first, search in one externally provided environment last**.\r\n\r\nThe basic difference between the name resolution strategies is the relevance of the lexical and the last environments,\r\nand how they are build.\r\n\r\n\r\n### Navigation environment\r\n\r\nThe navigation environment might depend on the argument position.\r\n\r\nIf an object is typed with an array,\r\nthe environment supplied by that object is usually considered to be empty.\r\nFor `type of` references and the to-be-extended element referenced in an inner extend,\r\nit is the environment supplied by the array item type:\r\n\r\n```\r\n@A.e: 1     // warning: cannot find `e` for annotation assignments\r\nannotation A : array of { e: Integer; };\r\n\r\nentity E {\r\n    items: many { i: Integer; };\r\n}\r\ntype T: type of E:items.i;      // valid = Integer\r\nannotate E with {\r\n    items { i @lineElement; };  // valid annotation\r\n}\r\nview V as select from E {\r\n    items.i                     // not valid (yet)\r\n}\r\n```\r\n\r\nFor the to-be-extended element referenced in an inner extend,\r\nwe consider the environment supplied by an association to be empty:\r\n\r\n```\r\ntype A: association to E;\r\nentity E { i: Integer; }\r\nannotate A with {\r\n    @targetElem i;     // err(info): do not follow associations\r\n}\r\ntype S { e: Integer; }\r\ntype T : S;\r\nannotate T with {\r\n    @derivedElem e;    // ok: follow derived type (not yet without beta)\r\n}\r\n```\r\n\r\n\r\n## References to main artifacts\r\n\r\nWhen we have an argument position where we expect a main artifact,\r\n\r\n* the list of lexical search environments depends on the blocks containing the current statement, and\r\n* the last, non-lexical search environment is independent from the block structure or a current object of interest.\r\n\r\nA reference to a main artifact can be a reference to a:\r\n\r\n* **projection or view source** (table reference after `SELECT … FROM` in SQL),\r\n* **association target**,\r\n* **type** (but not the reference after `type of`, see below)\r\n* **annotation** for an annotation assignment,\r\n* to-be-extended main artifact of an **outer extend**\r\n* **structure include**,\r\n* **type parameter** (should be a constant, not yet).\r\n\r\n---\r\n\r\nThe construction of the list of lexical search environments **starts at the innermost block** containing the current statement,\r\nand then continues to the next outer block:\r\n\r\n* As opposed to HANA-CDS, we skip blocks containing just element definitions\r\n  (or generally definitions of members like actions).\r\n* For blocks of `context` and `service` definitions, we add the definition inside that block\r\n  (all definitions in the environment supplied by the context or service can contain more definitions).\r\n* For the top-level block of the current source,\r\n  we add the top-level definitions and the bindings for the `using` declarations.\r\n\r\nThe last, non-lexical search environment is the environment for built-in artifacts.\r\nCurrently, it contains `String` for `cds.String`, similarly `LargeString`,\r\n`Integer`, `Integer64`, `Binary`, `LargeBinary`, `Decimal`, `DecimalFloat`, `Double`,\r\n`Date`, `Time`, `Timestamp`, `DateTime`, and `Boolean` and `hana`, also the namespace `cds`.\r\n\r\nWhen searching for an annotation (after the initial `@`), the last search environment\r\nare the model definitions.\r\n\r\n---\r\n\r\nWe conclude this section with a little weird example –\r\nnobody would write models like that, but it demonstrates the exact semantics.\r\n\r\n```\r\nnamespace test;\r\nusing cds.Boolean as Integer;\r\ntype Time {\r\n    @Date                  // @Date: true, not @cds.Date: true\r\n    Date: Date;            // typeOf(test.Time,Date) = cds.Date, no error\r\n    C: C.Date;             // typeOf(test.Time,C) = test.C.Date, no error\r\n}\r\n@C.Anno                    // @test.C.Anno: true\r\ndefine context C {\r\n    type Date: Time;       // test.C.Date -> test.C.Time, not test.Time\r\n    type Time: Integer;    // test.C.Time -> alias Integer -> cds.Boolean\r\n    type CC: C.Integer;    // test.C.CC -> test.C.Integer\r\n}\r\n@Integer                   // @cds.Boolean: true (warning: is no annotation)\r\ntype C.Integer: Time;      // test.C.Integer -> test.Time, not test.C.Time\r\n```\r\n\r\nIn this example, we have the following two lexical search environments:\r\n\r\n* The search environment containing definitions directly inside the block after `define context C`:\r\n  `Date`, `Time` and `CC`, but not `Integer` (but which is in the environment supplied by `test.C`).\r\n  Used as first search environment when resolving main artifact references in the block after `define context C`,\r\n  the next search environment is the environment containing top-level definitions.\r\n\r\n* The search environment containing the top-level definitions and using declarations of the source:\r\n  `Integer`, `Time` and `C`.\r\n  Used as first search environment when resolving main artifact references outside the block after `define context C`,\r\n  the next search environment is the non-lexical environment containing built-in artifacts.\r\n\r\nThere is no lexical search environment for the element definitions supplied by `test.Time`.\r\n\r\n---\r\n\r\nWe allow paths for names in top-level definitions.\r\nAll but the last name in the paths are (on-the-fly) contexts,\r\nwhich do _not introduce blocks_ for the lexical scoping:\r\n\r\n```\r\nentity N.mid.E {\r\n   key i: Integer;\r\n   to1: association to E;                // invalid\r\n   to2: association to mid.E;            // invalid\r\n   to3: association to N.mid.E;          // valid\r\n}\r\ncontext C {\r\n   context mid {\r\n       entity E {\r\n           key i: Integer;\r\n           to1: association to E;        // valid\r\n           to2: association to mid.E;    // valid\r\n           to3: association to C.mid.E;  // valid\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Values and references to elements\r\n\r\nWhen we have an argument position where we expect a value or a reference to an element,\r\n\r\n* We usually have just one lexical search environment\r\n  which is – dependening on the call context – only inspected if the path consists of at least two identifiers.\r\n  This basically introduces an **escape mechanism**.\r\n* The last, non-lexical environments is usually the environment either\r\n  supplied from an artifact referred by the current statement or\r\n  supplied by the object containing the current definition.\r\n\r\nIt is often allowed to switch to the [\"main artifact name resolution\"](#references-to-main-artifacts)\r\nby prefixing the path with a `:`, used usually to refer to constants.\r\n\r\nThe semantics is best explained separately for the _different groups_ of argument positions.\r\n\r\n\r\n### References in queries\r\n\r\nWe start with the most complicated group, because it is known from SQL:\r\nreferences in `SELECT` item positions –\r\nsimilar: `WHERE`, `ON`, **TODO**: `GROUP BY`, `ORDER BY` (or special?), …\r\n\r\n**TODO**: do the same for `as projection on`?\r\n\r\n**TODO**: names in `mixins`\r\n\r\nThe list of search environments is created as follows:\r\n\r\n* The (first) lexical search environment is build from the explicit and implicit alias names\r\n  for the sources (table references after `from`);\r\n  we also bind `$projection` to the resulting view/projection elements of the current SELECT\r\n  if not already used as a table alias.\r\n* If the current SELECT is a sub-SELECT,\r\n  we have additional lexical search environments containing alias names for the corresponding outer SELECTs;\r\n  their `$projection` bindings are shadowed.\r\n* For compatibility with ABAP CDS, we have another environment with one entry:\r\n  we bind `$parameters` to the parameters of the current view –\r\n  the SQL way is to use `:param1` instead of `$parameters.param1`, see below.\r\n* The last, non-lexical environment is the environment containing the elements from all source entities of the current SELECT;\r\n  if an element with the same name is contained in more than one source,\r\n  this search environment binds the name to an \"ambiguity\" entry (i.e. a reference to it leads to an error)\r\n* There are no additional non-lexical search environments for the elements of outer SELECTs.\r\n\r\nThe above mentioned `:`-escape mechanism leads to the following name resolution:\r\n\r\n* The first lexical search environment is the the environment containing all parameter names of the current view.\r\n* The following search environments are the usual ones from the \"main artifact name resolution\";\r\n  constant values can be accessed this way (_TODO_: probably not now).\r\n\r\n\r\n### References to sibling elements\r\n\r\nThe next group is for references in member definitions to other elements of the same main artifact.\r\nSuch a reference can be a reference to a:\r\n\r\n* **calculated field**\r\n* references in the **`default` value** (HANA SQL does not allow this)\r\n* references in the `ON` condition of an **unmanaged association***\r\n* reference after **`type of`** – can also be a references to an element of another main artifact\r\n\r\nThe list of search environments is created as follows:\r\n\r\n* There is one lexical search environment, it has one entry:\r\n  we bind `$self` to the main artifact, or to be exact:\r\n  to the current instance of that artifact, e.g. the current line of an entity.\r\n  This environment is also inspected if the path consists of just `$self` –\r\n  useful for `on` conditions of unmanaged associations.\r\n* The second and last, the non-lexical search environment is the environment supplied by\r\n  the object (main artifact or element) where the current member is defined in.\r\n\r\nThe above mentioned `:`-escape mechanism leads to the \"main artifact name resolution\";\r\nit can be used to access constants, or –for references after `type of`– elements of other artifacts.\r\n\r\nThe reason for the `$self` references is visible in an example with subelements\r\n(calculated fields are not supported yet):\r\n\r\n```\r\ntype T {\r\n    a: Integer;\r\n    b = a;            // b = a\r\n    c = $self.a;      // c = a\r\n}\r\nentity E {\r\n    a: Integer;\r\n    x: T;             // x.b = x.a, x.c = x.a\r\n    y { a: Integer;\r\n        b = a;        // y.b = y.a\r\n        c = $self.a;  // y.c = a\r\n    };\r\n}\r\nentity S {\r\n    $self: Integer;   // we might complain about such an element name\r\n    x = $self.$self;  // x = $self (the element)\r\n}\r\n```\r\n\r\n\r\n### Other element references\r\n\r\nA **foreign key** in the definition of a managed association,\r\nis just searched in the environment supplied by the target entity.\r\nNo lexical search environment is inspected first.\r\n\r\nIn an **inner extend**,\r\nwe just search in the navigation environment of the current language construct.\r\nNo lexical search environment is inspected first.\r\n<br/>\r\nThese are actually not necessary references to elements,\r\nbut also sub artifacts (e.g. `extend` in `extend context`),\r\nactions (in the `actions` clause of `extend entity`), or\r\nparameters (in the `parameters` clause of `extend action`).\r\n\r\n_TODO_: more use cases, like references inside filter conditions of paths.\r\n\r\n\r\n## Paths as annotation values\r\n\r\nWe can also use paths as annotation assignment values.\r\n\r\nIf there is _no annotation definition_ (there might be a warning for this)\r\nthen the path cannot be resolved at all.\r\nThe same is true if the annotation type\r\ndoes not allow path values (then there might be a warning for this)\r\nor just a `cds.UnspecifiedRef`.\r\n\r\nIf there is an annotation definition which allows to use paths\r\nby specifying the type _`cds.ArtifactRef`_ (or a variant of it),\r\nthen the path resolution works as described in\r\n[Section \"References to Main Artifacts\"](#references-to-main-artifacts).\r\n\r\nIf there is an annotation definition which allows to use paths\r\nby specifying the type _`cds.ElementRef`_\r\nthen the path resolution works as described in\r\n[Section \"References sibling elements\"](#references-to-sibling-elements).\r\nIf that annotation is assigned to a main artifact\r\nthen _same main artifact_ means the main artifact itself.\r\n\r\n\r\n\r\n## Differences to HANA-CDS\r\n\r\nThe most visible differences in the name resolution semantics of CDL compared to HANA CDS are:\r\n\r\n* Using constant values requires to prefix the path (referring to the constant) with a `:`.\r\n* There is a new semantic for paths (without initial `:`) used in annotation assignments.\r\n* In the definitions of sub elements, accessing elements supplied by the corresponding main artifact\r\n  requires to prefix the path with `$self.`.\r\n  Accessing sibling elements works the same as in HANA CDS.\r\n* It is no problem to define elements which have the same (local) name as the referenced type.\r\n* In views with more than one source entity,\r\n  selecting an element `e` from one source without the use of a table alias (which is not recommended anyway!)\r\n  suddenly does not compile anymore if another source entity is extended by a new element `e`.\r\n\r\nIn HANA-CDS, the name resolution works quite uniformly for all argument positions,\r\nwith most clauses of `SELECT` being the main exception.\r\nIt is also compatible to the \"pre-extension\" name resolution semantics of HANA-CDS.\r\nThis is nice!  Why do we specify a different name resolution semantics for CDL?\r\n\r\nThe reason is:\r\nwe do not want to have the \"extended\" lexical scoping semantics of HANA CDS concerning elements,\r\nwhich heavily relies on the package hierarchy.\r\nTo avoid silent semantic changes with extensions,\r\nthe HANA-CDS compiler enforces the following properties:\r\n\r\n* Every source belongs to a package;\r\n  packages can depend on other packages, no cycles are allowed.\r\n* No language construct can be extended in the same package where it is defined in,\r\n  no language construct can be extended twice in the same package\r\n* Artifacts can only be extended by top-level extend statements,\r\n  elements can only be extended by inner extends (the second is true for CDx/Language, too).\r\n\r\nThese are properties which do not hold for consumers of the CAP CDS Compiler.\r\n\r\nAdditionally, while direct changes in base packages can always lead to semantic changes,\r\nthe following example shows that this unwanted effect is more likely in HANA-CDS:\r\n\r\n```\r\n// BaseApp.cds ---\r\nentity E {\r\n  a: String(20);\r\n  b {\r\n    // a: Integer;   // CHANGE: introduce sub element\r\n    x: Integer;\r\n  };\r\n}\r\n// MyExtension.cds ---\r\nextend E with {\r\n  extend b with {\r\n    z = a;           // in CDL: $self.a, calculated fields are not supported yet\r\n  }\r\n}\r\n```\r\n\r\nIn HANA-CDS, both files compile before and after the change in `BaseApp.cds`:\r\nthe element `b.z` of `E` refers to element `a` of `E`, but after the change to `b.a` of `E`,\r\nbecause that element is visible in the base package and all its extensions\r\n(we would not see the problem if `b.a` would have been introduced by an extension in another package).\r\n\r\nIn CDx/Language, the files only compile after the change in `BaseApp.cds`:\r\n(with the same semantics as in HANA-CDS).  To make it work before the change,\r\nelement `b.z` of `E` can refer to element `a` of `E` by writing this references as `$self.a` –\r\nwith this path, `b.z` still refers to `a` of `E` after the change in `BaseApp.cds`.\r\n\r\n\r\n## Summary\r\n\r\n[summary]: #summary\r\n\r\nTo avoid silent semantic changes with extensions or new CDL versions,\r\nwe follow the following principle:\r\n\r\n> **After we have tried to find a local name in an environment containing\r\n> artifacts or elements which are potentially defined somewhere else (e.g. via an extension),\r\n> we do not inspect any other environment.**\r\n\r\nIn CDx/Language, we basically have two search strategies.\r\nBut let us start with Strategy 0:\r\n\r\n**Resolving a name in the tail of a path**.\r\n\r\nFor a path `a.b`, we only inspect one environment when resolving `b`: the environment supplied by `a`.\r\nFor example, if `a` is a structured element, we try to find `b` in all sub elements of `a` –\r\nit does not matter\r\nwhether the sub element `b` has been directly defined with the definition of element `a`, or\r\nwhether is has been defined externally:\r\nvia an extension or as an element of the referenced type.\r\n\r\n**Resolving the first name of a path when looking for artifacts**.\r\n\r\nWe apply _lexical scoping_  when we refer to types, entities and similar artifacts.\r\nWhen looking for an artifact `A`,\r\nwe search in the blocks of surrounding `context`, `service` and top-level definitions,\r\nstarting at the _innermost block_ and ending at the _top-level block_ of the source.\r\nTo make it clear: we do not search in blocks of type, entity or other definitions,\r\njust blocks of contexts (and similar constructs).\r\n\r\nWe only consider definitions within these blocks, _not_ all sub artifacts of the contexts,\r\nwhich might have been introduced by context extensions, or\r\nby using a path in the definition, e.g. `type MyContext.A: …`.\r\n\r\nIf the search is not successful so far,\r\nwe finally inspect an environment containing artifacts\r\nwhich are normally not defined in our own source:\r\n\r\n* For the `@A` of an _annotation assignment_,\r\n  we look for `A` in the `definitions` property of the model.\r\n* For all other references,\r\n  we look for `A` in the built-in environment,\r\n  where we define things like `cds.Integer`.\r\n\r\nThis search is also used for path references in annotation assignments\r\nwhen the corresponding definition allows the type `cds.ArtifactRef` (or variants, future).\r\n\r\n**Resolving the first name of a path when looking for values or elements**.\r\n\r\nWe search for elements supplied by the current \"language construct of interest\",\r\nwhich depends on the argument position.\r\nThe most relevant ones are:\r\n\r\n* The element or artifact where the current (sub) artifact is defined in,\r\n  i.e. we access sibling elements.\r\n* The source of the current projection or view.\r\n\r\nDepending on the argument position,\r\nthere is an _escape mechanism_ – which is tried first – to access also other elements.\r\nThe most relevant ones are:\r\n\r\n* If the paths starts with the identifier `$self`,\r\n  we look for the next name of the path in the environment supplied by the\r\n  corresponding main artifact of the current element.\r\n  This is useful for element references inside sub elements to access siblings of ancestors.\r\n* If a path in most clauses of a view starts with `a`,\r\n  and `a` is an explicit or implicit table alias (which we always see in our source),\r\n  we look for the next identifier of the path in the environment supplied by the corresponding entity.\r\n* If the path is prefixed by a `:`,\r\n  we actually switch to the other search strategy: looking for artifacts like types.\r\n  This is useful to access constant values (or for `type of`).\r\n\r\nThis search is also used for path references in annotation assignments\r\nwhen the corresponding definition allows the type `cds.ElementRef` (future).\r\n"},{"name":"ODataTransformation.md","content":"# ODATA Transformation\r\n\r\n> Status Oct 2019: outdated, uses old-style CSN, to be reworked completely -> move to internalDoc/.\r\n> For users, OData is a backend, they do not care too much that it works via a CSN transformation.\r\n\r\nPrior to the generation of EDMX (Entity Data Model XML) files from a CDS model,\r\nthe following transformations are applied to the model. Most (but not all) of\r\nthem become visible both in Augmented CSN and in Plain CSN:\r\n\r\n## Generated foreign key fields for managed associations\r\n\r\nManaged associations do not have ON-conditions. Instead, they implicitly\r\ncompare fields (usually the key fields) of the association's target entity with\r\nforeign key fields automatically generated into the entity containing the\r\nassociation.\r\n\r\n### Creating the generated fields\r\n\r\nThe ODATA transformation adds the generated foreign key fields to the model.\r\nThe names of the generated foreign key fields are a concatenation of the\r\nassociation element name, an underscore, and the key name or its alias.\r\n\r\nEach generated foreign key field gets the name of the corresponding association\r\nas an annotation `@odata.foreignKey4`.\r\n\r\n_FIXME_: Do we want to keep that?\r\n\r\nFor example, for the three association elements `a1`, `a2` and `a3` in the\r\nfollowing snippet:\r\n\r\n```\r\nservice S {\r\n  entity FromEntity {\r\n    a1 : association to ToEntity;          // Use target's keys\r\n    a2 : association to ToEntity {x};      // Explicitly specified key\r\n    a3 : association to ToEntity {x as z}; // Key with alias\r\n  }\r\n\r\n  entity ToEntity {\r\n    key x : Integer;\r\n    key y : Integer;\r\n  }\r\n}\r\n```\r\n\r\nthe ODATA transformation would generate foreign key fields in the resulting CSN\r\nas follows (shown here in CDS source form):\r\n\r\n```\r\nentity FromEntity {\r\n  a1 : association to ToEntity;\r\n  a2 : association to ToEntity {x};\r\n  @odata.foreignKey4: 'a1'\r\n  a1_x : Integer;  // Generated foreign key\r\n  @odata.foreignKey4: 'a1'\r\n  a1_y : Integer;  // Generated foreign key\r\n  @odata.foreignKey4: 'a2'\r\n  a2_x : Integer;  // Generated foreign key\r\n  @odata.foreignKey4: 'a3'\r\n  a3_z : Integer;  // Generated foreign key\r\n}\r\n```\r\n\r\nIt is an error if the generated fields conflict with existing fields.\r\n\r\n### Annotation propagation\r\n\r\nThe ODATA transformation propagates all annotations from the association to all\r\nits generated foreign key fields.\r\n\r\n_FIXME_: Do we want to keep that?\r\n\r\n### Connecting the associations with the generated fields\r\n\r\nThe CSN for the managed association elements contains a `foreignKeys` property,\r\nwhich is a dictionary of foreign key names (taken from the target key names, or\r\nfrom explicitly specified keys resp. their aliases) to the foreign key\r\nproperties.\r\n\r\nThe ODATA transformation adds a `generatedFieldName` property to each foreign\r\nkey, containing the name of the generated foreign key field. Together with the\r\n`@odata.foreignKey4` annotation described above, this provides a bi-directional\r\nlink between the association and its generated field.\r\n\r\nFor the example shown above, the CSN for the three association elements `a1`,\r\n`a2` and `a3` would look as follows:\r\n\r\n```\r\n  \"a1\": {\r\n    \"indexNo\": 1,\r\n    \"target\": \"S.ToEntity\",\r\n    \"type\": \"cds.Association\",\r\n    \"foreignKeys\": {\r\n      \"x\": {\r\n        \"indexNo\": 1,\r\n        \"path\": \"x\",\r\n        \"generatedFieldName\": \"a1_x\"\r\n      },\r\n      \"y\": {\r\n        \"indexNo\": 2,\r\n        \"path\": \"y\",\r\n        \"generatedFieldName\": \"a1_y\"\r\n      }\r\n    }\r\n  },\r\n  \"a2\": {\r\n    \"indexNo\": 2,\r\n    \"target\": \"S.ToEntity\",\r\n    \"type\": \"cds.Association\",\r\n    \"foreignKeys\": {\r\n      \"x\": {\r\n        \"path\": \"x\",\r\n        \"indexNo\": 1,\r\n        \"generatedFieldName\": \"a2_x\"\r\n      }\r\n    }\r\n  },\r\n  \"a3\": {\r\n    \"indexNo\": 3,\r\n    \"target\": \"S.ToEntity\",\r\n    \"type\": \"cds.Association\",\r\n    \"foreignKeys\": {\r\n      \"z\": {\r\n        \"path\": \"x\",\r\n        \"indexNo\": 1,\r\n        \"generatedFieldName\": \"a3_z\"\r\n      }\r\n    }\r\n  },\r\n```\r\n\r\n## (Augmented CSN only): Adding `_service` to exposed artifacts\r\n\r\nFor each artifact that is exposed by a service (including the service itself),\r\nthe ODATA transformation adds a non-enumerable property `_service` to the\r\nartifact in the Augmented CSN model, containing a link to the corresponding\r\nservice artifact.\r\n\r\nThis is convenient for EDMX processors that want to process only exposed\r\nartifacts or only artifacts belonging to a specific service.\r\n\r\n## Implicit redirection for non-exposed association targets\r\n\r\nFor each exposed artifact that contains associations, it is checked that the\r\nassociation target is also exposed by the same service. If this is not the\r\ncase, the ODATA transformation tries to find an \"exposed representative\" of\r\nthe target, i.e. an exposed projection or view on the target, or an exposed entity\r\nthat includes the target. If such a representative is found and unique, the\r\nassociation is implicitly redirected to the exposed representative.\r\n\r\nNote that only projections and projection-like views (i.e. those that have a\r\nsingle `from` source without `union`, `join` or nested queries) are considered\r\nas implicit redirection targets.\r\n\r\nExample:\r\n\r\n```\r\n// All these entities are used as association targets below\r\n// Simple target\r\nentity E1 {\r\n  key id : Integer;\r\n}\r\n// Base target included by E2a\r\nentity E2 {\r\n  key id : Integer;\r\n}\r\nentity E2a : E2 {\r\n  s : String(10);\r\n}\r\n// Base target included by S.E3a\r\nentity E3 {\r\n  key id : Integer;\r\n}\r\n\r\n// Exposure in service\r\nservice S {\r\n  entity P1 as projection on E1;    // Exposes simple target E1\r\n  entity P2a as projection on E2a;  // Exposes E2a but also its included E2\r\n  entity E3a : E3 { };              // Exposes included E3\r\n\r\n  entity Redirected {\r\n    toE1 : association to E1;   // Implicitly redirected to P1 (projection exposes E1)\r\n    toE2 : association to E2;   // Implicitly redirected to P2a (projection exposes something that includes E2)\r\n    toE3 : association to E3;   // Implicitly redirected to E3a (entity includes E3)\r\n  }\r\n}\r\n```\r\n\r\n## Exposure checking\r\n\r\nCurrently, it is assumed that services must be self-contained, i.e. that all\r\nassociations within a service must point to targets also exposed by this\r\nservice. This is checked by the ODATA transformation.\r\n\r\n_FIXME: The same restriction will probably apply when structured types are\r\nallowed as element types within exposed entities._\r\n\r\n## Unraveling derived scalar types\r\n\r\nThe ODATA transformation unravels derived scalar types, i.e. primitive types\r\nfor which the user has provided a custom name (possibly multiple times in a\r\nchain) are replaced by the original primitive type. Annotations are propagated\r\nupwards in the chain from the primitive type to the most derived type.\r\n\r\nFor example, the following CDS source\r\n\r\n```\r\n@IsName: true\r\ntype Name : String(20);\r\n\r\n@IsCustomer: true\r\ntype CustomerName : Name;\r\n\r\nservice S {\r\n  entity E {\r\n    name : CustomerName;\r\n  }\r\n}\r\n```\r\n\r\nessentially behaves as if the user had written\r\n\r\n```\r\nservice S {\r\n  entity E {\r\n    @IsCustomer: true\r\n    @IsName: true\r\n    name : String(20);\r\n  }\r\n}\r\n```\r\n\r\n## (Tentative): Checking ON-conditions\r\n\r\nCurrently, the ODATA transformation checks for various restrictions regarding\r\nON-conditions of unmanaged associations:\r\n\r\n- only `=` and `AND` operators may be used\r\n- operands may only be paths or values (not expressions)\r\n- exactly one of the operands must traverse the association\r\n\r\nThe intention behind this restriction is to produce a meaningful value for the\r\n`ReferentialConstraint` of the resulting `NavigationProperty`.\r\n\r\n_FIXME_: Do we want to keep that?\r\n\r\n## (Tentative): Renaming annotations\r\n\r\nCurrently, the ODATA transformation renames various \"shorthand\" annotations to\r\ntheir more elaborate \"long form\".\r\n\r\n| Original name              | New name                                      |\r\n| -------------------------- | --------------------------------------------- |\r\n| `@label`                   | `@Common.Label`                               |\r\n| `@label`                   | `@Common.Label`                               |\r\n| `@title`                   | `@Common.Label`                               |\r\n| `@ValueList.entity`        | `@Common.ValueList.entity`                    |\r\n| `@ValueList.type`          | `@Common.ValueList.type`                      |\r\n| `@Capabilities.Deletable`  | `@Capabilities.DeleteRestrictions.Deletable`  |\r\n| `@Capabilities.Insertable` | `@Capabilities.InsertRestrictions.Insertable` |\r\n| `@Capabilities.Updatable`  | `@Capabilities.UpdateRestrictions.Updatable`  |\r\n| `@readonly`                | `@Core.Immutable`                             |\r\n| `@important`               | `@UI.Importance`                              |\r\n| `@assert.format`           | `@Validation.pattern: value`                  |\r\n| `@assert.range`            | `@Validation.Minimum/Maximum: value`          |\r\n|                            | or `@Validation.AllowedValues: {`             |\r\n|                            |      `@Core.SymbolicName: enum-name }`        |\r\n\r\n\r\nFor the annotation `@important` (which is renamed to `@UI.Importance`), the\r\nvalues `true`/`false` are also replaced by the enum constants `#High`/`#Low`.\r\n\r\n_FIXME_: Do we want to keep that?\r\n"},{"name":"toSwagger.md","content":"# To Swagger transformation\r\n\r\n> Status Oct 2019: outdated.  As long as the `toSwagger` backend only works with `--beta-mode`, this doc should be in internalDoc/.\r\n> Some JSON code snippets might be a bit too long.\r\n\r\n\"The OpenAPI Specification, originally known as the Swagger Specification, is\r\na specification for machine-readable interface files for describing, producing,\r\nconsuming, and visualizing RESTful Web services.\" - [Wikipedia](https://en.wikipedia.org/wiki/OpenAPI_Specification)\r\n\r\nIn 2015 the Swagger specification was renamed to the OpenAPI specification.\r\nThe compiler's functionality provides an output as per the OpenAPI 3.0.0 specification,\r\nregardless of being called 'to Swagger'.\r\n\r\n## Transform a CDS model to a swagger json file\r\n\r\nExecuting the compiler with the `--to-swagger` option or in short `-S` gives the opportunity\r\nbased on your CDS model an OpenAPI json file(s) to be produced. In addition to the option, a mandatory\r\nflag(s) needs to be added. The flags can be a comma-separated combination of \"json\" and \"csn\".\r\nThe `json` flag generate output for each service in the model, the `csn` flag the\r\npreprocessed model with to swagger specifics.\r\n\r\n### Basic information\r\n\r\nMultiple services generation is supported as for each service in the input CDS model a separate swagger\r\ndocument is created.\r\n\r\nEvery OpenAPI 3.0.0 document should have an \"openapi\" property, which specifies the version of the\r\nspecification followed, in our case the \"3.0.0\" value is assigned. Also, the document receives a property\r\n\"info\" with \"title\" and value is the name of the corresponding service for the swagger document.\r\n\r\n### Paths\r\n\r\nThe \"paths\" property of the OpenAPI document describes the available paths and operations for\r\nthe API in question. The unbound actions and functions play a role as a feeder for the\r\ninformation in the `paths` property of the swagger model.\r\n\r\nAs the paths property is a mandatory one, if no content for generation is found in the model, then an empty\r\nobject will be generated.\r\n\r\n#### HTTP method\r\n\r\nThe corresponding definitions of paths in CDS model are the (un)bound actions and functions.\r\nSuch an action or a function must be annotated with the specified annotation so the generator takes\r\nit in mind. The annotation declares the desired HTTP method and the response code.\r\nThree different syntaxes are available:\r\n\r\n 1. __@Swagger.GET : 200__ - a GET operation with response code 200 is generated\r\n 2. __@Swagger.POST__ - a POST operation with the default response code is generated\r\n 3. __@Swagger.DELETE : [202, 204, 200]__ - a DELETE operation with responses for every of 202, 204 and 200 codes\r\n or the three variants can be combined in:\r\n __@Swagger : { GET : 200, POST, DELETE : [202, 204, 200] }__\r\n\r\n> To define a range of response codes, you may use the following range definitions:\r\n> __1XX__, __2XX__, __3XX__, __4XX__, and __5XX__.\r\n\r\nBy the OpenAPI specification __GET__, __PUT__, __POST__, __DELETE__, __OPTIONS__, __HEAD__, __PATCH__ and __TRACE__\r\nare the supported http verbs. Still not supported in the CDS compiler are only __OPTIONS__ and __TRACE__.\r\n\r\nIf the user decides not to specify a response code(using the __@Swagger.*method*__), then an operation with default code will be\r\ngenerated. The default code for a __PATCH__ operation is __204__, for the rest of the operations is __200__.\r\n\r\n#### Path to an individual endpoint\r\n\r\nIf a relative path to an individual endpoint is not specified by the user, then the default one is assigned.\r\nThis default path is composed from the service name, the entity name(if the action/function is bound) and the\r\nname of the action. An example for bound action will be:\r\n`/com.test.MyService.MyEntyty/myAction` and for\r\nunbound: `/com.test.MyService/myFunction`.\r\n\r\nFor the case when the user wants an operation to serves under a specific path, that can be arranged with the __@Swagger.path__\r\nannotation. The custom path can include parameters e.g. ``@Swagger.path : '/MyPath/bookByName/{bookName}'``.\r\n> In this case the user has to take care the names of the parameters to correspond to the name\r\n> of parameters specified in the action/function declaration.\r\n\r\n#### Operations parameters\r\n\r\nThe OpenAPI specification states that a parameter can have location ([the property 'in' of a parameter object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#parameterObject))\r\nwith one of the following values:\r\n- query\r\n- header\r\n- path\r\n- cookie\r\n\r\nWith the __@Swagger.parameter__ annotation applied to a parameter this location can be specified. If not specified - __query__ is taken as value.\r\n\r\n> If a value *path* is given for the __@Swagger.parameter__ annotation, this means that automatically the name of the parameter\r\n> is prepended to the path name. This is valid only if a __@Swagger.path__ annotation is not used.\r\n\r\nThe parameter location resolving is illustrated with the following example:\r\n\r\nGiven is the CDS model\r\n```\r\n...\r\nactions {\r\n  @Swagger.GET\r\n  action bookById(@Swagger.parameter: 'path' bookId : Integer) returns Book;\r\n  @Swagger.GET\r\n  action bookByName(@Swagger.parameter: 'cookie' bookName: String) returns Book;\r\n  @Swagger.GET\r\n  action booksByAuthor(authorName: String) returns array of Book;\r\n};\r\n...\r\n```\r\n\r\nthe result will look like:\r\n```json\r\n...\r\n\"paths\": {\r\n  \"/Bookstore/Book/bookById/{bookId}\": {\r\n    \"get\": {\r\n      \"summary\": \"\",\r\n      \"operationId\": \"\",\r\n      \"tags\": [],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Expected response to a valid request\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"default\": {\r\n          \"description\": \"unexpected error\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Error\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"bookId\",\r\n          \"in\": \"path\",\r\n          \"description\": \"\",\r\n          \"required\": true,\r\n          \"schema\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"/Bookstore/Book/bookByName\": {\r\n    \"get\": {\r\n      \"summary\": \"\",\r\n      \"operationId\": \"\",\r\n      \"tags\": [],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Expected response to a valid request\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"default\": {\r\n          \"description\": \"unexpected error\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Error\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"bookName\",\r\n          \"in\": \"cookie\",\r\n          \"description\": \"\",\r\n          \"required\": false,\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"/Bookstore/Book/booksByAuthor\": {\r\n    \"get\": {\r\n      \"summary\": \"\",\r\n      \"operationId\": \"\",\r\n      \"tags\": [],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Expected response to a valid request\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"type\": \"array\",\r\n                \"items\": {\r\n                  \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          \"headers\": {\r\n            \"x-next\": {\r\n              \"description\": \"A link to the next page of responses\",\r\n              \"schema\": {\r\n                \"type\": \"string\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"default\": {\r\n          \"description\": \"unexpected error\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"$ref\": \"#/components/schemas/Error\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"parameters\": [\r\n        {\r\n          \"name\": \"authorName\",\r\n          \"in\": \"query\",\r\n          \"description\": \"\",\r\n          \"required\": false,\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n...\r\n```\r\n\r\n#### Request body\r\n\r\nFor the __@Swagger.parameter__ annotation can be given one more value - __requestBody__.\r\nThis value can be used in a *POST*, *PUT* or *PATCH* requests. It indicates that for the specified parameter\r\na __requestBody__ property will be generated for the path object.\r\n> Only one parameter can be annotated with this value - the first found will be taken in mind.\r\n> The annotated parameter will *not be included* in the __parameters__ property.\r\n\r\n#### Arrayed responses\r\n\r\nAs seen in the example above, if an action/function has a return type ``... returns array of <entity_name>``, then for the\r\nOpenAPI document the schema for this specific response is of type array with items of type the pointed entity and a header, which\r\nis a link to the next page of responses, or:\r\n```json\r\n\"200\": {\r\n  \"description\": \"Expected response to a valid request\",\r\n  \"content\": {\r\n    \"application/json\": {\r\n      \"schema\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n          \"$ref\": \"#/components/schemas/<entity_name>\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"headers\": {\r\n    \"x-next\": {\r\n      \"description\": \"A link to the next page of responses\",\r\n      \"schema\": {\r\n        \"type\": \"string\"\r\n      }\r\n    }\r\n  }\r\n},\r\n```\r\n\r\n### Schemas\r\n\r\nOne of the major components in an OpenAPI interface file is the components' schemas.\r\nThe corresponding artifacts to schemas in the OpenAPI file from a CDS model are the definitions.\r\n\r\nExecuting the following model:\r\n```\r\nservice Petstore {\r\n  entity Pet {\r\n    id : Integer64 not null;\r\n    name : String not null;\r\n    tag : String(10);\r\n  };\r\n};\r\n```\r\nwill result in:\r\n```json\r\n...\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"Petstore.Pet\": {\r\n        \"required\": [\r\n          \"id\",\r\n          \"name\"\r\n        ],\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int64\"\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"tag\": {\r\n            \"maxLength\": 10,\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      }\r\n...\r\n```\r\n\r\nIn short, all the artifacts enclosed in a service definition of a CDS model are transformed into a top-level\r\ndefinitions into the `schemas` part of an OpenAPI json file, except for the services/contexts, unbound actions and functions, namespaces.\r\nA service declaration in a CDS model should be self-containing, which means that is declarations outside of the service are used, an error will\r\nbe thrown. The only case that is an exception here is when an element is of a type which is user-defined and the user-defined type is builtin\r\nand outside of the service, then the type of the element is expanded to the builtin type.\r\n\r\nWhen we have an association the target should be from the current service or exposed in the current service via projection.\r\n\r\nEvery top-level artifact is represented like a Schema Object as described in the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject)\r\n\r\nThe associations are treated regarding their cardinality respectively:\r\n- to-one leads to a single object response with schema as the target\r\n- to-many is represented as an array with items of a type the corresponding target\r\n\r\n#### Association redirection in projections\r\n\r\nThis redirection is expressed in switching the target of an association, which is part of a projection\r\nto the corresponding projection(on the target of the association in the underlying context) from the current service.\r\nFor example the following model:\r\n\r\n```\r\nservice Bookstore {\r\n  entity Book as projection on BookstoreContext.Book;\r\n  entity Author as projection on BookstoreContext.Author;\r\n  @Swagger.GET\r\n  action books() returns array of Book;\r\n};\r\n\r\ncontext BookstoreContext {\r\n  entity Book {\r\n    id : Integer64 not null;\r\n    name : String not null;\r\n    author : association to Author;\r\n  };\r\n\r\n  entity Author {\r\n    key id : Integer;\r\n    firstName : String;\r\n    lastName : String;\r\n  };\r\n};\r\n```\r\nwill result in:\r\n```json\r\n{\r\n  \"openapi\": \"3.0.0\",\r\n  \"info\": {\r\n    \"version\": \"\",\r\n    \"title\": \"Bookstore\"\r\n  },\r\n  \"paths\": {\r\n    \"/Bookstore/books\": {\r\n      \"get\": {\r\n        \"summary\": \"\",\r\n        \"operationId\": \"\",\r\n        \"tags\": [],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"Expected response to a valid request\",\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"type\": \"array\",\r\n                  \"items\": {\r\n                    \"$ref\": \"#/components/schemas/Bookstore.Book\"\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            \"headers\": {\r\n              \"x-next\": {\r\n                \"description\": \"A link to the next page of responses\",\r\n                \"schema\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          \"default\": {\r\n            \"description\": \"unexpected error\",\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"$ref\": \"#/components/schemas/Error\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"Bookstore.Book\": {\r\n        \"required\": [\r\n          \"id\",\r\n          \"name\"\r\n        ],\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int64\"\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"author\": {\r\n            \"$ref\": \"#/components/schemas/Bookstore.Author\"\r\n          }\r\n        }\r\n      },\r\n      \"Bookstore.Author\": {\r\n        \"properties\": {\r\n          \"id\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          },\r\n          \"firstName\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"lastName\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      },\r\n      \"Error\": {\r\n        \"required\": [\r\n          \"code\",\r\n          \"message\"\r\n        ],\r\n        \"properties\": {\r\n          \"code\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          },\r\n          \"message\": {\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThe same redirection is performed for user-defined types, as the type declaration should be also exposed to the service in question.\r\n\r\n#### CDS Views\r\n\r\nFrom a view declared in the CDS model is generated a schema similar to the one coming from an entity, as\r\nthe logic from the view is not applicable for describe in the API spec.\r\n\r\n#### Enums\r\n\r\nDeclared in the CDS model enums are generated as the values are taken in mind.\r\n\r\n```\r\n...\r\n  entity MyEntity {\r\n    elem : String enum { foo = 'bar'; };\r\n  };\r\n...\r\n```\r\nThe output:\r\n```json\r\n...\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"MyEntity\": {\r\n        \"properties\": {\r\n          \"elem\": {\r\n            \"enum\": [\r\n              \"bar\"\r\n            ],\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      },\r\n...\r\n```\r\n"},{"name":"Versioning.md","content":"# Versioning\r\n\r\nThe cds-compiler uses [Semantic Versioning][SemVer] for its version numbers.\r\n\r\nThis document clarifies how we use [SemVer] and what you can and what you can‘t\r\nexpect from version updates.\r\n\r\n<!-- toc: start -->\r\n\r\n1. [Public API](#public-api)\r\n2. [Patch Versions](#patch-versions)\r\n3. [Minor Versions](#minor-versions)\r\n4. [Beta Flags](#beta-flags)\r\n5. [Deprecated Flags](#deprecated-flags)\r\n6. [Command Line Tool `cdsc`](#command-line-tool-cdsc)\r\n\r\n<!-- toc: end -->\r\n\r\n## Public API\r\n\r\nAccording to [§1] of SemVer, a public API must be made available.  Our public\r\nAPI is available through `lib/main.js` which can be used by\r\n`const compiler = require('@sap/cds-compiler');` in NodeJS or, if you use\r\nES modules, with `import compiler from \"@sap/cds-compiler\";`\r\n\r\nFurthermore, any exported property in `lib/main.js` whose name starts with `$`\r\nis _not_ part of the public API.\r\n\r\nUsing any other file is not considered “public” and is not covered by any\r\nguarantees about API stability.\r\n\r\n## Patch Versions\r\n\r\nIn [§6] of SemVer, it is stated that only “backwards compatible bug fixes” are\r\nto be introduced by patch versions.  And “A bug fix is defined as an internal\r\nchange that fixes incorrect behavior.”\r\n\r\nWe _may_ introduce new compiler-checks in patch versions that catch incorrect\r\nCDS which may lead to invalid SQL or EDM(X) files.  Therefore, if your code\r\ncontains invalid CDS, a patch release may make them visible and CDS files _may_\r\nfail to compile.  \r\nHowever, most of the time, new errors are first introduced as warnings and are\r\nonly later upgraded to errors.\r\n\r\n## Minor Versions\r\n\r\n[§7] of SemVer covers minor version updates.  The same exceptions as for\r\n“patch versions” can be applied.\r\n\r\nWe may introduce new compiler-checks that might make your compilation fail if\r\nwe detect invalid CDS code.\r\n\r\n## Beta Flags\r\n\r\nThe compiler provides so-called “beta flags” that enable or disable certain\r\nfeatures.  We do not guarantee that any such flags stay consistent between\r\npatch versions!  Beta flags may change any time.\r\n\r\nRefer to [CHANGELOG_BETA.md](./CHANGELOG_BETA.md) for changes to beta flags.\r\n\r\n## Deprecated Flags\r\n\r\n“Deprecated flags” allow developers to switch to old behavior and make it\r\neasier to upgrade to a later major version.  These flags may be changed or\r\nremoved anytime as they only serve to make upgrades easier during a grace\r\nperiod.\r\n\r\nRefer to [CHANGELOG_DEPRECATED.md](./CHANGELOG_DEPRECATED.md) for changes\r\nto deprecated flags.\r\n\r\n## Command Line Tool `cdsc`\r\n\r\n`bin/cdsc.js` as well as all other command line tools do _not_ guarantee any\r\nstability.  It is considered a compiler internal tool that only serves for\r\ndebugging.  The official command line tool `cds` of the `@sap/cds` and\r\n`@sap/cds-dk` packages are to be used by users.  That means commands and\r\noptions may change any time without prior notice.  Changes may still be listed\r\nin [CHANGELOG.md](../CHANGELOG.md).\r\n\r\n[SemVer]: https://semver.org/\r\n[§1]: https://semver.org/#spec-item-1\r\n[§6]: https://semver.org/#spec-item-6\r\n[§7]: https://semver.org/#spec-item-7\r\n"}]},{"name":"README.md","content":"# Getting started\r\n\r\n\r\n<!-- markdownlint-disable MD001 MD022 -->\r\n##### Table of Contents\r\n<!-- markdownlint-enable MD001 MD022 -->\r\n\r\n[Installation and Usage](#installation-and-usage)  \r\n[Documentation](#documentation)\r\n\r\n## Installation and Usage\r\n\r\nInstall with npm:\r\n\r\n```\r\nnpm install \"@sap/cds-compiler\"\r\n```\r\n\r\nOr maintain your package.json dependencies as follows:\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"@sap/cds-compiler\": \"latest\"\r\n  }\r\n```\r\n\r\n## Documentation\r\n\r\nPlease refer to the [official CDS documentation](https://cap.cloud.sap/docs/cds/).\r\n\r\n\r\n## License\r\n\r\nThis package is provided under the terms of the [SAP Developer License Agreement](https://tools.hana.ondemand.com/developer-license-3_1.txt).\r\n"},{"name":"share","nodes":[{"name":"messages","nodes":[{"name":"anno-duplicate-unrelated-layer.md","content":"# anno-duplicate-unrelated-layer\r\n\r\nAn annotation is assigned multiple times through unrelated layers.\r\n\r\nA _layer_ can be seen as a group of connected sources, for example CDL files.\r\nThey form a cyclic connection through their dependencies\r\n(for example, `using` in CDL).  If there are no cyclic dependencies, a single\r\nCDL file is equivalent to a layer.\r\n\r\n## Example\r\n\r\nErroneous code example using four CDS files:\r\n\r\n```cdl\r\n// (1) Base.cds: Contains the artifact that should be annotated\r\nentity FooBar {  }\r\n\r\n// (2) FooAnnotate.cds: First unrelated layer to Base.cds\r\nusing from './Base';\r\nannotate FooBar with @Anno: 'Foo';\r\n\r\n// (3) BarAnnotate.cds: Second unrelated layer to Base.cds\r\nusing from './Base';\r\nannotate FooBar with @Anno: 'Bar';\r\n\r\n// (4) All.cds: Combine all files\r\nusing from './FooAnnotate';\r\nusing from './BarAnnotate';\r\n```\r\n\r\nIn (4) the compiler will warn that there are duplicate annotations in unrelated\r\nlayers.  That is because (2) and (3) are unrelated, i.e. they do not have a\r\nconnection.\r\n\r\nDue to these unrelated layers, the compiler can’t decide in (4) which\r\nannotation should be applied first.\r\n\r\nInstead of passing (4) to the compiler, you can also pass (2) and (3) to it.\r\nBecause there are no cyclic dependencies between the files, each file\r\nrepresents one layer.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, remove one of the duplicate annotations.  Chances are, that\r\nonly one was intended to begin with.  For the erroneous example above, remove\r\nthe annotation from (3).\r\n\r\nAlternatively, add an annotation assignment to (4).  This annotation has\r\nprecedence and the error will vanish.  For the example above, (4) will look\r\nlike this:\r\n\r\n```cdl\r\n// (4) All.cds: Combine all files\r\nusing from './FooAnnotate';\r\nusing from './BarAnnotate';\r\n// This annotation has precedence.\r\nannotate FooBar with @Anno: 'Bar';\r\n```\r\n\r\nYou can also make (3) depend on (2) so that they are no longer in unrelated\r\nlayers and the compiler can determine which annotation to apply.\r\n\r\n```cdl\r\n// (3) BarAnnotate.cds: Now depends on (2)\r\nusing from './FooAnnotate';\r\nannotate FooBar with @Anno: 'Bar';\r\n```\r\n\r\nThis works because there is now a defined dependency order.\r\n"},{"name":"check-proper-type-of.md","content":"# check-proper-type-of\r\n\r\nAn element in a `type of` expression doesn’t have proper type information.\r\n\r\nThe message's severity is `Info` but may be raised to `Error` in the SQL,\r\nSAP HANA, and OData backends.  These backends require elements to have a type.\r\nOtherwise they aren’t able to render elements (for example, to SQL columns).\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```cdl\r\nentity Foo {\r\n  key id : Integer;\r\n};\r\nview ViewFoo as select from Foo {\r\n  1+1 as calculatedField @(anno)\r\n};\r\nentity Bar {\r\n  // `e` has no proper type but has the annotation `@anno`.\r\n  e : type of ViewFoo:calculatedField;\r\n};\r\n```\r\n\r\n`ViewFoo:calculatedField` is a calculated field without an explicit type.\r\n\r\n`type of` is used in `E:e`'s type specification.  You would expect the element\r\nto have a proper type.  However, because the referenced element is calculated,\r\nthe compiler isn’t able to determine the correct type.\r\nThe element still inherits `ViewFoo:calculatedField`'s annotations and other\r\nproperties but won’t have a proper type, which is required by some backends.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, assign an explicit type to `ViewFoo:calculatedField`.\r\n\r\n```cdl\r\nview ViewFoo as select from Foo {\r\n  1+1 as calculatedField @(anno) : Integer\r\n};\r\n```\r\n\r\n## Related Messages\r\n\r\n- `check-proper-type`\r\n"},{"name":"check-proper-type.md","content":"# check-proper-type\r\n\r\nA type artifact doesn’t have proper type information.\r\n\r\nThe message's severity is `Info` but may be raised to `Error` in the SQL,\r\nSAP HANA, and OData backends.  These backends require types to have type\r\ninformation.  Otherwise they aren’t able to render elements that use this\r\ntype (for example, to SQL columns).\r\n\r\nThis message affects CSN input and shouldn’t appear if CDL input is used.\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```json\r\n{\r\n  \"definitions\": {\r\n    \"MainType\": {\r\n      \"kind\": \"type\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n`MainType` is of kind \"type\" but has not further type information.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, add explicit type information to `MainType`, for example, add\r\nan `elements` property to make a structured type.\r\n\r\n```json\r\n{\r\n  \"definitions\": {\r\n    \"MainType\": {\r\n      \"kind\": \"type\",\r\n      \"elements\": {\r\n        \"id\": {\r\n          \"type\": \"cds.String\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Related Messages\r\n\r\n- `check-proper-type-of`\r\n"},{"name":"duplicate-autoexposed.md","content":"# duplicate-autoexposed\r\n\r\nTwo or more entities with the same name can’t be auto-exposed in the same\r\nservice.\r\n\r\nAuto-exposure is a compiler feature which makes it easier for developers\r\nto write services.  Auto-exposure uses the name of the entity to expose\r\nit in the service.  It ignores the entity’s namespace and context.\r\nThis may lead to name collisions.\r\n\r\nThe message’s severity is `Error` and is raised by the compiler.  You need to\r\nadapt your model to fix the error.\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```cdl\r\n// (1)\r\nentity ns.first.Foo {\r\n  key parent : Association to one ns.Base;\r\n};\r\n// (2)\r\nentity ns.second.Foo {\r\n  key parent : Association to one ns.Base;\r\n};\r\n// (3)\r\nentity ns.Base {\r\n  key id    : UUID;\r\n  to_first  : Composition of many  ns.first.Foo;\r\n  to_second : Composition of many ns.second.Foo;\r\n}\r\nservice ns.MyService {\r\n  // (4)\r\n  entity BaseView as projection on ns.Base;\r\n};\r\n```\r\n\r\nBoth (1) and (2) define an entity `Foo`, but in different namespaces.  For\r\nexample, they could be located in different files with a `namespace` statement.\r\n(3) contains compositions of both `first.Foo` and `second.Foo`.\r\n\r\nIn (4), a projection on `Base` is exposed in service `MyService`.\r\nBoth composition targets are auto-exposed.  However, because the namespaces\r\nof (2) and (3) are ignored, a name collision happens.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, you need to explicitly expose one or more entities under\r\na name that does not exist in the service, yet.\r\n\r\nFor the erroneous example above, you could add these two lines to the service\r\n`ns.MyService`:\r\n\r\n```cdl\r\n  entity first.Foo as projection on ns.first.Foo;   // (5)\r\n  entity second.Foo as projection on ns.second.Foo; // (6)\r\n```\r\n\r\nHere we reuse the namespaces `first` and `second`.   We don’t use `ns` because\r\nit’s the common namespace.  But you can choose any other name.\r\n\r\nThe compiler will pick up both manually exposed entities and will correctly\r\nredirect all associations.\r\n\r\n_Note:_ For the example, it is sufficient to expose only one entity.  If you\r\nremove (6), you will get these two projections:\r\n- `ns.MyService.first.Foo` for (5)\r\n- `ns.MyService.Foo` for (6)\r\nWhere (6) is the name chosen by the compiler.\r\n\r\n## Notes on auto-exposure\r\n\r\nYou may wonder why the compiler does not reuse the namespace when\r\nauto-exposing entities.  The reason is that the resulting auto-exposed names\r\ncould become _long_ names that don’t seem natural nor intuitive.  We chose to\r\nexpose the entity name because that’s what most developers want to do when\r\nthey manually expose entities.\r\n"},{"name":"extend-repeated-intralayer.md","content":"# extend-repeated-intralayer\r\n\r\nThe order of elements of an artifact may not be stable due to multiple\r\nextensions in the same layer (for example in the same file).\r\n\r\nA _layer_ can be seen as a group of connected sources, for example, CDL files.\r\nThey form a cyclic connection through their dependencies\r\n(for example, `using` in CDL).\r\n\r\n## Example\r\n\r\nErroneous code example with a single CDL file:\r\n\r\n```cdl\r\nentity FooBar { }\r\n\r\nextend FooBar { foo : Integer; }\r\nextend FooBar { bar : Integer; }\r\n```\r\n\r\nDue to multiple extensions in the example above, the order of `foo` and `bar`\r\ninside `FooBar` may not be stable.  You therefore can’t depend on it.\r\n\r\nIt's also possible to trigger this warning with multiple files.\r\nLook at the following example:\r\n\r\n```cdl\r\n// (1) Definition.cds\r\nusing from './Extension.cds';\r\nentity FooBar { };\r\nextend FooBar { foo: Integer; };\r\n\r\n// (2) Extension.cds\r\nusing from './Definition.cds';\r\nextend FooBar { bar: Integer; }\r\n```\r\n\r\nHere we have a cyclic dependency between (1) and (2).  Together they form one\r\nlayer with multiple extensions.  Again, the element order isn’t stable.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, move extensions for the same artifact into the same extension\r\nblock:\r\n\r\n```cdl\r\n// (1) Definition.cds : No extension block\r\nusing from './Extension.cds';\r\nentity FooBar { }\r\n\r\n// (2) Extension.cds : Now contains both extensions\r\nusing from './Definition.cds';\r\nextend FooBar {\r\n  foo : Integer;\r\n  bar : Integer;\r\n}\r\n```\r\n\r\n## Related Messages\r\n\r\n- `extend-unrelated-layer`\r\n"},{"name":"extend-unrelated-layer.md","content":"# extend-unrelated-layer\r\n\r\nUnstable element order due to extensions for the same artifact in\r\nunrelated layers.\r\n\r\nA _layer_ can be seen as a group of connected sources, for example CDL files.\r\nThey form a cyclic connection through their dependencies\r\n(for example, `using` in CDL).\r\n\r\n## Example\r\n\r\nErroneous code example using four CDS files:\r\n\r\n```cdl\r\n// (1) Base.cds: Contains the artifact that should be extended\r\nentity FooBar {  }\r\n\r\n// (2) FooExtend.cds: First unrelated layer to Base.cds\r\nusing from './Base';\r\nextend FooBar { foo : Integer; }\r\n\r\n// (3) BarExtend.cds: Second unrelated layer to Base.cds\r\nusing from './Base';\r\nextend FooBar { bar : Integer; }\r\n\r\n// (4) All.cds: Combine all files\r\nusing from './FooExtend';\r\nusing from './BarExtend';\r\n```\r\n\r\nIn (4) the compiler will warn that the element order of `FooBar` is unstable.\r\nThat is because the extensions in (2) and (3) are in different layers and when\r\nused in (4) it can’t be ensured which extension is applied first.\r\n\r\nInstead of passing (4) to the compiler, you can also pass (2) and (3) to it.\r\nBecause there are no cyclic dependencies between the files, each file\r\nrepresents one layer.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, move extensions for the same artifact into the same layer,\r\nthat is, the same file.\r\n\r\nFor the erroneous example above, remove the extension from (3) and move\r\nit to (2):\r\n\r\n```cdl\r\n// (2) FooExtend.cds\r\nusing from './Base';\r\nextend FooBar {\r\n  foo : Integer;\r\n  bar : Integer;\r\n}\r\n```\r\n\r\n## Related Messages\r\n\r\n- `extend-repeated-intralayer`\r\n"},{"name":"README.md","content":"# Message Explanations\r\n\r\nThis directory contains explanations for various compiler messages.  These\r\nlong-form texts aren’t limited to errors but can also explain info\r\nmessages or warnings.\r\n\r\n## Structure of an Explanation file\r\n\r\nAll files are structured the same way:\r\n\r\n1. Heading with message-id\r\n2. Short description (one sentence, for example the compiler message's text)\r\n3. Default severity (also mention when upgraded to error)\r\n4. Erroneous code example\r\n5. Explanation of the example  \r\n   May also contain a longer explanation of the message.  Also explain why it\r\n   is considered an error).\r\n6. (only if possible) Description of a possible fix\r\n7. Fixed code example\r\n8. Related Messages\r\n\r\nAll markdown conventions of cds-compiler shall be applied to the explanation\r\nfiles as well.\r\n\r\nFurthermore:\r\n\r\n- Do not use passive but directly address the user (that means \"you\")  \r\n  Passive is a German thing.\r\n- Use a column width of 80  \r\n  If users open the message in a terminal, it is often 80 characters wide.\r\n  Even if that was not the case, longer lines are harder to read, so keep them\r\n  short.\r\n\r\n## Example Structure\r\n\r\n```markdown\r\n# ‹message-id›\r\n\r\nLonger message text.  Some background info.\r\nUsually mentions the severity.\r\n\r\n## Example\r\n\r\nCode which also lead to the current message,\r\nwith an explanation why it is problematic.\r\n\r\n## How to Fix\r\n\r\nDescription of options how the issue can be fixed, using the example.\r\n\r\n## Notes on …\r\n\r\nOptional: more background info.\r\n\r\n## Related messages\r\n\r\n - Optional: message ids for similar issues.\r\n```\r\n"},{"name":"redirected-to-ambiguous.md","content":"# redirected-to-ambiguous\r\n\r\nThe redirected target originates more than once from the original target\r\nthrough direct or indirect sources of the redirected target.\r\n\r\nThe message's severity is `Error` and is raised by the compiler.\r\nThe error happens due to an ill-formed redirection, which requires changes to\r\nyour model.\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```cdl\r\nentity Main {\r\n      key id : Integer;\r\n    toTarget : Association to Target;\r\n}\r\n\r\nentity Target {\r\n    key id : Integer;\r\n}\r\n\r\nview View as select from\r\n    Main,\r\n    Target,\r\n    Target as Duplicate\r\n{\r\n    // This redirection can’t be resolved:\r\n    Main.toTarget : redirected to View\r\n};\r\n```\r\n\r\nEntity `Target` exists more than once in `View`.  In the previous example, this\r\nhappens through the *direct* sources in the select clause.\r\nBecause the original target exists twice in the redirected target, the compiler\r\nisn’t able to correctly resolve the redirection due to ambiguities.\r\n\r\nThis can also happen through *indirect* sources.  For example if entity `Main`\r\nwere to include `Target` then selecting from `Target` just once would be enough\r\nto trigger this error.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, you must have the original target only once in your direct\r\nand indirect sources.  The previous example can be fixed by removing\r\n`Duplicate` from the select clause.\r\n\r\n```cdl\r\nview View as select from Main, Target {\r\n    Main.toTarget : redirected to View\r\n};\r\n```\r\n\r\nIf this isn’t feasible then you have to redefine the association using a mixin\r\nclause.\r\n\r\n```cdl\r\nview View as select from Main, Target mixin {\r\n    toMain : Association to View on Main.id = Target.id;\r\n} into {\r\n    Main.id   as mainId,\r\n    Target.id as targetId,\r\n    toMain\r\n};\r\n```\r\n\r\n## Related Messages\r\n\r\n- `redirected-to-unrelated`\r\n"},{"name":"redirected-to-unrelated.md","content":"# redirected-to-unrelated\r\n\r\nThe redirected target doesn’t originate from the original target.\r\n\r\nThe message's severity is `Error` and is raised by the compiler.\r\nThe error happens due to an ill-formed redirection, which requires changes to\r\nyour model.\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```cdl\r\nentity Main {\r\n    key id : Integer;\r\n    // self association for example purpose only\r\n    toMain : Association to Main;\r\n}\r\nentity Secondary {\r\n    key id : Integer;\r\n}\r\nentity InvalidRedirect as projection on Main {\r\n    id,\r\n    // Invalid redirection\r\n    toMain: redirected to Secondary,\r\n};\r\n```\r\n\r\nProjection `InvalidRedirect` tries to redirect `toMain` to `Secondary`.\r\nHowever, that entity doesn’t have any connection to the original target\r\n`Main`, that means, it doesn’t originate from `Main`.\r\n\r\nWhile this example may be clear, your model may have multiple redirections\r\nthat make the error not as obvious.\r\n\r\nErroneous code example with multiple redirections:\r\n\r\n```cdl\r\nentity Main {\r\n    key id : Integer;\r\n    toMain : Association to Main;\r\n}\r\nentity FirstRedirect as projection on Main {\r\n    id,\r\n    toMain: redirected to FirstRedirect,\r\n}\r\nentity SecondRedirect as projection on FirstRedirect {\r\n    id,\r\n    // Invalid redirection\r\n    toMain: redirected to Main,\r\n}\r\n```\r\n\r\nThe intent of the example above is to redirect `toMain` to its original target\r\nin `SecondRedirect`.  But because `SecondRedirect` uses `toMain` from\r\n`FirstRedirect`, the original target is `FirstRedirect`.  And `Main` doesn’t\r\noriginate from `FirstRedirect` but only vice versa.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, you must redirect the association to an entity that originates\r\nfrom the original target.  In the first example above you could redirect\r\n`SecondRedirect:toMain` to `SecondRedirect`.  However, if that isn’t feasible\r\nthen you have to redefine the association using a mixin clause.\r\n\r\n```cdl\r\nview SecondRedirect as select from FirstRedirect mixin {\r\n    toMain : Association to Main on id = $self.id;\r\n} into {\r\n    FirstRedirect.id as id,\r\n    toMain\r\n};\r\n```\r\n\r\n## Related Messages\r\n\r\n- `redirected-to-ambiguous`\r\n"},{"name":"rewrite-not-supported.md","content":"# rewrite-not-supported\r\n\r\nThe compiler isn’t able to rewrite ON conditions for some associations.\r\nThey have to be explicitly defined by the user.\r\n\r\nThe message's severity is `Error`.\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```cdl\r\nentity Base {\r\n  key id     : Integer;\r\n  primary    : Association to Primary on primary.id = primary_id;\r\n  primary_id : Integer;\r\n}\r\n\r\nentity Primary {\r\n  key id       : Integer;\r\n  secondary    : Association to Secondary on secondary.id = secondary_id;\r\n  secondary_id : Integer;\r\n}\r\n\r\nentity Secondary {\r\n  key id : Integer;\r\n  text   : LargeString;\r\n}\r\n\r\nentity View as select from Base {\r\n  id,\r\n  primary.secondary // Error: The ON condition isn’t rewritten here\r\n};\r\n```\r\n\r\nIn the previous example, the ON condition in `View` of `secondary` can’t be\r\nautomatically rewritten because the associations are unmanaged and the\r\ncompiler can’t determine how to properly rewrite them for `View`.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, you have to provide an explicit ON condition.  This can be\r\nachieved by using the `redirected to` statement:\r\n\r\n```cdl\r\nentity View as select from Base {\r\n  id,\r\n  primary.secondary_id,\r\n  primary.secondary: redirected to Secondary on\r\n    secondary.id = secondary_id\r\n};\r\n```\r\n\r\nIn the corrected view above, the association `secondary` gets an explicit ON\r\ncondition.  For this to work it is necessary to add `secondary_id` to the\r\nselection list, that means, we have to explicitly use the foreign key.\r\n"},{"name":"syntax-expected-integer.md","content":"# syntax-expected-integer\r\n\r\nThe compiler expects a safe integer here.\r\nThe last safe Integer is `2^53 - 1` or `9007199254740991`.\r\n\r\nA safe integer is an integer that\r\n\r\n- can be exactly represented as an IEEE-754 double precision number, and\r\n- whose IEEE-754 representation cannot be the result of rounding any\r\n  other integer to fit the IEEE-754 representation.\r\n\r\nThe message's severity is `Error`.\r\n\r\n## Example\r\n\r\nErroneous code example:\r\n\r\n```cdl\r\ntype LengthIsUnsafe : String(9007199254740992);\r\ntype NotAnInteger : String(42.1);\r\n```\r\n\r\nIn the above example, the string length for the type `LengthIsUnsafe` is not a\r\nsafe Integer. It is too large.\r\nLikewise, the string length for the type `NotAnInteger` is a decimal.\r\n\r\n## How to Fix\r\n\r\nTo fix the issue, you have to provide a safe integer:\r\n\r\n```cdl\r\ntype LengthIsSafe : String(9007199254740991);\r\ntype AnInteger : String(42);\r\n```\r\n\r\nIf not feasible, a string representation of the number needs to be used,\r\ne.g. in annotation values.\r\n"}]}]}]