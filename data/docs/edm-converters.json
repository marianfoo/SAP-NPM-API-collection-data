[{"name":"CHANGELOG.md","content":"# Change Log\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## [1.0.41] - 2021-03-30\r\n\r\n### Added \r\n- support for node.js version 14\r\n\r\n## [1.0.40] - 2021-01-27\r\n\r\n### Fixed \r\n- Fixed Cardinality Issues for V2.\r\n\r\n## [1.0.39] - 2020-11-19\r\nBugfixes mentioned in GWTCDA-3192\r\n\r\n### Fixed \r\n- Reverted back ComplexType/EnumType Kind to Type for V4.\r\n## [1.0.38] - 2020-10-13\r\n\r\nBugfix for cap issue 6098\r\n\r\n### Changed\r\n- Changelog fixes\r\n\r\n## [1.0.37] - 2020-10-12\r\n\r\n### Added\r\n- license file: LICENSE\r\n\r\n## [1.0.30] - 2020-05-19\r\n\r\n### Fixed\r\n   * Added fix to link enum Types to property in entity sets for V4.\r\n\r\n## [1.0.29] - 2020-05-08\r\n\r\n## [1.0.27] - 2020-05-07\r\n\r\n## [1.0.26] - 2020-05-05\r\n\r\n### Fixed\r\n   * Added fix for several missing entity sets which\r\n     are stemming from the same entity For Mock Server Use Case V4.\r\n\r\n### Added\r\n- support for node.js version 12\r\n\r\n### Removed\r\n- support for node.js versions 6 and 8 due to their end of life\r\n\r\n## [1.0.21] - 2019-09-17\r\n\r\n### Fixed\r\n   * Added fix for entities having more than one navigation property.\r\n     Now all navigation property bindings are rendered correctly\r\n     in OData V4 output (before only the last was added to the output).\r\n\r\n## [2.0.0] - 2019-09-13\r\n\r\n### Added\r\n   * CSN Generation For Mock Server Use Case V2.\r\n\r\n## [1.0.3] - 2019-03-29\r\n\r\n### Fixed\r\n* CSN Generation Fixes For Mock Server Use Case V4.\r\n\r\n## [1.0.1] - 2019-03-21\r\n\r\n## [1.0.0] - 2019-03-08\r\n\r\n### Added\r\n   * EDMXV4 to EDMV4 JSON Converter\r\n   * EDMV4 JSON to CSN Converter\r\n   * EDMXV2 to EDMV4 JSON Converter\r\n   * EDMXV2 to CSN Converter\r\n\r\n## [0.0.18] - 2019-03-07\r\n\r\n- # Test Release. Not for productive usage\r\n\r\n## [0.0.17] - 2019-03-06\r\n\r\n- # Test Release. Not for productive usage\r\n\r\n## [0.0.16] - 2019-03-06\r\n\r\n### Added\r\n- Add new -t,--target option to produce OData Node.js csdl json custom format\r\n\r\n### Changed\r\n- Remove Temporal vocabulary from autoloading\r\n- Improve error message if XML elements cannott be resolved\r\n- Change generated $Collection = \"true\" to true boolean for functions generated from function imports\r\n- $Nullable is not set on NavigationProperty collections anymore.\r\n- Improve error message if XML elements cannot be resolved\r\n- Change generated $Collection = \"true\" to true boolean for functions generated from function imports\r\n\r\n## [0.0.15] - 2018-12-12\r\n\r\n### Added\r\n- OData V2-XML to OData V4-JSON converter - Add $Collection to EntitySets\r\n\r\n## [0.0.14] - 2018-11-30\r\n\r\n## [0.0.13] - 2018-11-30\r\n\r\n- # Test Release. Not for productive usage\r\n\r\n## [0.0.12] - 2018-11-29\r\n\r\n### Added\r\n- Autoloading for oasis default vocabularies\r\nAdd following changes:\r\n- Remove $Kind from EntityContainer EntitySets,Singletons and add $Collection to EntitySets\r\n    - See OASIS Issue: https://issues.oasis-open.org/browse/ODATA-1231\r\n\r\n- V4 Converter\r\n    - Now a missing referenced document does not break the processing\r\n    - On execution end there is a new callback parameter providing all missing referenced documents and corresponding uris\r\n\r\n### Removed\r\n- Change output conversion of Constant Expressions (will be provided later):\r\n    - See OASIS Issue: https://issues.oasis-open.org/browse/ODATA-1221\r\n\r\n## [0.0.11] - 2018-11-06\r\n\r\n## [0.0.10] - 2018-11-06\r\n\r\n## [0.0.9] - 2018-11-06\r\n\r\n### Changed\r\n- Change output conversion of Constant Expressions\r\n    - See OASIS Issue: https://issues.oasis-open.org/browse/ODATA-1221\r\n- Remove $Kind from EntityContainer entities\r\n    - See OASIS Issue: https://issues.oasis-open.org/browse/ODATA-1231\r\n\r\n## [0.0.8] - 2018-10-18\r\n\r\n## [0.0.7] - 2018-10-16\r\n\r\n## [0.0.6] - 2018-10-16\r\n\r\n## [0.0.5] - 2018-09-27\r\n\r\n## [0.0.4] - 2018-09-25\r\n\r\n## [0.0.3] - 2018-09-13\r\n\r\n## [0.0.2] - 2018-08-22\r\n\r\n### Added\r\n\r\n* Release version 0.0.1 (alpha version)"},{"name":"lib","nodes":[{"name":"edmToCsn","nodes":[{"name":"README.md","content":"# Getting started\r\n\r\n<!-- markdownlint-disable MD001 MD022 -->\r\n##### Table of Contents\r\n<!-- markdownlint-enable MD001 MD022 -->\r\n\r\n- [Overview](#overview)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Constraints](#constraints)\r\n\r\n## Overview\r\nEDMX2CSN is a command line utility that will convert an OData V2 or OData V4 model (EDMX) to a CSN (JSON) file. The primary use case for this utility is when you're building an extension application that connects to a remote OData V2 or V4 data source.  In such a case, converting the EDMX model from the OData V2 or V4 data source to CSN is the first step you take, along with defining the CDS data model, in order to define the CDS service model for your application.\r\n\r\n## Installation\r\n\r\n1. Install the EDMX2CSN utility from one of the following repositories:\r\n   Nexus **milestones** registry or npm registry:\r\n\r\n  ```\r\n  npm config set registry <local nexus milestone or https://registry.npmjs.org/>\r\n  ```\r\n\r\n  or **releases** registry:\r\n\r\n  ```\r\n  npm config set registry <local nexus release or https://registry.npmjs.org/>\r\n  ```\r\n  > ***Do not add direct dependency to edmx2csn github project!***\r\n\r\n  >npm does not support snapshots via nexus. The only possibility is to download manually a snapshot and install it.\r\n\r\n2. Install the EDMX2CSN utility using npm:\r\n\r\n  ```\r\n  npm install \"@sap/edm-converters\"\r\n  ```\r\n\r\n3. As an alternative to step 2, maintain your package.json dependencies as follows:\r\n\r\n  package.json\r\n  ```\r\n    \"dependencies\": {\r\n      \"@sap/edm-converters\": \"*\"\r\n    }\r\n  ```\r\n\r\n## Usage\r\n\r\nThe compiler with its options is invoked like any other npm/Unix command:\r\n\r\nTo generate CSN file from an EDMX File:\r\n  * Windows: $homedir>./node_modules/@sap/edm-converters/lib/edmToCsn/bin/edmx2csn.cmd -i ${input_folder}/metadata.xml -o ${output_folder} -f\r\n  * Linux: $homedir>./node_modules/@sap/edm-converters/lib/edmToCsn/bin/edmx2csn.sh -i ${input_folder}/metadata.xml -o ${output_folder} -f\r\n\r\nTo generate CSN file from an EDMX URL:\r\n  * Windows: $homedir>./node_modules/@sap/edm-converters/lib/edmToCsn/bin/edmx2csn.cmd -i ${service_url}/$metadata -o ${output_folder}\r\n  * Linux:   $homedir>./node_modules/@sap/edm-converters/lib/edmToCsn/bin/edmx2csn.sh -i ${service_url}/$metadata -o ${output_folder}\r\n\r\n## Constraints\r\n  1. Supports only publicly available OData service URLs (for example, http://services.odata.org/V2/OData/OData.svc/$metadata).\r\n  2. Multiple schemas are not supported (for example, http://services.odata.org/V2/Northwind/Northwind.svc/$metadata).\r\n  3. Function imports in EDMX are not supported.\r\n  4. The following data types in OData V4 cannot be converted to an equivalent data type in CSN:\r\n      * Edm.Duration\r\n      * Edm.Stream\r\n      * Edm.TimeOfDay\r\n      * Edm.Geography\r\n      * Edm.GeographyPoint\r\n      * Edm.GeographyLineString\r\n      * Edm.GeographyPolygon\r\n      * Edm.GeographyMultiPoint\r\n      * Edm.GeographyMultiLineString\r\n      * Edm.GeographyMultiPolygon\r\n      * Edm.GeographyCollection\r\n      * Edm.Geometry\r\n      * Edm.GeometryPoint\r\n      * Edm.GeometryLineString\r\n      * Edm.GeometryPolygon\r\n      * Edm.GeometryMultiPoint\r\n      * Edm.GeometryMultiLineString\r\n      * Edm.GeometryMultiPolygon\r\n      * Edm.GeometryCollection"}]},{"name":"edmxV20ToJsonV40","nodes":[{"name":"README.md","content":"## OData V2 EDM model (XML Format) to OData V4 EDM (JSON Format) converter\r\n\r\n## Features\r\n\r\nThe MetadataConverter converts Odata 2.0 XML-CSDL-Metadata documents into Odata 4.0 JSON-CSDL-Metadata format.\r\nThis converter is able to\r\n- convert all V2 type artifacts\r\n- convert all data artifacts\r\n- converts function imports into a V4 function and V4 function import\r\n- convert and resolve internal and external V2 annotations\r\n- resolve external Types defined in external documents\r\n- determine default value types and convert the value type specific\r\n- detect deferred types and values ​​if they are available at a later point\r\n- provide an API to resolve external documents\r\n- provide a flexible API to enhance/exchange functionality\r\n- lookup and assert XML namespaces to exclude non-Odata nodes\r\n- provide an appropriate error handling\r\n- provide Error position in source xml file where the error is found\r\n- report missing namespaces in std out. Grep for regex '$ERROR - MISSING: (.*)' in stdout.\r\n\r\n## Usage\r\n\r\n### Via command line interface\r\n\r\nPlease use the following call to get help:\r\n\r\n```convert_edm edmxV20ToJsonV40 --help```\r\n\r\n### Via api\r\n\r\nCreate converter via\r\n```js\r\nconst converters = require('@sap/edm-converters');\r\n\r\n// function for lasy loading referenced namespaces\r\nfunction edmLoader(namespace, cb) {\r\n    const document = namespace + '.xml'; // sample\r\n    const xml = load(document);          // from file, service or database\r\n    return cb(null, xml);\r\n}\r\n\r\n// read source xml\r\nconst inputBuffer = loadSourceDocument; // from file, service or database\r\n\r\n// create converter\r\nconst v2Conv = converters.MetadataConverterFactory.createEdmxV20XmlToV40Json(\r\n    { xmlProvider: edmLoader }\r\n);\r\n\r\n// start converter\r\nv2Conv.execute(inputBuffer, (error, json) => {\r\n    // process error / result\r\n    console.log(json);\r\n});\r\n\r\n```\r\n\r\n\r\n### Supported V2 Annotations\r\n\r\n\r\nConverted \"V2\" annotations:\r\n\r\n\r\n|   |   |   |\r\n|---|:-:|---|\r\n| SAP.schema-version | Schema | @Core.SchemaVersion |\r\n| SAP.creatable | EntitySet | @Capabilities.InsertRestrictions/Insertable |\r\n| SAP.updatable | EntitySet | @Capabilities.UpdateRestrictions/Updatable |\r\n| SAP.deletable | EntitySet | @Capabilities.DeleteRestrictions/Deletable |\r\n| SAP.readable | AssociationSet | @Capabilities.InsertRestrictions/NonInsertableNavigationProperties |\r\n| SAP.updatable | AssociationSet | @Capabilities.UpdateRestrictions/NonUpdatableNavigationProperties |\r\n| SAP.deletable | AssociationSet | @Capabilities.DeleteRestrictions/NonDeletableNavigationProperties |\r\n| SAP.creatable=\"false\"<br> SAP.updatable=\"false\" | Property | @Core.Immutable=true |\r\n| SAP.creatable-path | NavigationProperty | not supported |\r\n| SAP.InsertRestrictions/NonInsertableNavigationProperties with \\<If\\> construct | | not supported |\r\n| SAP.updatable-path=\"boolProperty\" | EntitySet | @Core.UpdateRestrictions.Updatable.Path=\"boolProperty\" |\r\n| SAP.deletable-path=\"boolProperty\" | EntitySet | @Core.DeleteRestrictions.Deletable.Path=\"boolProperty\" |\r\n| SAP.updatable-path | Property | not supported |\r\n| SAP.searchable | EntitySet | @Capabilities.SearchRestrictions/Searchable |\r\n| SAP.pageable | EntitySet | @Capabilities.TopSupported & @Capabilities.SkipSupported |\r\n| SAP.topable\tTopSupported | EntitySet | @Capabilities.TopSupported |\r\n| SAP.addressable=\"false\" | EntitySet | $metadata: attribute IncludeInServiceDocument=\"false\"\t|\r\n| SAP.requires-filter | |  @Capabilities.FilterRestrictions/RequiresFilter |\r\n| SAP.required-in-filter | Property | @Capabilities.FilterRestrictionsType/RequiredProperties[] |\r\n| SAP.filterable=\"false\" | Property | @Capabilities.FilterRestrictions/NonFilterableProperties[] |\r\n| SAP.filterable=\"false\" | NavProperty | @Capabilities.NavigationRestrictions/RestrictedProperties/FilterRestrictions/NonFilterableProperties[] |\r\n| SAP.filter-restriction | Property | @Capabilities.FilterRestrictions/RestrictedProperties[]/AllowedExpressions |\r\n| SAP.sortable=\"false\" | Property | @Capabilities.SortRestrictions/NonSortableProperties[] |\r\n| SAP.visible=\"false\" | | not supported |\r\n| SAP.label | |  not supported |\r\n| SAP.heading\t| | not supported |\r\n| SAP.quickinfo | | not supported |\r\n| SAP.text | | not supported |\r\n| SAP.unit | | not supported |\r\n| SAP.precision | | not supported |\r\n| SAP.value-list=\"fixed-values\" | | not supported |\r\n| SAP.display-format=\"Date\" | String-Property | converted to Edm.Date as primitive type |\r\n| SAP.display-format=\"NonNegative\" | String-Property IsDigitSequence | not supported |\r\n| SAP.display-format=\"UpperCase\" | | not supported |\r\n| SAP.lower-boundary, upper-boundary | | not supported |\r\n| SAP.field-control | | not supported |\r\n| SAP.action-for  | |not supported |\r\n| SAP.applicable-path | |not supported |\r\n| SAP.is-annotation | | not supported, instance annotations are not marked in V4 |\r\n| SAP.hierarchy-node-for | | not supported |\r\n| SAP.hierarchy-node-external-key-for | | not supported |\r\n| SAP.hierarchy-level-for | | not supported |\r\n| SAP.hierarchy-parent-node-for | | not supported |\r\n| SAP.hierarchy-parent-navigation-for | | not supported |\r\n| SAP.hierarchy-drill-state-for | | not supported |\r\n| SAP.hierarchy-node-descendant-count-for | | not supported |\r\n| SAP.hierarchy-preorder-rank-for | | not supported |\r\n| SAP.hierarchy-sibling-rank-for | | not supported |\r\n| SAP.aggregation-role=\"dimension\" | | not supported |\r\n| SAP.aggregation-role=\"measure\" | | not supported |\r\n| SAP.aggregation-role=\"totaled-properties-list\" | | not supported |\r\n| SAP.planning-function | |  not supported |\r\n| SAP.minoccursMinOccurs | | not supported |\r\n| SAP.maxoccurs MaxOccurs | | not supported |\r\n| SAP.parameter=\"mandatory\"\\|\"optional\" | |  not supported |\r\n| SAP.attribute-for | | not supported |\r\n| SAP.super-ordinate | | not supported |\r\n"}]},{"name":"edmxV40ToJsonV40","nodes":[{"name":"README.md","content":"## OData V4 EDM model (XML Format) to OData V4 EDM (JSON Format) converter\r\n\r\n## Features\r\n\r\nThe MetadataConverter converts Odata 4.0 XML-CSDL-Metadata documents into Odata 4.0 JSON-CSDL-Metadata format.\r\nThis converter is able to \r\n- Convert all type artifacts (EntityTypes, ComplexTypes, TypeDefinitions, Enumerations, etc...)\r\n- convert all data artifacts (EntitySet, Singelton, etc...)\r\n- convert Functions, BoundFunctions, Actions, BoundActions\r\n- convert and resolve internal and external annotations with all expressions\r\n- resolve external Types defined in external documents\r\n- determine default value types and convert the value type specific\r\n- detect deferred types and values ​​if they are available at a later point\r\n- provide an API to resolve external documents\r\n- provide an API to convert arbitrary abstract syntax tree node into expected structure\r\n- provide a flexible API to enhance/exchange functionality\r\n- lookup and assert XML namespaces to exclude non-Odata nodes\r\n- provide an appropriate error handling\r\n- report missing namespaces in std out. Grep for regex '$ERROR - MISSING: (.*)' in stdout.\r\n\r\n## Usage\r\n\r\n### Via command line interface\r\n\r\nPlease use the following call to get help:\r\n\r\n```convert_edm edmxV40ToJsonV40 --help```\r\n\r\n### Via api\r\n\r\n### Create a simple Converter instance using the MetadataConverterFactory\r\n\r\nA simple Converter instance can be created using the following code.\r\nA simple converter instance is not able to:\r\n- resolve external artifacts or referenced documents\r\n- resolve annotations without expressions where the corresponding term is in an external document\r\n\r\nExample:\r\n\r\n```js\r\nconst converters = require('@sap/edm-converters');\r\n\r\n// read source xml\r\nconst inputBuffer = loadSourceDocument; // from file, service or database\r\n\r\n// create converter\r\nconst v4Conv = converters.MetadataConverterFactory.createEdmxV40ToJsonV40();\r\n\r\n// Convert the xml document to the corresponding json csdl object.\r\n\r\nv4Conv.execute(inputBuffer, (error, json, missingReferencedDocuments) => {\r\n    // process error / result\r\n    console.log(json);\r\n     \r\n     // If there are any missing dependend documents the parameter\r\n    // 'missingReferencedDocuments' is an array with following content:\r\n    // [\r\n    //     {\r\n    //         namespace: 'The.namespace.of.the.missing.document',\r\n    //         uri:'http://uri.defined.in.$Reference.in.metadata.document/$metadata'\r\n    //     }\r\n    // ]\r\n});\r\n```\r\n\r\n### Create a Converter instance with additional features\r\n\r\nTo interpret more complex metadata xml documents (with referenced documents, annotations without\r\nexpressions, etc.) you have to provide a second parameter with additional options.\r\nEvery option is optional and can be omitted.\r\n\r\n```js\r\nconst converters = require('@sap/edm-converters');\r\n\r\n// read source xml\r\nconst inputBuffer = loadSourceDocument; // from file, service or database\r\n\r\nconst options = {\r\n    // Resolve external/depended metadata documents.\r\n    // This factory is called when a type artifact is needed which does not exist\r\n    // in the current interpreted document. This method can be called more than once\r\n    // and depends on the dependency structure of the source document.\r\n\r\n    // Param: 'namespace'\r\n    // The 'namespace' parameter is a String representing the namespace\r\n    // of the missing type.\r\n    // I.e: 'com.any.namespace' for missing type 'com.any.namespace.AnyArtifactType'.\r\n    \r\n    // Param: callback\r\n    // The callback has to be called with the AST representation or the xml string of the\r\n    // external document. The callback has the signature: callback(error, result).\r\n    metadataFactory: (namespace, uri, callback) => {\r\n        readExternalMetadataXmlSomwHow(typeFqn, (error, metadataXml) => {\r\n            const metadataAst = MetadataConverterFactory.createAbstractSyntaxTree(metadataXml);\r\n\r\n            // Or direct\r\n            // callback(error, metadataXml);\r\n        });\r\n    },\r\n\r\n    // Optional, can be omitted.\r\n    logger: { path() { }, info() { }, warn() { }, debug() { } }, \r\n\r\n    // Optional, if the 'MetadataConverterFactory.createAbstractSyntaxTree(xmlString)' is used.\r\n    nodeBuilder: (element) => return element;\r\n\r\n    // Optional, The converter does not parse ignoring nodes (must be prefixed with the corresponding odata xml namespace)\r\n    ignore: ['http://docs.oasis-open.org/odata/ns/edm:Annotation'],\r\n\r\n    // Optional, If you provide your own abstract syntax tree factory, you can provide here.\r\n    // If no factory is provided, a default implementation is used.\r\n    astFactory: (metadataString) => {\r\n        return MetadataConverterFactory.createAbstractSyntaxTree(metadataString);\r\n    },\r\n\r\n    // Optional, The converter produces the default oasis csdl json spec format.\r\n    // If the target option is set to 'library' the converter produces the okra lib\r\n    // custom format. See section 'Okra lib custom csdl format'.\r\n    target: 'library'\r\n}\r\n\r\n// create converter\r\nconst v4Conv = converters.MetadataConverterFactory.createEdmxV40ToJsonV40(options);\r\nv4Conv.execute(inputBuffer, (error, json) => {\r\n        // process error / result\r\n        console.log(json);\r\n    });\r\n\r\n```\r\n\r\n#### Using the node builder factory\r\n\r\nTo use any kind of an AST you have to provide a node builder factory. The implementation\r\nof the converter expects the following structure of each and every node inside the \r\nAST (including the root node):\r\n\r\n```js\r\n{\r\n    // The node name like 'Annotation' for <Annotation>...</Annotation> nodes.\r\n    // The name property MUST be a string and MUST not be null.\r\n    name: 'The name of the element node without <>',\r\n\r\n    // If the node is a text node and does not have a child elements.\r\n    text: 'A possible text value of this node',\r\n\r\n    // Attributes of a node like '<Annotation Term=\"AnyTerm\" AnotherAttribute=\"...\">...<Annotation>'.\r\n    // The attributes property MUST be an object and MUST not be null.\r\n    attributes: {\r\n\r\n        // Attribute key-value pairs including namespaces like xmlns=\"A.namespace\".\r\n        Term: 'A Term full qualified name value',\r\n        AnotherAttribute: '...',\r\n    },\r\n\r\n    // Child elements with containing nodes. The elements property MUST be an array and\r\n    // MUST not be null.\r\n    elements: [\r\n        { name: '...', attributes: {...}, elements: [...] },\r\n        ...\r\n    ]\r\n}\r\n```\r\n\r\nHere is an example how a Browser DOM can be used to structure each AST node element:\r\n\r\n```js\r\n{\r\n    nodeBuilder: (element) => {\r\n        const node = {\r\n            elements: [],\r\n            name: element.nodeName,\r\n            attributes: {}\r\n        };\r\n\r\n        if (element.attributes) {\r\n            Array.from(element.attributes).forEach((attribute) => {\r\n                node.attributes[attribute.nodeName] = attribute.nodeValue;\r\n            })\r\n        }\r\n\r\n        element.childNodes.forEach((childNode) => {\r\n            if (childNode.nodeName === '#text') {\r\n                childNode.text = childNode.nodeValue;\r\n            }\r\n            node.elements.push(childNode);\r\n        });\r\n\r\n        return node;\r\n    }\r\n}\r\n```\r\n\r\n## Library Oasis CSDL Json 4.01 CS01/CS02 format\r\nThe Metadata V4 Converter can produce Oasis CSDL Json 4.01-CS01 and 4.01-CS02 Format.\r\nDefault output format is the Oasis 4.01-CS02 format.\r\n\r\nHere are the differencies:\r\n\r\n### Constant Expressions\r\n \r\n#### $Binary\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Binary\": \"T0RhdGE\"\r\n}\r\n \r\n// After OASIS issue 1221  (CS02):\r\n\"@namespace.Term\": \"T0RhdGE\"\r\n```\r\n \r\n#### $Boolean\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": true\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": true\r\n ```\r\n \r\n#### $Date\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Date\": \"2000-01-01\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"2000-01-01\"\r\n ```\r\n \r\n#### $DateTimeOffset\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$DateTimeOffset\": \"2000-01-01T16:00:00.000Z\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"2000-01-01T16:00:00.000Z\"\r\n```\r\n \r\n#### $Decimal\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Decimal\": \"13.14\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"13.14\"\r\n```\r\n\r\n#### $Duration\r\n```js\r\n// Before OASIS issue 1221  (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Duration\": \"P7D\"\r\n}\r\n \r\n// After OASIS issue 1221  (CS02):\r\n\"@namespace.Term\": \"P7D\"\r\n```\r\n \r\n#### $EnumMember\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$EnumMember\": \"A1,A2\",\r\n    \"$EnumMember@odata.type\":\"#namespace.Type\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"A1,A2\"\r\n```\r\n \r\n#### $Float\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Float\": 3.14\r\n}\r\n// or  (CS01)\r\n\"@namespace.Term\": 3.14\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": 3.14\r\n```\r\n \r\n#### $Guid\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Guid\": \"21EC2020-3AEA-1069-A2DD-08002B30309D\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"21EC2020-3AEA-1069-A2DD-08002B30309D\"\r\n```\r\n \r\n#### $Int\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Int\": 42\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": 42\r\n```\r\n \r\n#### “String”\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": \"Any string\"\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"Any string\"\r\n```\r\n \r\n#### $TimeOfDay\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$TimeOfDay\": \"21:45:00\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"21:45:00\"\r\n```\r\n \r\n \r\n### Dynamic Expressions\r\n \r\n#### $AnnotationPath\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$AnnotationPath\": \"Supplier/@Communication.Contact\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"Supplier/@Communication.Contact\"\r\n```\r\n \r\n#### $ModelElementPath\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$ModelElementPath\": \"/org.example.someAction\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"/org.example.someAction\"\r\n```\r\n \r\n#### $NavigationPropertyPath\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$NavigationPropertyPath\": \"Supplier\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"Supplier\"\r\n```\r\n \r\n#### $PropertyPath\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$PropertyPath\": \"ChangedAt\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": \"ChangedAt\"\r\n```\r\n \r\n#### $Path\r\n```js\r\n// Before OASIS issue 1221 (CS01):\r\n\"@namespace.Term\": {\r\n    \"$Path\": \"FirstName\"\r\n}\r\n \r\n// After OASIS issue 1221 (CS02):\r\n\"@namespace.Term\": {\r\n    \"$Path\": \"FirstName\"\r\n}\r\n```\r\n"}]}]},{"name":"README.md","content":"@sap/edm-converters\r\n===================\r\n\r\nThis module provides several model converters. The following converters are currently supported:\r\n\r\n* OData V2 EDM model (XML Format) to OData V4 EDM (JSON Format)\r\n(details [Readme](./lib/edmxV20ToJsonV40/README.md))\r\n* OData V4 EDM model (XML Format) to OData V4 EDM (JSON Format)\r\n(details [Readme](./lib/edmxV40ToJsonV40/README.md))\r\n\r\nEach converter is contained in separate folder inside the lib folder.\r\nA detailed description of a converter is provided in the README.md\r\nof each converter sub-folder, or you may check the API documentation\r\nin the `index.js` and other files. Please note that it is also possible\r\nto compile an HTML version of the API documentation with:\r\n\r\n```\r\ncd @sap/edm-converters\r\nnpm install  # this will install the development dependencies\r\nnpm run doc      # this will generate the documentation\r\n```\r\n\r\n(If the module is installed into the global node package folder,\r\nuse `npm root -g` to find and navigate to it.)\r\n\r\n# Usage scenario\r\n\r\nThe model converters can be used to convert the OData EDMX V2 or EDMX V4 model of a remote service\r\ninto the EDM V4 JSON format. This EDM V4 JSON format can then be used with the OData Consumption library\r\nin module @sap/odata-v4 to consume remote OData services.\r\n\r\nThe converters can be called via commandline or programmtically via an API\r\n\r\n# Installation\r\n\r\nThe @sap/edm-converters provide a commandline interface and a API for use with node.\r\n\r\n## Installation commandline interface\r\n\r\nIf you want to use the commandline interface we recommend to install the @sap/edm-converters with\r\n\r\n```npm install -g @sap/edm-converters```\r\n\r\nInstalling it globally eases the usage of the converters from any folder.\r\nIf you do so, then after installation the ```convert_edm``` symlink/script should be created.\r\nYou can test this with calling ```convert_edm -v``` to show the converter version.\r\n\r\n## Installation for API usage\r\n\r\nIf you want to used the converters from your node application, then you can either install it locally or global. Just add:\r\n```js\r\nconst converters = require('@sap/edm-converters'):\r\n```\r\n\r\nThe converter can then be accessed via:\r\n```js\r\nconverters.MetadataConverterFactory.createEdmxV20ToJsonV40(<option>);\r\nor\r\nconverters.MetadataConverterFactory.createEdmxV40ToJsonV40(<option>);\r\n```\r\n\r\nPlease check the API documentation in\r\n```lib/<converter>/index.js``` for documentation about the parameters of the converter.\r\n\r\n\r\n# Console usage\r\n\r\nAll converters follow the following pattern\r\n\r\n```sh\r\nconvert_edm <converter> <file to be converted> <further arguments>\r\n```\r\nNote: Currently absolute path as well as relative path to your model is supported.\r\n\r\nCurrently the converters edmxV20ToJsonV40 and edmxV40ToJsonV40 are supported.\r\nCommon sample arguments are:\r\n\r\n* ```-i, --input <file to be converted>```\r\n  Input file to be converted\r\n* ```--inputdir <input directory>```\r\n  Containing the source files, if <file> is relative\r\n* ```-o, --output <output file>```\r\n  Target file to be generated\r\n* ```--outputdir <output directory>```\r\n  Output directory, if target file is relative or more files are generated\r\n* ```-l, --loglevel```\r\n  Use 'e'/'i'(default)/'d' to show log information (e=error-log, i=info-log ,d=debug-log)\r\n* ```-t, --target```\r\n  Omit or set to 'cs02' to produce the Oasis CSDL 4.01-CS02 format;\r\n  if the Oasis CSDL Json 4.01-CS01 format should be produced, set to 'cs01'.\r\n  The CS01 format can be used as the EDM JSON to bootstrap the Okra library.\r\n* Converters may have additional options. Please see below on how to show documentation about this converters.\r\n\r\n# Get help\r\n\r\n## Get console help:\r\n\r\n```sh\r\nconvert_edm --help\r\n```\r\n\r\n## Get distinct converter help:\r\n\r\n```sh\r\nconvert_edm edmxV40ToJsonV40 --help\r\n```\r\n\r\n# Releases and Milestones\r\n\r\n[Changelog](./CHANGELOG.md)\r\n\r\n## License\r\nThis package is provided under the terms of the [SAP Developer License Agreement](https://tools.hana.ondemand.com/developer-license-3.1.txt).\r\n"}]