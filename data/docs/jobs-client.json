[{"name":"CHANGELOG.md","content":"# Change Log\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## 1.7.30 - 2022-05-11\r\n\r\n### Added\r\n\r\n- Resolve issue with request dependency\r\n\r\n## 1.7.20 - 2022-05-06\r\n\r\n### Added\r\n\r\n- Removed deprecated npm module request\r\n- Dependency updates\r\n\r\n## 1.7.0 - 2022-04-26\r\n\r\n### Added\r\n\r\n- Support for node.js versions 12, 14 and 16\r\n\r\n## 1.6.3 - 2021-10-19\r\n\r\n### Added\r\n\r\n- Support for token fetching via mTLS if certificates are present in the jobscheduler binding credentials\r\n- Dependency update\r\n\r\n## 1.6.1 - 2020-10-29\r\n\r\n### Added\r\n\r\n- Dependency upgrade: \"request\": \"2.88.2\"\r\n\r\n## 1.6.0 - 2020-10-22\r\n\r\n### Added\r\n\r\n- Support for Node 14\r\n- Dependency update\r\n\r\n## 1.5.3 - 2020-06-17\r\n\r\n### Added\r\n\r\n- license file: developer-license-3.1.txt\r\n\r\n## 1.5.2 - 2020-05-08\r\n\r\n### Added\r\n\r\n- Dependency update\r\n\r\n## 1.5.1 - 2020-02-13\r\n\r\n### Fixed\r\n\r\n- Missing changelog\r\n\r\n## 1.5.0 - 2020-02-10\r\n\r\n### Added\r\n\r\n- Support for node 10 and node 12\r\n\r\n## 1.4.1 - 2019-12-10\r\n\r\n### Fixed\r\n\r\n- Integrate npm-shrinkwrap.json file without integrity checksums.\r\n\r\n## 1.4.0 - 2019-11-19\r\n\r\n### Added\r\n\r\n- Fetch OAuth token from XSUAA or username/password from environment if not passed in constructor.\r\n- Retrieve baseURL from environment if not passed in constructor.\r\n\r\n## 1.3.6 - 2018-12-11\r\n\r\n### Added\r\n\r\n- Added optional query parameters for fetchAllJobs method.\r\n- Added multitenancy support\r\n\r\n## 1.3.4 - 2018-08-14\r\n\r\n### Fixed\r\n\r\n- Update request package to v2.88.0\r\n\r\n## 1.3.3 - 2018-08-08\r\n\r\n### Fixed\r\n\r\n- Update request package to v2.87.0\r\n\r\n## 1.3.2 - 2018-05-18\r\n\r\n### Fixed\r\n\r\n- Update request package to v2.86.0\r\n\r\n## 1.3.1 - 2018-04-05\r\n\r\n### Fixed\r\n\r\n- Update npm-shrikwrap.json\r\n\r\n## 1.3.0 - 2018-01-19\r\n\r\n### Added\r\n\r\n- npm-shrikwrap.json\r\n\r\n### Fixed\r\n\r\n- Update _request_ to 2.83.0\r\n\r\n## 1.2.0 - 2017-11-16\r\n\r\n### Added\r\n\r\n- Node.js 8 support\r\n- Improvements in the input validation messages\r\n- Support for `page_size` and `offset` parameters in `getRunLogs`\r\n\r\n## 1.1.1 - 2017-05-30\r\n\r\n### Fixed\r\n\r\n- Dependencies updates\r\n\r\n## 1.1.0 - 2017-03-30\r\n\r\n### Added\r\n\r\n- Delete Job\r\n- Bulk schedule activation/deactivation\r\n- Get active/inactive job count\r\n- Get job/schedule action logs\r\n- Bulk schedule deletion\r\n- Fetch all jobs\r\n- Search API\r\n"},{"name":"lib","nodes":[{"name":"request","nodes":[{"name":"README.md","content":"# request\r\n\r\nRequest module to execute http request\r\n\r\n```js\r\nconst response = await new Request(options).execute();\r\n```\r\n\r\n## options\r\n\r\n- @param {object} options - The request options\r\n- @param {string} options.url - The url must be a valid url. Otherwise the contructor throws an error\r\n- @param {string} [options.method=GET] - The http method. Defaults to 'GET'\r\n- @param {object} [options.headers] - The http headers. This object is treated as key-value-pairs. Each key is the header name and the value is its value.\r\n- @param {object} [options.body] - The http body to send. If the body is typeOf object, the value is stringified before sending and the header 'content-type' is set to 'application/json'. If the body is typeOf string the header 'content-type' is set to 'text/plain'\r\n- @param {number} [options.timeout] - A number specifying the socket timeout in milliseconds. This will set the timeout before the socket is\r\n  connected. See https://nodejs.org/dist/latest-v16.x/docs/api/http.html#httprequesturl-options-callback\r\n- @param {number} [options.responseTimeout] - A number specifying the total response timeout in milliseconds. If the response is not finished after this period the request is destroyed. A possible socket timeout is included.\r\n- @param {string} [options.cert] - A public key/certificate\r\n- @param {string} [options.key] - A private key\r\n- @param {string} [options.ca] - See https://nodejs.org/dist/latest-v16.x/docs/api/https.html#httpsrequesturl-options-callback\r\n- @param {objstringect} [options.ciphers] - See https://nodejs.org/dist/latest-v16.x/docs/api/https.html#httpsrequesturl-options-callback\r\n- @param {string} [options.passphrase] - See https://nodejs.org/dist/latest-v16.x/docs/api/https.html#httpsrequesturl-options-callback\r\n- @param {boolean} [options.rejectUnauthorized] - See https://nodejs.org/dist/latest-v16.x/docs/api/https.html#httpsrequesturl-options-callback\r\n- @param {object} [options.form] - This object is treated as key-value-pairs and used in form-url-encoded payload. UriEncoding is done automatically. The header 'content-type' is set to 'application/x-www-form-urlencoded'\r\n- @param {number|boolean} [options.followRedirect=true] - Follow redirects or not. If a number is provided it follows all redirects until the amount of this number is reached. The absolute amount of redirects is 10.\r\n- @param {object|boolean} [options.csrf] - If set, executes csrf token fetch. If set to true all values are using their defaults.\r\n- @param {assertCallback} [options.csrf.assert] - If set, expects returning a boolean. True will try to fetch csrf a token, false will not try to fetch a csrf token.\r\n- @param {number[]} [options.csrf.fetchOnStatusCodes=[401,403]] - If the returning status code of the first response will be within this array, a new csrf token will be fetched.\r\n- @param {string} [options.csrf.method=HEAD] - If the returning status code of the first response will be within this array, a new csrf token will be fetched.\r\n- @param {string} [options.csrf.url] - The http url to be used to fetch the csrf token from.\r\n- @param {object} [options.retry] - If a request fails executes a new request until the conditions are met.\r\n- @param {number} [options.retry.count] - This amount of retries should be done until the request fails completly.\r\n- @param {timeoutStrategyCallback} [options.retry.timeoutStrategy] - How many milliseconds to wait until the next request will be executed\r\n- @param {validateCallback} [options.retry.validate] - Can validate each response. If an error is thrown the retry feature continous retrying the request\r\n- @param {object} [options.basic] - Providing authentication mechanim\r\n- @param {string} [options.basic.user] - Provides the plain user for basic auth\r\n- @param {string} [options.basic.password] - The plain password for basic auth\r\n- @param {object} [options.oauth] - Providing authentication mechanim\r\n- @param {string} [options.oauth.bearer] - Provides the plain bearer access token and sets the Auhtorization header\r\n- @param {string} [options.oauth.clientId] - The client id to get an access token\r\n- @param {string} [options.oauth.clientSecret] - The client secret to get an access token\r\n- @param {string} [options.oauth.tokenUrl] - The token url to get an access token from\r\n\r\n## response\r\n\r\n### response.body: object\r\n\r\nThe response body if the response payload is a json value\r\n\r\n### response.text: string\r\n\r\nThe response body as a string\r\n\r\n### response.statusCode: number\r\n\r\nThe http response status code\r\n\r\n### response.headers: key<string>=value<string>\r\n\r\nA key-value-pair of all available response headers\r\n"}]}]},{"name":"README.md","content":"@sap/jobs-client\r\n================\r\n\r\nNode.js client for XS Advanced Job Scheduler service.\r\n\r\nThis is a small Node.js module to integrate jobs in your Node.js application.\r\nThe module contains utilities to create REST calls in the request format\r\nexpected by the job scheduler service to register/unregister jobs in\r\njob scheduler service, update job schedules and job status.\r\n\r\n## Usage\r\n\r\n### General\r\n\r\nThis module works with job descriptor objects, having the properties as\r\nexpected by the respective service in JobScheduler.\r\n\r\n### Constructor\r\n\r\nThe constructor instantiates a job scheduler client object.\r\n\r\nIf there is exactly one service binding to the job scheduler service,\r\nall necessary information is read from the binding information:\r\nif OAuth is configured, the client requests an access token from the\r\nbound identity provider; otherwise, user name and password are taken\r\nfrom the cloud environment.\r\n\r\nIn other cases, the constructor requires an options object that must\r\nat least contain the base URL of the job scheduler service and the\r\nnecessary authentication information, either an OAuth token or\r\nuser name and password.\r\n\r\nThe following properties can be set in the constructor options:\r\n\r\nname     | description\r\n----     | -----------\r\nbaseURL  | the base URL of the job scheduler service\r\ntimeout  | HTTP request timeout in milliseconds, default 15000\r\ntoken    | OAuth access token for the job scheduler service\r\nuser     | user name for the job scheduler service (if basic authentication is used)\r\npassword | password for the job scheduler service (if basic authentication is used)\r\n\r\n\r\nExample usage with bound job scheduler service:\r\n\r\n```js\r\n  const JobSchedulerClient = require('@sap/jobs-client');\r\n  const scheduler = new JobSchedulerClient.Scheduler();\r\n```\r\n\r\nExample usage with Basic Authentication:\r\n\r\n```js\r\n  const JobSchedulerClient = require('@sap/jobs-client');\r\n\r\n  const options = {\r\n    baseURL: 'https://apphost:port/',\r\n    user: '<username>',\r\n    password: '<password>'\r\n  };\r\n  const scheduler = new JobSchedulerClient.Scheduler(options);\r\n```\r\n\r\nExample usage with OAuth:\r\n\r\n```js\r\n  const JobSchedulerClient = require('@sap/jobs-client');\r\n\r\n  const options = {\r\n    baseURL: 'https://apphost:port/',\r\n    token: '<token>'\r\n  };\r\n  const scheduler = new JobSchedulerClient.Scheduler(options);\r\n```\r\n\r\n### Create job\r\n\r\n```js\r\n  var myJob = { /* according to job scheduler documentation */ };\r\n  var scJob = { job: myJob };\r\n\r\n  scheduler.createJob(scJob, function (error, body) {\r\n    if (error) {\r\n      return console.log('Error registering new job %s', error);\r\n    }\r\n    // job was created successfully\r\n    job.id = body._id;\r\n  });\r\n```\r\n\r\n### Update job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33,\r\n    job: {\r\n      user : 'John',\r\n      password : 'secret',\r\n      active : 1\r\n    }\r\n  };\r\n  scheduler.updateJob(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error updating job: %s', err);\r\n    }\r\n    //job was updated successfully\r\n  });\r\n```\r\n\r\n### Delete job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33\r\n  };\r\n  scheduler.deleteJob(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error deleting job: %s', err);\r\n    }\r\n    //job was deleted successfully\r\n  });\r\n```\r\n\r\n### Get job Details\r\n\r\n```js\r\n  var req = {\r\n    //by Id\r\n    jobId: 33\r\n  };\r\n  scheduler.fetchJob(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving job: %s', err);\r\n    }\r\n    //job details retrieved successfully\r\n  });\r\n  var req = {\r\n    //by name\r\n    name: 'my job'\r\n  };\r\n  scheduler.fetchJob(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving job: %s', err);\r\n    }\r\n    //job details retrieved successfully\r\n  });\r\n```\r\n\r\n### Create job schedule\r\n\r\n```js\r\n  var mySchedule = { /* according to job scheduler documentation */ }\r\n  var req = {\r\n    jobId: 33,\r\n    schedule: mySchedule\r\n  };\r\n  scheduler.createJobSchedule(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error creating job schedule: %s', err);\r\n    }\r\n    //Schedule created successfully\r\n  });\r\n```\r\n\r\n### Update job schedule\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33,\r\n    scheduleId: 'ABC-DEF',\r\n    schedule: {\r\n      cron: \"* * * * 4\"\r\n    }\r\n  };\r\n  scheduler.updateJobSchedule(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error updating job schedule: %s', err);\r\n    }\r\n    //Schedule updated successfully\r\n  });\r\n```\r\n\r\n###Delete job schedule\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33,\r\n    scheduleId: 'ABC-DEF'\r\n  };\r\n  scheduler.deleteJobSchedule(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error deleting schedule: %s', err);\r\n    }\r\n    //Schedule deleted successfully\r\n  });\r\n```\r\n\r\n### Get all jobs\r\n\r\n```js\r\n  var req = {};\r\n  scheduler.fetchAllJobs(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving jobs: %s', err);\r\n    }\r\n    //Jobs retrieved successfully\r\n  });\r\n```\r\n\r\n### Get job schedule details\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33,\r\n    scheduleId: 'ABC-DEF',\r\n    displayLogs: false\r\n  };\r\n  scheduler.fetchJobSchedule(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving schedule: %s', err);\r\n    }\r\n    //Schedule retrieved successfully\r\n  });\r\n```\r\n\r\n### Get schedules of job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33\r\n  };\r\n  scheduler.fetchJobSchedules(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving all schedules: %s', err);\r\n    }\r\n    //All schedules retrieved successfully\r\n  });\r\n```\r\n\r\n### Update run log of schedule\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33,\r\n    scheduleId: 'ABC-DEF',\r\n    runId: 1,\r\n    data: data\r\n  };\r\n  scheduler.updateJobRunLog(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error updating run log: %s', err);\r\n    }\r\n    //Run log updated successfully\r\n  });\r\n```\r\n\r\n### Get run logs of schedule\r\n\r\n```js\r\n  var req = {\r\n    jobId: 33,\r\n    scheduleId: 'ABC-DEF',\r\n    page_size: 15,\r\n    offset: 0\r\n  };\r\n  scheduler.getRunLogs(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving run logs: %s', err);\r\n    }\r\n    //Run log retrieved successfully\r\n  });\r\n```\r\n\r\n### Delete all schedules of job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 3\r\n  };\r\n  scheduler.deleteAllJobSchedules(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error deleting schedules: %s', err);\r\n    }\r\n    //All schedules deleted successfully\r\n  });\r\n```\r\n\r\n### Bulk activation of schedules of job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 3\r\n  };\r\n  scheduler.activateAllSchedules(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error activating bulk schedules: %s', err);\r\n    }\r\n    //All schedules activated successfully\r\n  });\r\n```\r\n\r\n### Bulk deactivation of schedules of job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 3\r\n  };\r\n  scheduler.deactivateAllSchedules(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error deactivating bulk schedules: %s', err);\r\n    }\r\n    //All schedules deactivated successfully\r\n  });\r\n```\r\n\r\n### Get action logs of job\r\n\r\n```js\r\n  var req = {\r\n    jobId: 3\r\n  };\r\n  scheduler.getJobActionLogs(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving action logs: %s', err);\r\n    }\r\n    //All actionlogs logs retrieved successfully\r\n  });\r\n```\r\n\r\n### Get action logs of schedule\r\n\r\n```js\r\n  var req = {\r\n    jobId: 3,\r\n    scheduleId: \"ABC-DEF\"\r\n  };\r\n  scheduler.getScheduleActionLogs(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving action logs: %s', err);\r\n    }\r\n    //All actionlogs logs retrieved successfully\r\n  });\r\n```\r\n\r\n### Get active and inactive jobcount\r\n\r\n```js\r\n  var req = {\r\n    activeStatus: true // true- for getting active number of jobs and false- for getting inactive number of jobs\r\n  };\r\n  scheduler.getJobCount(req, function(err, result) {\r\n    if (err) {\r\n      return console.log('Error retrieving jobcount: %s', err);\r\n    }\r\n    //Active Job count retrieved successfully\r\n  });\r\n```\r\n\r\n### Search API\r\n\r\nSearch can be done in both job and schedule entities.\r\nHere in the client 'q' contains the query parameter,\r\nyou need to provide the query in decoded format,\r\nthe client will decode the query.\r\nAnd filtering parameters can be provided as shown below:\r\n\r\n```js\r\nvar searchToken = {\r\n    q : 'job startTime:>2011-02-18 active:false',\r\n    displaySchedules : 'false',\r\n    offset : 0,\r\n    page_size : 5\r\n  };\r\n\r\n  scheduler.searchJobs(searchToken,function(error,result) {\r\n      if (error) {\r\n        return console.log('Error during Job search: %s',error);\r\n      }\r\n      console.log(JSON.stringify(result));\r\n  });\r\n  ```\r\n\r\n  For schedule search:\r\n\r\n  ```js\r\n  var searchScheduleToken = {\r\n    q : 'startTime:>2011-02-18 active:false',\r\n    offset : 0,\r\n    page_size : 5\r\n  };\r\n\r\n  scheduler.searchSchedules(searchScheduleToken,function(error,result) {\r\n      if (error) {\r\n        return console.log('Error during Schedule search %s',error);\r\n      }\r\n      console.log(JSON.stringify(result));\r\n  });\r\n  ```\r\n"}]