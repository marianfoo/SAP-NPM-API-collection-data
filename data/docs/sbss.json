[{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## 5.3.1 - 2022-04-11\r\n\r\n### Removed\r\n- Removed node 8.x support and tests\r\n \r\n### Changed\r\n- Changed istanbul test framework with c8\r\n \r\n## 5.3.0 - 2022-01-30\r\n\r\n### Fixed\r\n- Update `@sap/hdbext` to 7.6.0\r\n- Update `debug` to 4.3.3\r\n\r\n### Added\r\n- Node.js 16 support\r\n\r\n## 5.2.0 - 2021-10-08\r\n\r\n### Added\r\n- Added ssl certificate option \r\n\r\n## 5.1.1 - 2021-01-22\r\n\r\n### Fixed\r\n- Update `@sap/hdbext` to 7.1.3\r\n- Update `lodash` to 4.17.21\r\n\r\n## 5.1.0 - 2021-01-13\r\n\r\n### Fixed\r\n- Update `@sap/hdbext` to 7.1.0 to support Node.js 14\r\n- Update `lodash` to 4.17.20\r\n- Update `debug` to 4.2.0\r\n\r\n### Added\r\n- Node.js 14 support\r\n\r\n## 5.0.0 - 2020-08-25\r\n\r\n### Fixed\r\n- Update `@sap/hdbext` to 7.0.0 to fix dependency to an old lodash version\r\n\r\n### Removed\r\n- Support for Node.js 6\r\n\r\n### Added\r\n- Node.js 12 support\r\n\r\n## 4.1.2 - 2020-07-30\r\n\r\n### Fixed\r\n- Update `lodash` to 4.17.19\r\n\r\n## 4.1.1 - 2019-07-11\r\n\r\n### Fixed\r\n- Update `lodash` to 4.17.13\r\n- Update `@sap/hdbext` to 6.0.1\r\n\r\n## 4.1.0 - 2019-05-21\r\n\r\n### Added\r\n- Node.js 10 support. **Note**: To use SBSS on HANA with Node.js 10,\r\na version of `@sap/hdbext` (peer dependency of `@sap/sbss`) that supports Node 10 should be added to application's dependencies.\r\nRefer to the _package.json_ file of `@sap/sbss` for the version range of `@sap/hdbext`.\r\n\r\n## 4.0.1 - 2019-02-15\r\n\r\n### Fixed\r\n- Closed idle connection left from SBSS version check on PostgreSQL client\r\n- Added `'error'` event handler on connection pool of PostgreSQL client\r\n\r\n<a name=\"4.0.0\"></a>\r\n## 4.0.0 - 2019-01-18\r\n\r\n### Removed\r\n- The `createCredentials(instanceId, bindingId, callback)` signature\r\n- Support for Node.js v4\r\n\r\n### Changed\r\n- `@sap/hdbext` is now declared as a peer dependency\r\n\r\n### Fixed\r\n- Supported Node.js versions field in _package.json_\r\n\r\n## 3.4.0 - 2019-01-07\r\n\r\n### Added\r\n- Support for Postgre SBSS v1.3 (since SBSS 1.5.11)\r\n\r\n## 3.3.0 - 2018-10-01\r\n\r\n### Added\r\n- Switch to @sap/hana-client via @sap/hdbext version 5.0.0\r\n\r\n## 3.2.2 - 2018-09-19\r\n\r\n### Fixed\r\n- Update `lodash` to 4.17.11\r\n- Update `@sap/hdbext` to 4.7.5\r\n\r\n## 3.2.1 - 2018-04-05\r\n\r\n### Fixed\r\n- Update dependencies\r\n\r\n## 3.2.0 - 2018-02-19\r\n\r\n### Added\r\n - Support for PostgreSQL restricted user credentials\r\n - npm-shrinkwrap.json\r\n\r\n## 3.1.1 - 2017-08-28\r\n\r\n### Fixed\r\n- Updated documentation with new SBSS features\r\n- `options.appGuid` argument to `createCredentials` is now optional also with PostgreSQL\r\n\r\n## 3.1.0 - 2017-08-25\r\n\r\n### Added\r\n- Support new SBSS version (both HANA and PostgreSQL)\r\n- Use connection pooling with HANA\r\n\r\n### Fixed\r\n- Fix code execution vulnerability https://node-postgres.com/announcements#2017-08-12-code-execution-vulnerability\r\n\r\n## 3.0.0 - 2017-05-09\r\n\r\n### Changed\r\n- Renamed property `user` to `username` in the result of `createCredentials`\r\n\r\n## 2.0.0 - 2017-05-03\r\n\r\n### Changed\r\n- Renamed function `deleteBindingCredentials` to `deleteCredentials`\r\n"},{"name":"migration.md","content":"# Migration Guide\r\n\r\n## Version 3 ==> Version 4\r\n\r\n### `@sap/hdbext` is now a peer dependency\r\n\r\nApplications that make use of PostgreSQL will benefit from faster deploy times.\r\nApplications that make use of HANA will need to explicitly specify `@sap/hdbext`\r\nas a dependency.\r\nSee the required version range in the _package.json_ file of `@sap/sbss`.\r\n\r\n### Signature `createCredentials(instanceId, bindingId, callback)` is now removed\r\n\r\nUse `createCredentials({ instanceId, bindingId }, callback)` instead.\r\n"},{"name":"README.md","content":"# @sap/sbss\r\nNode.js client library for SBSS (Service Broker Security Support)\r\n\r\nSBSS provides secure generation, storage and validation of credentials (user name and password).\r\nThis functionality is aimed at service implementations to protect access to their resources.\r\nSee [Custom Services](https://docs.cloudfoundry.org/services/) in Cloud Foundry documentation for detailed description how to provide custom services.\r\n\r\nSBSS uses a database to do its job and provides a DB API in the form of stored procedures and views.\r\nThis package provides a JavaScript API to access SBSS.\r\n\r\n## Requirements\r\n\r\nSBSS should be installed and configured. The credentials to access it should be available.\r\n\r\n## Install\r\n```sh\r\nnpm install --save @sap/sbss\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar sbssLib = require('@sap/sbss');\r\nvar xsenv = require('@sap/xsenv');\r\nvar assert = require('assert');\r\n\r\nvar options = xsenv.cfServiceCredentials({ tag: 'hana', plan: 'sbss' });\r\nvar sbss = sbssLib(options);\r\n\r\nfunction generateCredentials(options, cb) {\r\n  sbss.createCredentials({\r\n    instanceId: options.instanceId,\r\n    bindingId: options.bindingId,\r\n    serviceId: options.serviceId,\r\n    planId: options.planId,\r\n    appGuid: options.appGuid,\r\n    subaccountId: options.subaccountId\r\n  }, (err, credentials) => {\r\n    if (!err) {\r\n      // credentials.username - generated user name\r\n      // credentials.password - generated password\r\n    }\r\n    cb(err);\r\n  });\r\n}\r\n\r\nfunction validateCredentials(username, password, cb) {\r\n  sbss.validateCredentials(username, password, (err, result) => {\r\n    if (!err) {\r\n      // provided credentials are valid\r\n      // result.instanceId - instanceId provided to createCredentials that generated these credentials\r\n      // result.bindingId - bindingId provided to createCredentials that generated these credentials\r\n      // result.serviceId - serviceId provided to createCredentials that generated these credentials\r\n      // result.planId - planId provided to createCredentials that generated these credentials\r\n      // result.appGuid - appGuid provided to createCredentials that generated these credentials\r\n      // result.subaccountId - subaccountId provided to createCredentials that generated these credentials\r\n    }\r\n    cb(err);\r\n  });\r\n}\r\n```\r\n\r\n## API\r\n\r\n### `sbss(options)`\r\n* `options` - database connection options, normally the `credentials` object of a SAP HANA or PostgreSQL service binding.\r\n\r\nConstructs and returns a new SBSS client. All subsequent functions are accessed through this object.\r\n\r\n**Note:** When using PostgreSQL it is recommended to provide restricted DB user credentials via the `restrictedUser` property. When `restrictedUser` property is present it is mandatory to specify both `restricted-dbuser-name` and the corresponding `restricted-dbuser-password`. They are normally taken from the user-provided service used when populating PostgreSQL schema with SBSS stored procedures.\r\n\r\n* `options`\r\n  * `<postgres service credentials>`\r\n  * `restrictedUser`\r\n    * `restricted-dbuser-name`\r\n    * `restricted-dbuser-password`\r\n\r\nSample usage:\r\n\r\n```js\r\nvar sbssLib = require('@sap/sbss');\r\nvar xsenv = require('@sap/xsenv');\r\n\r\nvar options = xsenv.cfServiceCredentials({ label: 'postgresql', tag: 'sbss' });\r\noptions.restrictedUser = xsenv.cfServiceCredentials('restriced-dbuser-ups');\r\nvar sbss = sbssLib(options);\r\n```\r\n\r\n### `createCredentials(options, callback)`\r\n* `options`\r\n  * `instanceId` - {string} service instance ID\r\n  * `bindingId` - {string} service binding ID\r\n  * `serviceId` - {string} service ID\r\n  * `planId` - {string} service plan ID\r\n  * `appGuid` - {string} (optional) application guid\r\n  * `subaccountId` - {string} subaccount ID (only supported on PostgreSQL)\r\n* `callback` - `function(error, credentials)`\r\n  * `error` - Error object in case of error, `null` or `undefined` otherwise\r\n  * `credentials` - {object}\r\n    * `username` - {string} generated user name\r\n    * `password` - {string} generated password\r\n\r\nGenerates a new set of credentials and persists them in the database together with the given `options`.\r\nIt is possible to generate multiple credentials for the same instance ID and binding ID.\r\n\r\n**Note:** If SBBS version is older than 1.5.4, then `serviceId`, `planId` and `appGuid` options will not be persisted.\r\n**Note:** If SBBS version is older than 1.5.11, then `subaccountId` will not be persisted.\r\n\r\n### `deleteCredentials(instanceId, bindingId, callback)`\r\n* `instanceId` - {string} service instance ID\r\n* `bindingId` - {string} service binding ID\r\n* `callback` - `function(error, result)`\r\n  * `error` - Error object in case of error, `null` or `undefined` otherwise\r\n  * `result` - {object}\r\n    * `deletedCredentials` - number of deleted credentials, 0 if there are no credentials to delete\r\n\r\nDeletes all previously generated credentials for the given `instanceId` and `bindingId`.\r\n\r\n### `deleteAllInstanceCredentials(instanceId, callback)`\r\n* `instanceId` - {string} service instance ID\r\n* `callback` - `function(error, result)`\r\n  * `error` - Error object in case of error, `null` or `undefined` otherwise\r\n  * `result` - {object}\r\n    * `deletedCredentials` - number of deleted credentials, 0 if there are no credentials to delete\r\n\r\nDeletes all previously generated credentials for the given `instanceId` no matter the binding ID.\r\n\r\n### `validateCredentials(username, password, callback)`\r\n* `username` - {string} user name\r\n* `password` - {string} password\r\n* `callback` - `function(error, result)`\r\n  * `error` - Error object in case of error, `null` or `undefined` otherwise\r\n  * `result` - {object}\r\n    * `instanceId`- {string} service instance ID associated with the given credentials\r\n    * `bindingId` - {string} service binding ID associated with the given credentials\r\n    * `serviceId` - {string} (optional) service ID\r\n    * `planId` - {string} (optional) service plan ID\r\n    * `appGuid` - {string} (optional) application guid\r\n    * `subaccountId` - {string} (optional) subaccount ID\r\n\r\nChecks if the given credentials match any previously generated credentials. If a match is found,\r\nthe `callback` is called with the associated instance ID and binding ID. Otherwise it is called with an error.\r\n\r\n**Note:** `serviceId`, `planId` and `appGuid` options will not be provided if:\r\n * the credentials are generated with versions of SBSS before 1.5.4, or\r\n * the credentials are generated via the `createCredentials({ instanceId, bindingId }, callback)` call.\r\n\r\n**Note:** `subaccountId` will not be provided if:\r\n  * the credentials are generated with versions of SBSS before 1.5.11\r\n  * the credentials are generated with SBSS on HANA\r\n  * the property is not provided in the call to `createCredentials`\r\n\r\n## Troubleshooting\r\n\r\nTo enable debug traces set this environment variable:\r\n```\r\nDEBUG=sbss\r\n```\r\n"}]