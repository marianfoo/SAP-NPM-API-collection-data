[{"name":".github","nodes":[{"name":"PULL_REQUEST_TEMPLATE.md","content":"[MDK-{number}] A short and precise title for a JIRA item or JIRA item: <https://sapjira.wdf.sap.corp/browse/MDK-XXX>\r\n\r\nPlease explain why are you making this change:\r\nFor bug fixes:\r\nExplain what's the root cause of this bug and what is the change done to fix the issue.\r\n\r\nChecklist:\r\n- [ ] If I want to merge the changes to master branch, I have to pass the regression test of dev build from dev branch on BAS . \r\n- [ ] I have run Unit Test in my local, all tests passed.\r\n"}]},{"name":"lib","nodes":[{"name":"bundler","nodes":[{"name":"README.md","content":"# Install instructions\r\n\r\nFrom the *application-bundler* folder\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\n## How to run\r\n\r\nAll commands should be run from the *application-bundler* folder.\r\n\r\n#### With settings file\r\n\r\n```bash\r\nnode bundler-cli\r\n```\r\n\r\nWhere settings.json is a file in the current directory which contains the following:\r\n\r\n```json\r\n{\r\n  \"create-bundle\": false,\r\n  \"editor-export\": \"\",\r\n  \"externals\": [\r\n    \"tns-core-modules/file-system\",\r\n    \"tns-core-modules/ui/dialogs\"\r\n  ],\r\n  \"nativescript-project\": \"/path/to/nativescript-project-directory\",\r\n  \"seam-project\": \"/path/to/seam-project-directory\",\r\n  \"watch\": false\r\n}\r\n```\r\n\r\nThe settings.json file is the assumed settings file path, but you can specify a custom path with the --settings-file argument. In this example, editor-export is ignored because it's empty.\r\n\r\n#### With command line arguments\r\n\r\n```bash\r\nnode bundler-cli --nativescript-project /path/to/nativescript-project-directory --seam-project /path/to/seam-project-directory --externals tns-core-modules/file-system tns-core-modules/ui/dialogs\r\n```\r\n\r\n## Argument details\r\n* `bundle-output-name` Output filename of bundle. If not specified, uses the default `bundle.js` name\r\n* `create-bundle` If this option is specified, a new zip file will be created called uploadBundle.zip. This can be used to upload the application bundle to HCP. Also, if this is specified, the application will not be copied to the NativeScript project path.\r\n* `editor-export` Path of the zip file exported from WebIDE which contains an application. If this is specified, the zipped application is what gets bundled and the seam-project option is ignored.\r\n* `externals` List of NativeScript modules to be excluded from the bundle. Use this option for dependencies you expect to be in the environment when the application is built. If not specified, the values \"tns-core-modules/file-system\" and \"tns-core-modules/ui/dialogs\" are used.\r\n* `help` Prints the usage guide.\r\n* `nativescript-project` The location of the NativeScript project's app folder. As long as the create-bundle option isn't specified, the application bundle is copied here.\r\n* `settings-file` Path of the settings JSON file containing other options. If this is specified, all other command line arguments are ignored.\r\n* `seam-project` The location of the application definitions. Used to generate the bundle unless editor-export is specified. If the metadata application uses components, this path should be to the base project.\r\n* `watch` If this option is specified, the script will watch for changes in the input files. If editor-export is also specified, any updates to the export zip file will cause the application to be rebundled. If editor-export is not specified, any changes to project files in the seam-project directory will cause the application to be rebundled under incremental mode. Use `watch` mode, application-bundler will keep to track and don't quit until users terminate it actively.\r\n* `devtool` Choose a style of source mapping to enhance the debugging process. If it is specified, e.g. \"source-map\", the source map file of bundle will be generated as well. Please check the webpack devtool configuration for all the available options.\r\n* `bundle-target-path` The location of the target folder for bundle task. It is only for MDK VSCode extension. If this is specified, the bundle.js (and the bundle.js.map) will be copied into it.\r\n\r\nIf no arguments are specified, a default argument \"--settings-file settings.json\" is used.\r\n\r\n## Installing as a global executable\r\n\r\nYou can install the application-bundler as an executable by running the following in the *application-bundler* folder:\r\n\r\n```bash\r\nnpm link\r\n```\r\n\r\nThis command tells NPM to use symlinks to make the CLI available globally with the name *application-bundler*. This is useful if you want to run the bundler from a project directory. For example, if your project has a properly configured *settings.json* file, you can simply run:\r\n\r\n```bash\r\napplication-bundler\r\n```\r\n"}]}]},{"name":"README.md","content":"# MDK Tools\r\nIt provides the CLI to assist Mobile Development Kit (MDK) application developers throughout the development lifecycle to:\r\n- deploy MDK metadata project to SAP Business Technology Platform (BTP) Cloud Foundry environment,\r\n    - Mobile Services to run as mobile application\r\n    - HTML5 repository to run as web application\r\n\r\n## Setup\r\n\r\n- Prerequisites\r\n    - Node 12 or higher version\r\n    - [Space Developer role]( https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/09076385086b4da3bd1808d5ef572862.html) assigned to your user\r\n    - [Cloud Foundry CLI](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html)\r\n    - Logon to Cloud Foundry by 'cf login'\r\n    - MDK metadata project\r\n    - [MTA Build Tool](https://sap.github.io/cloud-mta-build-tool/) (required for MDK web deployment)\r\n    - MultiApps CF CLI Plugin (required for MDK web deployment)\r\n        ```bash\r\n        cf install-plugin -r CF-Community \"multiapps\"\r\n        ```\r\n    - CF HTML5 Applications Repository CLI Plugin (required for MDK web deployment)\r\n        ```bash\r\n        cf install-plugin -r CF-Community \"html5-plugin\"\r\n        ```\r\n- Install\r\n    ```bash\r\n    npm install @sap/mdk-tools -g\r\n    ```\r\n## Features\r\n\r\n- Builder\r\n\r\n    You can build metadata project into js or zip file.\r\n    - target\r\n\r\n        Target 'js' can build to bundle.js and bundle.js.map, you can use it to update your local run project.   \r\n        Target 'zip' can build to uploadBundle.zip, you can uploaded it to Mobile Services.\r\n        \r\n        The build results are generated in .build folder under project.\r\n    - project\r\n\r\n        Metadata project, it's current folder if not provided.\r\n\r\n    - externals\r\n\r\n        Libs need to be ignored in webpack bundle process. The built-in externals are:\r\n        - @nativescript/core\r\n        - mdk-core\r\n\r\n        ```bash\r\n        mdk build --target zip --externals \"@nativescript/geolocation\" \"external2\"\r\n        ```\r\n\r\n    - filters\r\n\r\n        Project folders/files need to be filtered in bundle procees. The built-in filters are:\r\n        - /Web/\r\n\r\n        ```bash\r\n        mdk build --target zip --filters \"/FolderA/\" \"/FolderB/readme.txt\"\r\n        ```\r\n\r\n    ```bash\r\n    mdk build --target js\r\n    mdk build --target js  --project /path/to/Your-MDK-metadata-project \r\n    mdk build --target zip --project /path/to/Your-MDK-metadata-project\r\n    ```\r\n    \r\n\r\n- Deployer\r\n\r\n    You can deploy MDK metadata project directly to SAP Business Technology Platform (BTP) Cloud Foundry and NEO environment.\r\n    - Deploy to Mobile Services on Cloud Foundry to run it as a mobile application\r\n\r\n        It bundles MDK metadata project, uploads to Mobile Services and publishes it.\r\n        The name option is the application id in Mobile Services. If there's no *name* argument, it reads *MobileService:AppId* from *\\.project.json* file (applicable to MDK metadata project exported from SAP Business Application Studio). If there's no *project* argument, it reads *current folder* as *MDK metadata folder*.\r\n\r\n        >In case of MDK metadata project exported from SAP Web IDE, *name* argument is mandatory.\r\n\r\n        ```bash\r\n        mdk deploy --target mobile --name \"com.mdk.myapp\" \r\n        mdk deploy --target mobile --name \"com.mdk.myapp\" --project /path/to/Your-MDK-metadata-project\r\n        mdk deploy --target mobile --name \"com.mdk.myapp\" --project /path/to/Your-MDK-metadata-project --showqr\r\n        ```\r\n\r\n        If your Mobile Services is Preview version, you can add *--preview* option.\r\n        ```bash\r\n        mdk deploy --target mobile --name \"com.mdk.myapp\" --preview\r\n        ```\r\n        In case of deploying MDK bundle zip exproted from SAP Web IDE or Business Application Studio.\r\n        ```\r\n        mdk deploy --target mobile --name \"com.mdk.myapp\" --zip Your-MDK-bundle-zip-file\r\n        ```\r\n\r\n    - Deploy to Mobile Services on NEO to run it as a mobile application    \r\n        - Prerequisites\r\n            - NEO Mobile Services Admin API URL\r\n            - Admin user name and password\r\n        ```bash\r\n            mdk deploy --target mobile --name \"com.mdk.myapp\" --project /path/to/Your-MDK-metadata-project --neo \r\n        ```\r\n        The above example prompts user password input, reads adminApi and user from .project.json, if can't find them, then prompts user input. \r\n\r\n        ```bash\r\n            mdk deploy --target mobile --name \"com.mdk.myapp\" --neo --adminApi YourAdminAPI --user YourUserName --pwd YourPassword\r\n        ```\r\n        The above example starts deploy without prompts.\r\n\r\n    - Deploy to HTML5 repository on Cloud Foundry to run it as web application\r\n\r\n        It bundles MDK metadata project, builds it to MTA project and deploys to HTML5 repository.\r\n        The name option is the application name in SAP BTP cockpit. If there is no *name* argument, it reads *CF:Deploy:Name* from *\\.project.json* file (applicable to MDK metadata project exported from SAP Business Application Studio). If there's no *project* argument, it reads *current folder* as *MDK metadata folder*.\r\n\r\n        >In case of MDK metadata project exported from SAP Web IDE, *name* argument is mandatory.\r\n\r\n        ```bash\r\n        mdk deploy --target cf --name \"MyWebApplication\"\r\n        mdk deploy --target cf --name \"MyWebApplication\" --project /path/to/Your-MDK-metadata-project \r\n        ```\r\n        \r\n- Migrator\r\n\r\n    Migrate the MDK project to the latest schema version.\r\n\r\n    The option '--preview' is only used to list all files that need to be migrated but not to do a real migration.\r\n    ```bash\r\n    mdk migrate --project /path/to/Your-MDK-metadata-project \r\n    mdk migrate --project /path/to/Your-MDK-metadata-project --preview\r\n    ```\r\n\r\n    Use 'log-file' option output the logs to a file (no need to create the log file firstly, it will be generated automatically):\r\n    ```bash\r\n    mdk migrate --project /path/to/Your-MDK-metadata-project --log-file /path/to/log-file.txt\r\n    ```"}]