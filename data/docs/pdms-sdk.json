[{"name":"CHANGELOG.md","content":"# Changelog\r\n\r\n## 1.0.0\r\n\r\n### Features\r\n\r\n- Add restore default variants REST API\r\n- Removed service-catalog client\r\n\r\n### Bugfixes\r\n\r\n- None\r\n\r\n## 0.0.3\r\n\r\n### Features\r\n\r\n- None\r\n\r\n### Bugfixes\r\n\r\n- Update dependencies\r\n\r\n\r\n## 0.0.2\r\n\r\n### Features\r\n\r\n- Updated readme\r\n\r\n### Bugfixes\r\n\r\n- Removed reliance on unavailable dependencies\r\n- Removed variant migration API\r\n\r\n## 0.0.1\r\n\r\n### Features\r\n\r\n- The config-db module contains the cds files that should be deployed to enable the functionality of the variant API\r\n- The variant-api module contains a mountable express middleware that provides the full variant REST API\r\n- The service-catalog-client module provides functionality for de-/registering Analysis Tools in the PdMS service catalog\r\n\r\n### Bugfixes\r\n\r\n- None"},{"name":"README.md","content":"@sap/pdms-sdk\r\n==============\r\n\r\n<!-- toc -->\r\n\r\n- [Overview](#overview)\r\n- [Variant API](#variant-api)\r\n- [Config db](#config-db-module)\r\n\r\n<!-- tocstop -->\r\n\r\n## Overview\r\n\r\nThis library is intended for enabling the development of custom features and extensions to SAP Predictive Maintenance and Service (PdMS).\r\n\r\n### Installation\r\n\r\nMake sure that the @sap registry points to `https://npm.sap.com` in your .npmrc or in your npm config settings. Then run:\r\n```\r\nnpm install @sap/pdms-variant-api --save\r\n```\r\n\r\n\r\n## Variant API\r\n\r\n\r\nThis is the node.js based implementation of the pdms variant API.\r\nIt is implemented as an express middleware that is easy to consume in the node-based backend of an Analysis Tool.\r\n\r\n### Usage\r\n\r\nThe node-variant-api relies on a security context being present in req.authInfo so that the tenant\r\ninformation of the HTTP request can be parsed. The easiest way to achieve this is to use the @sap/xssec library (see below). If this is not provided, the API will attempt to create a security context out of the JWT token in the \"Authorization\" header of the request.\r\n\r\nHere is the sample code example in a simple server.js to consume node-variant-api:\r\n\r\n```js\r\nconst express = require('express');\r\nconst xsenv = require('@sap/xsenv');\r\nconst passport = require('passport');\r\nconst JWTStrategy = require('@sap/xssec').JWTStrategy;\r\n\r\n\r\n// import the library\r\nconst sdk = require('@sap/pdms-sdk');\r\n\r\n// get from somewhere the hana credentials, ideally via `xsenv` module (but can also be a json file or whatever).\r\nconst configHanaCredentials = xsenv.cfServiceCredentials('myipro-config-hdi');\r\n\r\nconst app = express();\r\n\r\n// Use passport to parse the JWT token from the request and enrich the request object with the authInfo information\r\npassport.use(new JWTStrategy(xsenv.getServices({uaa:{tag:'xsuaa'}}).uaa));\r\napp.use(passport.initialize());\r\napp.use(passport.authenticate('JWT', { session: false }));\r\n\r\n// mount the variant api middleware into /api/v1 and pass the db credentials to it.\r\napp.use('/api/v1', sdk.middleware(configHanaCredentials));\r\n\r\n// optionally, default variants can be passed to the middleware. It can be one variant or an array of variants. variantId is created by variantAPI.\r\napp.use('/api/v1', sdk.middleware(configHanaCredentials, <default-variant>));\r\n\r\napp.listen(1337, function () {\r\n  console.log(`\r\n    app running on port: 1337.\r\n    Go to http://hostname:1337/api/v1/variants to use the variant API\r\n  `);\r\n});\r\n```\r\n\r\n\r\n> IMPORTANT NOTE: A pre-requisite for using the node variant API is the use of the [config db module](#config-db-module) to create the necessary database artifacts  used by the variant API.\r\n\r\n\r\n## Config DB Module\r\n\r\nThe config-db module is a node module to provide the CDS artifacts for variant configuration tables, which will work out of the box with the variant API (node or java).\r\nThis removes the burden on the developer to write or maintain the CDS files for variant configuration tables and also, removes code-redundancy.\r\n\r\nIt contains the following tables and functions:\r\n\r\n- com.sap.pdms.ipro::variants.Config\r\n- com.sap.pdms.ipro::variants.I18n\r\n- com.sap.pdms.ipro::variants.PreConfiguredConfig\r\n- com.sap.pdms.ipro::variants.PreConfiguredI18n\r\n- com.sap.pdms.ipro::variants.OptOutOfPreConfigured\r\n- com.sap.pdms.ipro::variants.GET_CONFIG_FOR_TENANT(tenant VARCHAR(36))\r\n- com.sap.pdms.ipro::variants.GET_I18N_FOR_TENANT(tenant VARCHAR(36))\r\n\r\n### Usage\r\n\r\nThe usage is automatically done by the HDI deployer of a database MTA module. If the @sap/pdms-sdk the is included in the package.json\r\nof the module, the HDI Deployer will pick up all necessary CDS artifact from the module when it is triggered. The HDB Deployer scans\r\nthe node_modules/ folder and virtually integrates the src/ and cfg/ folders of the found reusable database module - config-db module into \r\nthe (consuming) database moduleâ€™s lib/ folder. Reusable database modules are identified by the mandatory src/.hdiconfig file.\r\n\r\n```JSON\r\n{\r\n\t\"name\": \"db\",\r\n\t\"dependencies\": {\r\n\t\t\"@sap/hdi-deploy\": \"3.1.2\",\r\n\t\t\"@sap/pdms-sdk\": \"0.0.1\"\r\n\t},\r\n\t\"scripts\": {\r\n\t\t\"start\": \"node node_modules/@sap/hdi-deploy/deploy.js\"\r\n\t}\r\n}\r\n```\r\n\r\nIt is likely that an `.hdiignore` file will be needed to ignore additional files found by HDI Deploy that should\r\nnot be deployed to the database. The `.hdiignore` file works just like `.gitignore` and should be located in the \r\nroot of you db module.\r\n"}]