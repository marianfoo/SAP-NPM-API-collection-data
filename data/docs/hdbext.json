[{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n<a name=\"7.6.4\"></a>\r\n## 7.6.4 - 2022-05-03\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.12.20\r\n\r\n<a name=\"7.6.3\"></a>\r\n## 7.6.3 - 2022-04-13\r\n\r\n### Fixed\r\n- Update async to v3.2.2\r\n\r\n<a name=\"7.6.2\"></a>\r\n## 7.6.2 - 2022-02-24\r\n\r\n### Fixed\r\n- Update update package.json version\r\n\r\n<a name=\"7.6.1\"></a>\r\n## 7.6.1 - 2022-02-23\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.11.20\r\n\r\n<a name=\"7.6.0\"></a>\r\n## 7.6.0 - 2022-27-01\r\n\r\n### Added\r\n- Node.js 16.x support.\r\n\r\n<a name=\"7.5.0\"></a>\r\n## 7.5.0 - 2021-12-16\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.11.14\r\n\r\n<a name=\"7.4.1\"></a>\r\n## 7.4.1 - 2021-11-23\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.10.20\r\n\r\n<a name=\"7.4.0\"></a>\r\n## 7.4.0 - 2021-10-04\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.10.13\r\n\r\n<a name=\"7.3.1\"></a>\r\n## 7.3.1 - 2021-08-06\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.9.28\r\n\r\n<a name=\"7.3.0\"></a>\r\n## 7.3.0 - 2021-07-19\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.9.23\r\n- Update *debug* to v4.3.1\r\n\r\n<a name=\"7.2.0\"></a>\r\n## 7.2.0 - 2021-05-07\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.8.20\r\n\r\n<a name=\"7.1.4\"></a>\r\n## 7.1.4 - 2021-03-16\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.7.26\r\n\r\n<a name=\"7.1.3\"></a>\r\n## 7.1.3 - 2021-02-22\r\n\r\n### Fixed\r\n- Update *lodash* to v4.17.21\r\n\r\n<a name=\"7.1.2\"></a>\r\n## 7.1.2 - 2021-02-19\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.7.23\r\n\r\n<a name=\"7.1.1\"></a>\r\n## 7.1.1 - 2021-01-28\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.7.21\r\n- In StoredProcedure.js createTempTables, use async.eachLimit to avoid races\r\n\r\n<a name=\"7.1.0\"></a>\r\n## 7.1.0 - 2021-01-05\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.7.16, debug to 4.2.0 and *@sap/e2e-trace* to 3.0.0\r\n\r\n### Added\r\n- Node.js 14.x support.\r\n\r\n<a name=\"7.0.1\"></a>\r\n## 7.0.1 - 2020-10-21\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.6.58, debug to 4.1.1 and lodash to 4.17.20\r\n\r\n<a name=\"7.0.0\"></a>\r\n## 7.0.0 - 2020-07-13\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.5.104, async to 3.2.0 and lodash to 4.17.19\r\n\r\n### Removed\r\n- Node.js 6 support\r\n\r\n<a name=\"6.2.2\"></a>\r\n## 6.2.2 - 2020-04-29\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.4.196\r\n\r\n<a name=\"6.2.1\"></a>\r\n## 6.2.1 - 2020-04-15\r\n\r\n### Fixed\r\n- Do not drop statement objects in the background in order to prevent IsGlobalEmpty crash\r\n\r\n<a name=\"6.2.0\"></a>\r\n## 6.2.0 - 2020-03-06\r\n\r\n### Added\r\n- Node.js 12.x support.\r\n\r\n<a name=\"6.1.1\"></a>\r\n## 6.1.1 - 2019-11-19\r\n\r\n### Fixed\r\n- Update *@sap/hana-client* to v2.4.167\r\n\r\n<a name=\"6.1.0\"></a>\r\n## 6.1.0 - 2019-10-25\r\n\r\n### Added\r\n- Support for synonyms as table parameters in procedures\r\n\r\n<a name=\"6.0.1\"></a>\r\n## 6.0.1 - 2019-07-10\r\n\r\n### Fixed\r\n- Update `lodash` package to 4.17.13\r\n\r\n<a name=\"6.0.0\"></a>\r\n## 6.0.0 - 2019-05-20\r\n\r\n### Removed\r\n- Node 4 support\r\n- Stored procedures: caching of prepared CALL statements for simple procedures\r\n\r\n### Fixed\r\n- Statement leak due to caching of prepared CALL statements for simple procedures\r\n- Update *@sap/hana-client* to v2.4.139\r\n\r\n### Added\r\n- Node.js 10 support\r\n\r\n## 5.1.0 - 2019-01-11\r\n\r\n### Added\r\n- Support for `hostname_in_certificate`, `validate_certificate`, `client_authentication_certificate`, `client_authentication_private_key` properties from HANA service binding\r\n\r\n### Fixed\r\n- Check for non-existing procedure\r\n\r\n## 5.0.0 - 2018-09-27\r\n\r\n### Removed\r\n- Node 0.12 support.\r\n- The `constants` property.\r\n- The `getPool` property.\r\n- The `createPool` property.\r\n- The `updateConnectionOptions` property.\r\n- The `session` property is no longer considered for setting session variables.\r\n\r\n### Changed\r\n- Now the package provides convenient functions on top of the *@sap/hana-client* package instead of the *hdb* package.\r\n- The package expects schema and table names to be provided unescaped everywhere, e.g. `my\"TABLE` instead of `\"my\"\"Table\"`.\r\n- A string containing a table name and optionally a schema name is no longer accepted for input table parameters. An object with `table` property (mandatory) and `schema` property (optional) should be provided instead, e.g. `{ schema: 'my\"Schema', table: 'my\"Table' }`\r\n- `hdbext.createConnection` throws if the input is not an object.\r\n- `hdbext.createConnection` throws if provided value for `autoCommit` is not a boolean.\r\n- Format of the object returned from `hdbext.connectionOptions.getGlobalOptions`, from `{ session: { APPLICATION: '', APPLICATIONVERSION: '' } }` to `{ 'sessionVariable:APPLICATION': '', 'sessionVariable:APPLICATIONVERSION': '' }`\r\n- `hdbext.connectionOptions.getGlobalOptions` may return an object without a `'sessionVariable:APPLICATIONVERSION'` property if an appropriate value cannot be determined.\r\n- Format of the object returned from `hdbext.connectionOptions.getRequestOptions` from `{ session: { XS_APPLICATIONUSER: '', SAP_PASSPORT: '', locale: '' } }` to `{ 'sessionVariable:XS_APPLICATIONUSER': '', 'sessionVariable:SAP_PASSPORT': '', locale: '' }`\r\n- `hdbext.connectionOptions.getRequestOptions` may return an object without a `locale` property if an appropriate value cannot be determined.\r\n- `hdbext.middleware` no longer takes pool options as second argument.\r\n- `hdbext.middleware` does not work with pooled connections by default.\r\n\r\n## 4.7.5 - 2018-09-18\r\n\r\n### Fixed\r\n- Update `lodash` package to 4.17.11\r\n\r\n## 4.7.4 - 2018-07-27\r\n\r\n### Fixed\r\n- Passing a Buffer as a single input argument for a procedure\r\n\r\n## 4.7.3 - 2018-06-29\r\n\r\n### Fixed\r\n- Updated `hdb` package to 0.16.0\r\n\r\n## 4.7.2 - 2018-04-03\r\n\r\n### Fixed\r\n- Do not call `setImmediate` when invoking stored procedures\r\n\r\n## 4.7.1 - 2018-03-30\r\n\r\n### Fixed\r\n- Update dependencies\r\n- Implicit commit when procedure with input table parameters is executed\r\n- Cleanup of global temporary tables when a connection is returned to a pool\r\n- Local temporary tables are now dropped without CASCADE\r\n- Names of temporary tables are now properly escaped during cleanup of connections returned to a pool\r\n- Prepared statement leak when calling a procedure without input table parameters and without parameters having a default value\r\n\r\n## 4.7.0 - 2018-01-19\r\n\r\n### Added\r\n- npm-shrinkwrap.json\r\n\r\n## 4.6.0 - 2018-01-12\r\n\r\n### Added\r\n- Support for `servername` option on connect\r\n\r\n### Fixed\r\n- Error when `authInfo` is missing `getGrantType` property\r\n- Minimum idle connections is now 0\r\n\r\n## 4.5.0 - 2017-11-23\r\n\r\n### Added\r\n- Stored procedures: support for default parameters\r\n\r\n### Fixed\r\n- Update dependencies\r\n\r\n## 4.4.3 - 2017-10-12\r\n\r\n### Added\r\n- Support for Node.js 8\r\n\r\n### Fixed\r\n- Prevent using a client object that has been returned to the pool\r\n- Update dependencies\r\n\r\n## 4.4.2 - 2017-07-17\r\n\r\n### Fixed\r\n - Client credentials token now doesn't throw error\r\n\r\n## 4.4.1 - 2017-07-04\r\n\r\n### Fixed\r\n - Allow pool release to be called only once\r\n\r\n## 4.4.0 - 2017-06-30\r\n\r\n### Added\r\n - Support for synonyms for procedures\r\n - Expose generic-pool object\r\n\r\n### Fixed\r\n - Return only non-busy connections to pool\r\n - Additional options leaks in getPool\r\n - Fixes in passing input arguments as Array\r\n - Fixed passing `null` as single input argument\r\n\r\n## 4.3.4 - 2017-05-02\r\n\r\n### Fixed\r\n - Close connection if authentication fails\r\n - Handle `null` for procedures with input table parameters\r\n\r\n## 4.3.3 - 2017-04-04\r\n\r\n### Fixed\r\n - Support for INOUT parameters in stored procedures\r\n\r\n## 4.3.2 - 2017-03-10\r\n\r\n### Fixed\r\n - Report error if temp table delete fails\r\n - Updated hdb module to 0.12.1\r\n\r\n## 4.3.1 - 2017-02-23\r\n\r\n### Fixed\r\n- The `locale` property in the object returned by `connOptions.getRequestOptions` now defaults to undefined instead of to an empty string when there is no language info in the provided request\r\n\r\n## 4.3.0 - 2017-01-26\r\n\r\n### Added\r\n- Introduce pool.drain - a function to dispose of idle connections\r\n\r\n### Fixed\r\n- Log on level 'debug' in case of 'insufficient privilege' error during clean-up of temporary tables\r\n\r\n## 4.2.3 - 2017-01-24\r\n\r\n### Changed\r\n- Rename package to use @sap scope\r\n\r\n## 4.2.2 - 2017-01-24\r\n\r\n### Fixed\r\n- Clean-up temporary tables on connection release\r\n- Fixes in procedures and inplace table parameters\r\n\r\n## 4.2.1 - 2016-12-07\r\n\r\n### Fixed\r\n- `middleware` and `connOptions.getRequestOptions` now update SAP-Passports automatically with default component data\r\n\r\n## 4.2.0 - 2016-11-16\r\n\r\n### Added\r\n- Make options optional in `pool.acquire`\r\n\r\n### Fixed\r\n- Quote name in set schema statement\r\n- Rollback transaction before isolation level restore\r\n- Support for multiple middlewares\r\n- Allow calling a procedure with inplace table parameter\r\n- Fix crash on connect\r\n\r\n## 4.1.3 - 2016-10-14\r\n\r\n### Fixed\r\n- Fixes in database connectivity\r\n\r\n## 4.1.2 - 2016-09-28\r\n\r\n### Fixed\r\n- Handle websocket connection end.\r\n- Set DB connection locale from HTTP request in middleware.\r\n\r\n## 4.1.1 - 2016-09-15\r\n\r\n### Added\r\n- Rollback of uncommitted changes when a connection is returned to a connection pool.\r\n\r\n## 4.1.0 - 2016-09-14\r\n\r\n### Added\r\n- `autoCommit` connection option\r\n- Set APPLICATION and APPLICATIONVERSION session variables in the middleware\r\n- `connectionOptions.getGlobalOptions()` and `connectionOptions.getRequestOptions(req)` functions\r\n\r\n## 4.0.0 - 2016-09-09\r\n\r\n### Added\r\n- `session` property in database connection options\r\n- `certificate` property in database connection options\r\n\r\n### Removed\r\n- `sapPassport` property in database connection options, use `session.SAP_PASSPORT` instead.\r\n- `userTokens` property in database connection options, use `session.XS_APPLICATIONUSER` instead.\r\nNow a single token is expected.\r\n\r\n## 3.0.0 - 2016-08-05\r\n\r\n### Changed\r\n- Removed additional functions attached to the returned HDB connection object (incompatible change).\r\n  In previous versions the returned connection object was enriched with the following functions:\r\n    - setSchema\r\n    - setApplicationUser\r\n    - unsetApplicationUser\r\n\r\n  Those functions have been removed and we have provided a new function `updateConnectionOptions` instead,\r\n  to be used as utility for setting the supported connection options.\r\n\r\n- Read HANA service properties from environment as fallback if no HANA config provided has been removed.\r\n\r\n- HANA config object no longer supports setting `userTokens` as string, it must be an object.\r\n\r\n- Connection pooling API was changed incompatibly to fix issues with connection cleanup.\r\n\r\n"},{"name":"migration.md","content":"# Migration Guide\r\n\r\n## Version 6 ==> Version 7\r\n\r\nSupport for Node.js 6 has been dropped, *@sap/hdbext* APIs have not been changed.\r\n\r\n## Version 5 ==> Version 6\r\n\r\nSupport for Node.js 4 has been dropped, *@sap/hdbext* APIs have not been changed.\r\n\r\n## Version 4 ==> Version 5\r\n\r\n### Changes to application code\r\n\r\n#### Creating connections\r\n\r\nCode like:\r\n\r\n```js\r\nhdbext.createConnection({\r\n  host: 'my.host',\r\n  port: 30015,\r\n  user: 'my_user',\r\n  password: 'secret',\r\n  schema: 'name_of_the_schema',\r\n  isolationLevel: hdbext.constants.isolation.SERIALIZABLE,\r\n  locale: 'en_US',\r\n  session: {\r\n    APPLICATION: 'myapp',\r\n    SAP_PASSPORT: 'passport'\r\n  }\r\n}, function(err, client) {\r\n\r\n});\r\n```\r\n\r\nshould be transformed to:\r\n\r\n```js\r\nvar enums = require('@sap/hana-client/extension/Enums');\r\n\r\nhdbext.createConnection({\r\n  host: 'my.host',\r\n  port: 30015,\r\n  user: 'my_user',\r\n  password: 'secret',\r\n  schema: 'name_of_the_schema',\r\n  isolationLevel: enums.SERIALIZABLE,\r\n  locale: 'en_US',\r\n  autoCommit: false,\r\n  'sessionVariable:APPLICATION': 'myapp',\r\n  'sessionVariable:SAP_PASSPORT': 'passport'\r\n}, function(err, client) {\r\n\r\n});\r\n```\r\n\r\n#### Connection pooling\r\n\r\n```js\r\nvar pool = hdbext.getPool({ /* database options */ }, { /* pool options */ });\r\n// or\r\nvar pool = hdbext.createPool({ /* database options */ }, { /* pool options */ });\r\n\r\npool.acquire({ /* options */ }, function(err, client) {\r\n\r\n});\r\n```\r\n\r\nshould be transformed to:\r\n\r\n```js\r\nhdbext.createConnection({\r\n  // database options\r\n  pooling: true\r\n}, function(err, client) {\r\n\r\n});\r\n```\r\n\r\nIn that way the connection pooling functionality of *@sap/hana-client* will be used.\r\n\r\n#### Connection pooling in the middleware\r\n\r\nTo enable connection pooling in `hdbext.middleware` add the option `pooling: true` to the database options.\r\n\r\n#### Passing table name as input table parameter to a procedure\r\n\r\nCode like:\r\n\r\n```js\r\nhdbext.loadProcedure(client, schema, name, function(err, sp) {\r\n  sp({\r\n    MY_INPUT_TABLE_PARAM: '\"my\"\"Schema\".\"my\"\"Table\"'\r\n  }, function(err, outParams) {\r\n\r\n  });\r\n});\r\n```\r\n\r\nshould be transformed to:\r\n\r\n```js\r\nhdbext.loadProcedure(client, schema, name, function(err, sp) {\r\n  sp({\r\n    MY_INPUT_TABLE_PARAM: { schema: 'my\"Schema', table: 'my\"Table' }\r\n  }, function(err, outParams) {\r\n\r\n  });\r\n});\r\n```\r\n\r\nThe `table` property is mandatory and the `schema` property is optional if using the current schema.\r\n\r\n#### Constants\r\n\r\n*@sap/hdbext* no longer exposes constants, use those provided by *@sap/hana-client* instead:\r\n\r\n```js\r\nvar types = require('@sap/hana-client/extension/TypeCode');\r\nvar enums = require('@sap/hana-client/extension/Enums');\r\n```\r\n"},{"name":"README.md","content":"@sap/hdbext\r\n============\r\n\r\nThis package provides convenient functions on top of the *@sap/hana-client* module.\r\n\r\nThe [change log](CHANGELOG.md) describes notable changes in this package.\r\n\r\n## Usage\r\n\r\n```js\r\nvar hdbext = require('@sap/hdbext');\r\n```\r\n\r\n## API\r\n\r\n### createConnection(hanaConfig, callback)\r\n\r\nCreates a connection to a HANA database:\r\n\r\n```js\r\nvar hanaConfig = {\r\n  host     : 'hostname',\r\n  port     : 30015,\r\n  user     : 'user',\r\n  password : 'secret'\r\n};\r\nhdbext.createConnection(hanaConfig, function(error, client) {\r\n  if (error) {\r\n    return console.error(error);\r\n  }\r\n\r\n  client.exec(...);\r\n});\r\n```\r\n\r\nThe `hanaConfig` argument contains [database connection options](#database-connection-options) and [additional options](#additional-options).\r\nThe callback provides a connected `client` object.\r\n\r\nIf the application will be deployed on Cloud Foundry or XS Advanced, you can use _@sap/xsenv_ package to\r\nlookup the bound HANA service, like this:\r\n```js\r\nvar xsenv = require('@sap/xsenv');\r\n\r\nvar hanaConfig = xsenv.cfServiceCredentials({ tag: 'hana' });\r\nhdbext.createConnection(hanaConfig, function(error, client) {\r\n  //...\r\n});\r\n```\r\n\r\n#### Database connection options\r\n\r\nThe HANA options provided to *@sap/hdbext* should be in the same format as expected by the *@sap/hana-client* package.\r\n\r\nFor convenience these properties set by the HANA service broker are also accepted:\r\n* `schema` - can be used instead of the `currentSchema` property of *@sap/hana-client*.\r\n* `db_hosts` - can be used instead of the `hosts` property of *@sap/hana-client*.\r\n* `certificate` - can be used instead of `ca` property of *@sap/hana-client*.\r\n__Note:__ `certificate` is a string containing one certificate, while `ca` is an array of certificates.\r\n* `hostname_in_certificate` - can be used instead of `sslHostNameInCertificate` property of *@sap/hana-client*.\r\n* `validate_certificate ` - can be used instead of `sslValidateCertificate` property of *@sap/hana-client*. The default value is `true`.\r\n* `client_authentication_certificate` - can be used instead of `cert` property of *@sap/hana-client*.\r\n* `client_authentication_private_key` - can be used instead of `key` property of *@sap/hana-client*. \r\n\r\n#### Additional options\r\n\r\nA connection created with *@sap/hdbext* can be further configured with the following options:\r\n\r\nOption   | Type | Description\r\n-------- | ---- | -----------\r\n`autoCommit` | boolean | Sets the autoCommit flag. If no option is specified it defaults to `true`.\r\n\r\n**Note**: the *@sap/hana-client* package also accepts other configurations like `isolationLevel` (one can use the isolation level constants in `require('@sap/hana-client/extension/Enums')`), `locale` and `sessionVariable:<name-of-the-session-variable>`.\r\n\r\n##### Special session variables\r\n\r\nSome session variables are handled in a special way.\r\n\r\n* `XS_APPLICATIONUSER` - can be set to a user token (SAML/JWT) to associate the application user with the database connection\r\n* `SAP_PASSPORT` - used to propagate SAP passport to SAP HANA, used for end-to-end tracing\r\n* `APPLICATION` - the name of the application initiating the database connection\r\n\r\n**Note**: If providing the `SAP_PASSPORT` session variable, the SAP Passport in\r\nit should have already been updated with data, specific to the component that consumes *@sap/hdbext*.\r\nFor more information, see the documentation of the *@sap/e2e-trace* package.\r\n\r\n#### Example\r\n\r\nSample configuration with both [database connection options](#database-connection-options) and [additional options](#additional-options):\r\n\r\n```js\r\nvar enums = require('@sap/hana-client/extension/Enums');\r\n\r\n{\r\n  host: 'my.host',\r\n  port: 30015,\r\n  user: 'my_user',\r\n  password: 'secret',\r\n  schema: 'name_of_the_schema',\r\n  isolationLevel: enums.SERIALIZABLE,\r\n  locale: 'en_US',\r\n  autoCommit: false,\r\n  'sessionVariable:APPLICATION': 'myapp',\r\n  'sessionVariable:SAP_PASSPORT': 'passport'\r\n}\r\n```\r\n\r\n### connectionOptions.getGlobalOptions()\r\n\r\nReturns an object with the following properties:\r\n* `sessionVariable:APPLICATION` - extracted from VCAP_APPLICATION, fallbacks to process's pid and machine's hostname.\r\n* `sessionVariable:APPLICATIONVERSION` - extracted from package.json in current directory. May not be present if the file is not present or not in valid JSON format.\r\n\r\n### connectionOptions.getRequestOptions(req)\r\n\r\nReturns an object with the following properties, based on the given HTTP request (_req_):\r\n* `sessionVariable:SAP_PASSPORT` - may not be present if the SAP Passport header is not present. The passport is updated with default component data.\r\n* `sessionVariable:XS_APPLICATIONUSER` - only present for authenticated requests that do not use client credentials token.\r\n* `locale` - only present if _req_ has either a `x-sap-request-language` or `accept-language` header.\r\n\r\n### loadProcedure(client, schemaName, procedureName, callback)\r\n\r\n*@sap/hdbext* provides functionalities to simplify stored procedure calls.\r\n\r\nFor example, if you have the following stored procedure:\r\n\r\n```sql\r\ncreate procedure PROC_DUMMY (in a int, in b int, out c int, out d DUMMY, out e TABLES)\r\n  language sqlscript\r\n  reads sql data as\r\n  begin\r\n    c := :a + :b;\r\n    d = select * from DUMMY;\r\n    e = select TOP 3 * from TABLES;\r\n  end\r\n```\r\n\r\nyou can call it via the *@sap/hana-client* package in the following way:\r\n\r\n```js\r\nvar dbStream = require('@sap/hana-client/extension/Stream');\r\ndbStream.createProcStatement(client, 'CALL PROC_DUMMY (?, ?, ?, ?, ?)', function (err, stmt) {\r\n  if (err) {\r\n    return console.error('createProcStatement error:', err);\r\n  }\r\n\r\n  stmt.exec({ A: 3, B: 4 }, function (err, params, dummyRows, tablesRows) {\r\n    if (err) {\r\n      return console.error('exec error:', err);\r\n    }\r\n\r\n    stmt.drop(function (err) {\r\n      if (err) {\r\n        return console.error('drop error:', err);\r\n      }\r\n\r\n      console.log('C:', params.C);\r\n      console.log('Dummy rows:', dummyRows);\r\n      console.log('Tables rows:', tablesRows);\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nWith *@sap/hdbext* you don't need to construct a `CALL` statement. The procedure can be loaded by its name.\r\nThe code can look like this:\r\n\r\n```js\r\nhdbext.loadProcedure(client, null, 'PROC_DUMMY', function(err, sp) {\r\n  sp({ A: 3, B: 4 }, function(err, parameters, dummyRows, tablesRows) {\r\n    if (err) {\r\n      return console.error(err);\r\n    }\r\n\r\n    console.log('C:', parameters.C);\r\n    console.log('Dummy rows:', dummyRows);\r\n    console.log('Tables rows:', tablesRows);\r\n  });\r\n});\r\n```\r\n\r\nTo use the current schema, pass an empty string `''`, `null` or `undefined` for schema.\r\n\r\n`loadProcedure(client, schemaName, procedureName, callback)` returns a JavaScript function which you can call directly.\r\nThe function has the `paramsMetadata` property containing metadata for all parameters of the stored procedure.\r\nThis could be useful if you need to implement generic stored procedures calling.\r\n\r\nYou can also pass the input parameters directly in the proper order:\r\n\r\n```js\r\nsp(3, 4, function(err, parameters, dummyRows, tableRows) {\r\n  // ...\r\n});\r\n```\r\n\r\nor as an array:\r\n\r\n```js\r\nsp([3, 4], function(err, parameters, dummyRows, tableRows) {\r\n  // ...\r\n});\r\n```\r\n\r\nWhere the big advantage comes in is with table parameters.\r\nYou can pass an array of objects and *@sap/hdbext* will automatically convert it into a table parameter.\r\nSay we have a `customer` table with `ID` and `NAME` columns and a procedure:\r\n\r\n```sql\r\ncreate table \"customer\" (ID integer, NAME VARCHAR(100), primary key (ID));\r\n\r\ncreate procedure \"getCustomers\" (in in_table_1 \"customer\")\r\nlanguage sqlscript reads sql data as begin\r\nselect * from :in_table_1;\r\nend;\r\n```\r\n\r\nYou can call it like this:\r\n\r\n```js\r\nhdbext.loadProcedure(client, null, 'getCustomers', function (err, sp) {\r\n  if (err) {\r\n    return console.error(err);\r\n  }\r\n\r\n  sp([\r\n    { ID: 1, NAME: 'Alex' },\r\n    { ID: 2, NAME: 'Peter' }\r\n  ], function (err, parameters, tableRows) {\r\n    if (err) {\r\n      return console.error(err);\r\n    }\r\n\r\n    console.log(parameters);\r\n    console.log(tableRows);\r\n  });\r\n});\r\n```\r\n\r\nIn this example each array element represents a table row. Property names should case-sensitively match the corresponding column names.\r\n\r\nInternally *@sap/hdbext* creates a local temporary table in the current schema for each table parameter.\r\nThus, the current user needs the respective permissions.\r\n\r\nIt is also possible to explicitly state an existing table to be used as input table parameter:\r\n\r\n```js\r\n  sp({ schema: 'my-schema', table: 'my-table' }, function (err, parameters, tableRows) {\r\n    // ...\r\n  });\r\n```\r\n\r\nThe `schema` property is optional.\r\n\r\nEvery output table has a `columnInfo` property which contains info about each of the table's columns.\r\n\r\nInput arguments for parameters that have default values can be skipped in order to use the defined defaults.\r\nIt is recommended to pass the input as an object in those cases. In this way the application code would be independent\r\nfrom the order in which parameters with default values are defined in the procedure.\r\nWhen the parameters are passed in a sequence (i.e. as an array or are passed directly in the proper order),\r\ninput arguments can be skipped only for the parameters which are after the last mandatory parameter in the procedure's list.\r\n\r\n### Middleware\r\n\r\n*@sap/hdbext* provides a middleware which allows easy database connection creation in a middleware-based application.\r\nThe `close` method of the database client is invoked when the request is closed or finished.\r\n\r\n```js\r\nvar hdbext = require('@sap/hdbext');\r\nvar express = require('express');\r\n\r\nvar app = express();\r\napp.use(hdbext.middleware(hanaConfig));\r\n\r\napp.get('/execute-query', function (req, res) {\r\n  var client = req.db;\r\n\r\n  client.exec('SELECT * FROM DUMMY', function (err, rs) {\r\n    if (err) {\r\n      return res.end('Error: ' + err.message);\r\n    }\r\n\r\n    res.end(JSON.stringify(rs));\r\n  });\r\n});\r\n```\r\n\r\nThe argument `hanaConfig` may contain both [database connection options](#database-connection-options) and [additional options](#additional-options).\r\n\r\nThe middleware uses [connectionOptions.getGlobalOptions()](#connectionoptionsgetglobaloptions) and [connectionOptions.getRequestOptions(req)](#connectionoptionsgetrequestoptionsreq) for extracting options. It is possible for applications to override the default global options by setting them explicitly in `hanaConfig`.\r\n\r\n### SQL Parameter Utilities\r\n\r\nThe `hdbext.sqlInjectionUtils` object contains several synchronous utility functions that can be used to prevent SQL injections.\r\n\r\n#### isAcceptableParameter(value, maxToken)\r\n\r\nReturns true if `value` can be used to construct SQL statements.\r\nThe number of tokens a value is allowed to contain is set via the optional `maxToken` argument. Defaults to 1.\r\n\r\n#### isAcceptableQuotedParameter(value)\r\n\r\nReturns true if the provided `value` is quoted correctly and can be used in an SQL statement.\r\n\r\n#### escapeDoubleQuotes(value)\r\n\r\nReturns the `value` parameter with all double quotation marks escaped (i. e. doubled).\r\n\r\n#### escapeSingleQuotes(value)\r\n\r\nReturns the `value` parameter with all single quotation marks escaped (i. e. doubled).\r\n\r\n## Troubleshooting\r\n\r\nTo enable tracing, you should set the environment variable `DEBUG` to `hdbext:*`.\r\n\r\n## Migration guide\r\n\r\nGuide on how to adopt new major versions of the library can be found [here](./migration.md).\r\n"}]