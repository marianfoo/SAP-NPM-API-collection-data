[{"name":"CHANGELOG.md","content":"# 2.3.5\r\nFeatures:\r\n- use @sap/hdi-deploy@4.3.3\r\n\r\n# 2.3.4\r\nFeatures:\r\n- use @sap/hdi-deploy@4.3.2\r\n- use body-parser@1.19.2\r\n- use express@4.17.3\r\n- use express-basic-auth@1.2.1\r\n- use @sap/audit-logging@5.5.2\r\n\r\n# 2.3.3\r\nFeatures:\r\n- use @sap/audit-logging@5.4.1\r\n- use @sap/hdi-deploy@4.3.0\r\n\r\n\r\n# 2.3.2\r\nFeatures:\r\n- use @sap/hdi-deploy@4.2.3\r\n- use @sap/audit-logging@5.3.0\r\n- routes `/v1/deploy/to/instance` and `/v1/deploy/to/instance/async` accept the response of a service manager GET\r\n\r\n# 2.3.1\r\nFeatures:\r\n- use @sap/hdi-deploy@4.2.2\r\n\r\n# 2.3.0\r\nFeatures:\r\n- use @sap/hdi-deploy@4.2.0\r\n- use @sap/audit-logging@5.1.0\r\n- Node 16 support\r\n\r\nRemoved:\r\n- Node 8.x and 10.x support\r\n\r\n# 2.2.0\r\nFeatures:\r\n- use @sap/hdi-deploy@4.1.0\r\n\r\n# 2.1.2\r\nFeatures:\r\n- use @sap/hdi-deploy@4.0.5\r\n\r\n# 2.1.1\r\nFeatures:\r\n- use @sap/hdi-deploy@4.0.4\r\n\r\nFixes :\r\n- overall deployment time calculation\r\n- accepting different alphabetical cases for enforce_auditing\r\n\r\n# 2.1.0\r\nFeatures:\r\n- use @sap/hdi-deploy@4.0.3\r\n- use @sap/audit-logging@4.2.0\r\n- Node 14 support\r\n\r\n\r\n# 2.0.1\r\nFeatures:\r\n- use @sap/hdi-deploy@4.0.2\r\n\r\n# 2.0.0\r\nFeatures.\r\n- use @sap/hdi-deploy@4.0.1\r\n- use @sap/xsenv@3.1.0\r\n\r\nRemoved:\r\n- node 6 support\r\n\r\n# 1.7.5\r\nFeatures:\r\n- use @sap/hdi-deploy@3.11.15\r\n\r\n# 1.7.4\r\nFeatures:\r\n- use @sap/hdi-deploy@3.11.14\r\n\r\n# 1.7.3\r\nFeatures:\r\n- use @sap/hdi-deploy@3.11.13\r\n- use @sap/audit-logging@3.2.0\r\n\r\n# 1.7.2\r\nFeatures:\r\n- use hdi-deploy version 3.11.12\r\n- use @sap/audit-logging 3.1.1\r\n\r\n# 1.7.1\r\nFeatures:\r\n- use hdi-deploy version 3.11.11\r\n- prefix log lines relating to the same deployment with an identifier  \r\n\r\n# 1.7.0\r\nFeatures:\r\n- added a new route `/v1/deploy/to/instance/async` that implements an asynchronous deployment with status polling via `/v1/status/:guid`.\r\n- log the server version on start-up\r\n\r\n# 1.6.0\r\nFeatures:\r\n- node 12 support\r\n- use hdi-deploy version 3.11.9\r\n- updated dependencies\r\n- allow specifying the tenant for audit logging via env variable \"AUDIT_LOG_TENANT\"\r\n\r\nFixes:\r\n- previously, a simple get request (in combination with audit logging) caused an internal server error\r\n\r\n## 1.5.9\r\nFixes:\r\n- use hdi-deploy version 3.11.6\r\n- don't send duplicate messages as part of response\r\n\r\n## 1.5.8\r\nFixes:\r\n- use hdi-deploy version 3.11.5\r\n- send all deployer messages as part of response\r\n\r\n## 1.5.7\r\nFixes:\r\n- use hdi-deploy version 3.11.4\r\n\r\n## 1.5.6\r\nFeatures:\r\n- use hdi-deploy version 3.11.2\r\n- Node 10 support\r\n\r\n## 1.5.5\r\nFeatures:\r\n- use hdi-deploy version 3.11.0\r\n- update dependencies\r\n\r\nFixes:\r\n- fix issue with audit logging: IP determination would sometimes return multiple IPs, causing audit logging to crash\r\n\r\n## 1.5.4\r\nFeatures:\r\n- use hdi-deploy version 3.10.0\r\n\r\n## 1.5.3\r\nFeatures:\r\n- update dependencies\r\n\r\nFixes:\r\n- full support for .hdbmigrationtable files by using hdi-deploy version 3.9.4\r\n\r\n## 1.5.2\r\nFixes:\r\n- solved issue with long running deployments\r\n\r\n## 1.5.1\r\nFeatures:\r\n- use hdi-deploy version 3.9.2\r\n\r\n## 1.5.0\r\nFeatures:\r\n- logging of parameters passed via the request\r\n- optional audit logging of failed login attempts\r\n- export API endpoint functions\r\n- use hdi-deploy version 3.9.1\r\n\r\n## 1.4.2\r\n\r\nFeatures:\r\n- export the internal HTTP server\r\n- use hdi-deploy version 3.8.2\r\n\r\n## 1.2.2\r\n\r\nFixes:\r\n- switch from res.send back to res.end to fix problems with the content type\r\n\r\n## 1.2.1\r\n\r\nFeatures:\r\n- update dependencies\r\n\r\n## 1.2.0\r\n\r\nFeatures:\r\n- additional route /v1/deploy/to/instance accepting the response of a instance manager GET\r\n- use hdi-deploy version 3.4.0\r\n\r\n## 1.1.0\r\n\r\nFeatures:\r\n- use hdi-deploy version 3.3.0\r\n- move forking of hdi-deploy into hdi-deploy itself\r\n\r\n## 1.0.0\r\n\r\ninitial release\r\n"},{"name":"README.md","content":"@sap/hdi-dynamic-deploy\r\n=======================\r\n\r\n`@sap/hdi-dynamic-deploy` is a [Node.js](https://nodejs.org)-based http server for dynamic deployment to SAP HANA DI (HDI) containers, HDI Dynamic Deployer for short. The HDI Dynamic Deployer can be used in XS Advanced (XSA) and in SAP Cloud Platform (SAP CP)/Cloud Foundry (CF) to deploy database content to dynamically created containers (e.g. created via the Instance Manager).\r\n\r\nThe dynamic deployer is built upon `@sap/hdi-deploy` which should be used directly if a static deployment at deploytime is sufficient.\r\n\r\n## README.md\r\n\r\n**Installation**:\r\n- [Integration into a Database Module](#integration-into-a-database-module)\r\n- [Configuration of the dynamic deployer](#configuration-of-the-dynamic-deployer)\r\n\r\n**Dynamic deployment**:\r\n- [Triggering a dynamic deployment by a HTTP POST request](#triggering-a-dynamic-deployment-by-a-http-post-request)\r\n- [How to use it in a multi-target application](#how-to-use-it-in-a-multi-target-application)\r\n- [Accessing the underlying HTTP server](#accessing-the-underlying-http-server)\r\n- [Accessing the underlying HTTP server](#accessing-the-router-functions)\r\n\r\n## Integration into a Database Module\r\n\r\nUsually, `@sap/hdi-dynamic-deploy` gets installed via a `package.json`-based dependency inside your application's `db` module:\r\n\r\n`db/package.json`:\r\n\r\n```\r\n{\r\n  \"name\": \"deploy\",\r\n  \"dependencies\": {\r\n    \"@sap/hdi-dynamic-deploy\": \"2.3.2\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"node node_modules/@sap/hdi-dynamic-deploy/\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n    \r\n## Configuration of the dynamic deployer\r\n\r\nThe dynamic deployer needs to be configured via the following environment variables:\r\n\r\n- `PORT`: port the HTTP server listens to\r\n- `hdi_dynamic_deploy_user`: username for HTTP basic authentication\r\n- `hdi_dynamic_deploy_password`: password for HTTP basic authentication\r\n- `ENFORCE_AUDITING`: force usage of audit logging. If audit logging cannot be enabled, the server will throw an error and stop.\r\n- `ENFORCE_V2`: force usage of the V2 audit logging API. If audit logging V2 cannot be enabled, the server will throw an error and stop.\r\n- `AUDIT_LOG_TENANT`: specifies the tenant to use for audit logging. Likely this will be the [subaccount-id](https://help.sap.com/viewer/cca91383641e40ffbe03bdc78f00f681/Cloud/en-US/b43eff2df3f84124995f6acbc9e5c55b.html) where your app is deployed. If this is not specified you may be unable to view the logs.\r\n\r\nNote: Any client that knows the `hdi_dynamic_deploy_user` and the corresponding password will indirectly be able to read the database artifacts contained in the dynamic deploy server.\r\n\r\nIf an auditlog service is bound to the dynamic deployer, invalid authentication attempts will be logger accordingly.\r\n\r\nThe `PORT` variable is automatically set by XSA. `ENFORCE_AUDITING`, `ENFORCE_V2`, username and password have to be given e.g. via the `mta.yaml` file (see example below).\r\nWhen using the XSA deploy-service, a strong generated password will be used. In other use cases, sufficient password strength has to be ensured!\r\n\r\n```\r\nmodules:\r\n  - name: db\r\n    type: com.sap.xs.hdi-dynamic\r\n    path: db\r\n    properties:\r\n      hdi_dynamic_deploy_user: ${generated-user}\r\n      hdi_dynamic_deploy_password: ${generated-password}\r\n    provides:\r\n    - name: db_deployment\r\n      properties:\r\n         url: ${default-url}\r\n         user: ${generated-user}\r\n         password: ${generated-password}\r\n```\r\n\r\n## Triggering a dynamic deployment by a HTTP POST request\r\n\r\nThe dynamic deployer is a http server started for a specific db module. When the module is pushed to XSA or CF, the dynamic deployer starts listening for requests and eventually starts the (non-dynamic) deployer to deploy the content of the db module to a given container.\r\n\r\nTo trigger the deployment one has to send a HTTP POST request with basic authentication and content type `application/json` to the dynamic deployer. The api offers three urls for deployment, `http(s)://<hostname>:<port>/v1/deploy`, `http(s)://<hostname>:<port>/v1/deploy/to/instance` and `http(s)://<hostname>:<port>/v1/deploy/to/instance/async`.\r\n\r\n### Synchronous deployment\r\n\r\n#### Deployment via `http(s)://<hostname>:<port>/v1/deploy` (VCAP_SERVICES style)\r\n\r\nThe first way to trigger a deployment is to send a HTTP POST request to the url `http(s)://<hostname>:<port>/v1/deploy`. The body simply consists of a JSON object containing replacements for several of the HDI deployer's environment variables. Supported are replacements for:\r\n\r\n- `HDI_DEPLOY_OPTIONS`\r\n- `DEPLOY_ID`\r\n- `TARGET_CONTAINER`\r\n- `SERVICE_REPLACEMENTS`\r\n- `VCAP_SERVICES`\r\n\r\nIn addition to providing `VCAP_SERVICES` for replacing the corresponding environment variable it is also possible to provide `ADDITIONAL_VCAP_SERVICES`. The deployer is then called with service bindings created from the `VCAP_SERVICES` of the dynamic deployer by adding the service definitions given by `ADDITIONAL_VCAP_SERVICES`.\r\nThe `ADDITIONAL_VCAP_SERVICES` object has the same structure as the original `VCAP_SERVICES`, i.e. it contains lists of service bindings.\r\nIf the request contains `ADDITIONAL_VCAP_SERVICES`, the server scans through all of its services and either adds the list of bindings to the `VCAP_SERVICES` environment variable or merges the two lists in case bindings for the given service already exist.\r\nExisting bindings with the same name are replaced with the bindings from `ADDITIONAL_VCAP_SERVICES`.\r\n\r\nExample:\r\n```\r\n{\r\n    \"TARGET_CONTAINER\": \"hdi_container_service_name\",\r\n    \"ADDITIONAL_VCAP_SERVICES\": {\r\n        \"hana\" : [ {\r\n            \"name\" : \"hdi_container_service_name\",\r\n            \"label\" : \"hana\",\r\n            \"tags\" : [ \"hana\", \"database\", \"relational\" ],\r\n            \"plan\" : \"hdi-shared\",\r\n            \"credentials\" : {\r\n                \"schema\" : \"DB_EXAMPLE\",\r\n                \"hdi_password\" : \"hdi_password\",\r\n                \"password\" : \"password\",\r\n                \"driver\" : \"com.sap.db.jdbc.Driver\",\r\n                \"port\" : \"30015\",\r\n                \"host\" : \"srv1234567.host.name\",\r\n                \"db_hosts\" : [ {\r\n                 \"port\" : 30015,\r\n                 \"host\" : \"srv7654321.host.name\"\r\n                } ],\r\n                \"hdi_user\" : \"hdi_user\",\r\n                \"user\" : \"user\",\r\n                \"url\" : \"jdbc:sap://srv1234567.host.name:30015/?currentschema=DB_EXAMPLE\"\r\n            }\r\n        } ]\r\n    }\r\n}\r\n```\r\n\r\n#### Deployment via `http(s)://<hostname>:<port>/v1/deploy/to/instance` (Instance Manager style)\r\n\r\nSince version 1.2.0 of the dynamic deployer there is a second way to trigger a deployment by sending a HTTP POST request to the url `http(s)://<hostname>:<port>/v1/deploy/to/instance`. The request body is simply a managed service instance as retrieved from the Instance Manager with a HTTP GET.\r\n\r\nSince version 2.3.2 of the dynamic deployer the request body can be a managed service instance as retrieved from the Instance Manager or Service Manager with a HTTP GET.\r\n\r\nExample: Instance Manager\r\n\r\n```\r\n{\r\n  \"tenant_id\": \"1\",\r\n  \"id\": \"da7ff475-fd3f-4a86-a3e7-cd3e41e3653d\",\r\n  \"binding_id\": \"3bb96cab-0bec-4088-9991-244b750e53b3\",\r\n  \"instance_id\": \"d9cc0aef-16f7-40d2-8e10-1816b9214f2e\",\r\n  \"managed_service_id\": \"79d9e11a-95c2-4771-ae2d-8ba703bd8fda\",\r\n  \"managed_plan_id\": \"bebaad3e-352b-4928-bc6b-8783d754ac3b\",\r\n  \"managed_instance_id\": \"0a4d365a-eec5-4083-85ae-677f77bb6f5d\",\r\n  \"managed_binding_id\": \"a5cba4c8-95a3-42c8-982d-e075d0a6b941\",\r\n  \"status\": \"CREATION_SUCCEEDED\",\r\n  \"updated_on\": 1494322225942,\r\n  \"credentials\": {\r\n    \"host\": \"srv1234567.host.name\",\r\n    \"port\": \"30015\",\r\n    \"driver\": \"com.sap.db.jdbc.Driver\",\r\n    \"url\": \"jdbc:sap://srv1234567.host.name:30015/?currentschema=55D392C7232649E8A2F08993645B28B5\",\r\n    \"schema\": \"55D392C7232649E8A2F08993645B28B5\",\r\n    \"hdi_user\": \"SBSS_78283957013891283645150604040575244555286482237534978212872169092\",\r\n    \"hdi_password\": \"password\",\r\n    \"user\": \"SBSS_92380540949443696814788249184554628165227387555319796659663474608\",\r\n    \"password\": \"password\"\r\n  }\r\n}\r\n```\r\n\r\nExample: Service Manager\r\n\r\n```\r\n{\r\n  \"id\": \"da7ff475-fd3f-4a86-a3e7-cd3e41e3653d\",\r\n  \"ready\": true,\r\n  \"service_instance_id\": \"790e19ae-b9f7-4d80-8e4d-d368d96f79bd\",\r\n  \"last_operation\": {\r\n        \"id\": \"e9061cfe-b70a-405b-a402-084b3ec74711\",\r\n        \"ready\": true,\r\n        \"type\": \"create\",\r\n        \"state\": \"succeeded\",\r\n        \"resource_id\": \"bf24e49c-fd62-4ad4-83fc-6c09132f8cf7\",\r\n        \"resource_type\": \"/v1/service_bindings\",\r\n        \"platform_id\": \"service-manager\",\r\n        \"correlation_id\": \"ec849486-34b3-40ac-71e6-baf91c91cd0b\",\r\n        \"reschedule\": false,\r\n        \"reschedule_timestamp\": \"0001-01-01T00:00:00Z\",\r\n        \"deletion_scheduled\": \"0001-01-01T00:00:00Z\",\r\n        \"created_at\": \"2021-11-02T09:22:47.667677Z\",\r\n        \"updated_at\": \"2021-11-02T09:22:49.288825Z\"\r\n    },\r\n  \"name\": \"91ce8c49-a1c8-4557-8b25-0e2c4034a4cf\",\r\n  \"credentials\": {\r\n    \"host\": \"srv1234567.host.name\",\r\n    \"port\": \"30015\",\r\n    \"driver\": \"com.sap.db.jdbc.Driver\",\r\n    \"url\": \"jdbc:sap://srv1234567.host.name:30015/?currentschema=55D392C7232649E8A2F08993645B28B5\",\r\n    \"schema\": \"55D392C7232649E8A2F08993645B28B5\",\r\n    \"hdi_user\": \"SBSS_78283957013891283645150604040575244555286482237534978212872169092\",\r\n    \"hdi_password\": \"password\",\r\n    \"user\": \"SBSS_92380540949443696814788249184554628165227387555319796659663474608\",\r\n    \"password\": \"password\"\r\n  }\r\n}\r\n```\r\n\r\n#### The response from the dynamic deployer\r\n\r\nIf there was no problem with the basic authentication and the request reaches the dynamic deployer, it usually responds with status code 200 and a json body containing the result of the deployment. The response body has the following form:\r\n\r\n```\r\n{\r\n  messages: [<list of result messages from the di server>],\r\n  exitCode: <exit code of the call to the deployer app>\r\n}\r\n```\r\n\r\n**IMPORTANT:** A status code of 200 does not mean that the deployment was successful. It just means that the dynamic deployer was able to call the (non-dynamic) deployer. If the deployer finished with no errors the `exitCode` attribute of the response is `0`, otherwise it is `1`. More detailed information about the deployment can be retrieved from the `messages` attribute of the response.\r\n\r\n### Asynchronous deployment\r\n\r\nSince version 1.7.0 of the dynamic deployer there is a third way to trigger a deployment by sending a HTTP POST request to the url `http(s)://<hostname>:<port>/v1/deploy/to/instance/async`. The request body is simply a managed service instance as retrieved from the Instance Manager with a HTTP GET, i.e. the same as for `http(s)://<hostname>:<port>/v1/deploy/to/instance`. But instead of waiting until the deployment is done and then returning the results, a GUID is returned.\r\n\r\nSince version 2.3.2 of the dynamic deployer the request body can be a managed service instance as retrieved from the Instance Manager or Service Manager with a HTTP GET.\r\n\r\nThis GUID can be used to query the status of the deployment by sending a GET request to `http(s)://<hostname>:<port>/v1/status/:guid` - if the deployment is still running, the response just contains a `status` property. If the deployment is finished, the usual response is returned - in conjunction with the `status` property.\r\n\r\n\r\n## How to use it in a multi-target application\r\n\r\nA multi-target application (MTA) for multi-tenancy scenarios with the instance manager typically includes multiple db modules:\r\n- N static db modules (`type: com.sap.xs.hdi`), e.g. for configuration or shared data. A static module depends on `@sap/hdi-deploy`; it does not depend on `@sap/hdi-dynamic-deploy`.\r\n- M dynamic db modules (`type: com.sap.xs.hdi-dynamic`) where the business data for a certain type of tenant is contained. A dynamic module depends on `@sap/hdi-dynamic-deploy`, which internally depends on `@sap/hdi-deploy` for deployment to the correct tenant.\r\n \r\nExample:\r\n```\r\nmodules:\r\n  - name: db-static-1\r\n    type: com.sap.xs.hdi\r\n    path: db-static-1\r\n    \r\n  - name: db-static-2\r\n    type: com.sap.xs.hdi\r\n    path: db-static-2\r\n    \r\n  - name: db-dynamic-1\r\n    type: com.sap.xs.hdi-dynamic\r\n    path: db-dynamic-1\r\n    \r\n  - name: db-dynamic-2\r\n    type: com.sap.xs.hdi-dynamic\r\n    path: db-dynamic-2\r\n    \r\n  - name: db-dynamic-3\r\n    type: com.sap.xs.hdi-dynamic\r\n    path: db-dynamic-3\r\n```\r\n\r\n## Accessing the underlying HTTP server\r\nBy requiring the dynamic deploy package, you can access the internal HTTP server. This way, you can decide when to start/stop the server.\r\n\r\nThe exported object offers two methods:\r\n```javascript\r\n    /**\r\n     * Start the HTTP server on this.port.\r\n     *\r\n     * @param {any} cb Callback function (error, result).\r\n     * @returns {undefined}\r\n     */\r\n    function start(cb){\r\n      <..>\r\n    };\r\n\r\n    /**\r\n     * Stop the HTTP server.\r\n     *\r\n     * @param {any} cb Callback function (error, result).\r\n     * @returns {undefined}\r\n     */\r\n    function stop(cb){\r\n      <..>\r\n    };\r\n```\r\nFurthermore, the object has the property `port`. This has to be set to the port that you want the server to listen on.\r\n\r\nExample:\r\n```javascript\r\n'use strict';\r\n\r\nconst {server} = require('@sap/hdi-dynamic-deploy/index');\r\n\r\nserver.port = process.env.PORT;\r\nserver.start(function(){\r\n  console.log(`@sap/hdi-dynamic-deploy HTTP server up and running, listening on port ${  server.port}`);\r\n});\r\n```\r\n## Accessing the router functions\r\nBy requiring the dynamic deploy package, you can access the functions used for the API endpoints and can use them in your own router.\r\nBoth functions expect two parameters: \r\n  - A HTTP request object\r\n  - A HTTP response object\r\n\r\nExample:\r\n```javascript\r\n'use strict';\r\n\r\nconst {deploy_to_instance, deploy} = require('@sap/hdi-dynamic-deploy/index');\r\n\r\n/** \r\n * Now the functions can be added to a router.\r\n * \r\n * deploy_to_instance is the function used for the /v1/deploy/to/instance route\r\n * deploy is the function used for the /v1/deploy route\r\n * \r\n */\r\n```\r\n"}]