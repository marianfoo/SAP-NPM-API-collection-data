[{"name":"README.md","content":"# @sap/destination-instance-service-provider\r\n\r\n## Overview\r\n\r\n**destination-instance-service-provider** is an npm package that provides the APIs necessary for exposing destination service instance systems and services.\r\n\r\n## Usage\r\n\r\nTo add this package as a dependency in your **package.json** file, under the \"dependencies\" section, add the following dependency: `\"@sap/destination-instance-service-provider\": [Version]`\r\n\r\n## APIs\r\n\r\nThis repository exposes APIs for the exploration of SAP systems and services that are consumed from Cloud Foundry destination service instances.\r\n\r\n### init\r\n\r\nThis API initializes a provider repository representing a given destination instance.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; If cfTarget is not provided, there is an assumption that the user is already logged in to a Cloud Foundry space. The destination instance will be retrieved from this Cloud Foundry space.\r\n\r\n`async init(destinationInstanceName: string, cfTarget?: cfTools.ITarget): Promise<void>`\r\n\r\n**destinationInstanceName**: Defines the name of the destination service instance from which the systems will be retrieved.  \r\n**cfTarget (this is optional)**: Defines the Cloud Foundry configuration that can be used as a parameter to access the service instance.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _CF_CONFIGURATION_: This error is displayed if the user is not properly logged in to the Cloud Foundry space.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _RETRIEVE_DATA_: This error is displayed if the system cannot retrieve information from Cloud Foundry.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _INTERNAL_ERROR_: This error is displayed for any other exception.\r\n\r\n### getSystems\r\n\r\nThis API retrieves systems exposed by the service instance that initialized the provider.\r\n\r\n`async getSystems(filter?: Filter): Promise<ProviderSystem[]>`\r\n\r\n**filter (this is optional)**: Only retrieves systems that comply with the given filter.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _RETRIEVE_DATA_: This error is displayed if data cannot be retrieved from the system.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _INTERNAL_ERROR_: This error is displayed for any other exception.\r\n\r\n### getServices\r\n\r\nThis API retrieves services exposed by a specific system.\r\n\r\n`async getServices(options?: Record<string, any>): Promise<Service[]>`\r\n\r\n**options (this is optional)**: The following parameters are optional:  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _credentials (this is optional)_: for services that require authentication.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _filter (this is optional)_: used to filter for relevant services.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _RETRIEVE_DATA_: This error is displayed if data cannot be retrieved from the system.\r\n&nbsp;&nbsp;&nbsp;&nbsp; _INTERNAL_ERROR_: This error is displayed for any other exception.\r\n\r\n### getMetadata\r\n\r\nThis API retrieves metadata exposed by a specific system.\r\n\r\n`async getMetadata( service: Service, encoding: EncodingMode, options?: Record<string, any> ): Promise<ServiceMetadata>`\r\n\r\n**service**: Defines the service from which the metadata will be retrieved.  \r\n**encoding**: Defines the required encoding requested by the consumer.  \r\n**options (this is optional)**: The following parameters are optional:  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _credentials (this is optional)_: for services that require authentication.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _filter (this is optional)_: used to filter for relevant services.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _relativeUrl_ (this is optional)*: for a non-full URL - provides the relative URL to the service.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *RETRIEVE_DATA*: This error is displayed if metadata cannot be retrieved from the service.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *INTERNAL_ERROR\\*: This error is displayed for any other exception.\r\n\r\n### getAnnotations\r\n\r\nThis API retrieves an array of annotations exposed by a specific system.\r\n\r\n`async getAnnotations(service: Service, options?: Record<string, any>): Promise<Annotation[]`\r\n\r\n**service**: Defines the service from which the annotations will be retrieved.  \r\n**options (this is optional)**: The following parameters are optional:  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _credentials (this is optional)_: for services that require authentication.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _RETRIEVE_DATA_: This error is displayed if annotations cannot be retrieved from the service.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; _INTERNAL_ERROR_: This error is displayed for any other exception.\r\n\r\n## Examples\r\n\r\n_Initialize repository - Provides the destination service instance name._  \r\n`await destInstRepo.init(\"SAP-IT-destination\");`\r\n\r\n_List the destination instance systems (destinations)._  \r\n`const instSystems = await destInstRepo.getSystems();`\r\n\r\n_Create credentials object - Used to access a system or service that requires authentication._  \r\n`const credentials = getCredentialsObject(\"username\", \"password\");`\r\n\r\n_Select a system and list the services it provides (catalog services)._  \r\n_Note: Add credentials since the system needs authentication._  \r\n`const instSelectedSystem = findByName(instSystems, \"U1Y010_BASIC\");`  \r\n`const instServices = await instSelectedSystem.getServices({credentials: credentials});`\r\n\r\n_Create a filter object - Used to filter for required services._  \r\n`const filter = getNewFilter(\"protocol\", [\"odatav2\"]);`\r\n\r\n_Select a service and consume the metadata and annotations that the service provides._  \r\n_Note: Add credentials since the system needs authentication._  \r\n`const instSelectedService = findByName(instServices, \"ZPAGE_BUILDER_CUST\");`  \r\n`const instMetadata = await instSelectedSystem.getMetadata(instSelectedService, instProvider.EncodingMode.XML, {credentials: credentials, filter: filter});`  \r\n`const instAnnotations = await instSelectedSystem.getAnnotations(instSelectedService, {credentials: credentials});`\r\n\r\n- **credentials**: An object that enables you to add credentials to your system request.  \r\n   &nbsp;&nbsp;&nbsp;&nbsp; _USER_: system username  \r\n   &nbsp;&nbsp;&nbsp;&nbsp; _PSW_: system password  \r\n   Credentials can be built as follows:\\*  \r\n   credentials = new Authentication(<USR>, <PSW>);\r\n\r\n- **filter**: An object that enables you to filter for systems that you want to receive.  \r\n   &nbsp;&nbsp;&nbsp;&nbsp; _FILTER_KEY_: (string) A key used to filter the list of systems.  \r\n   &nbsp;&nbsp;&nbsp;&nbsp; _FILTER_VALUES_: (array of strings) accepted values of the filter key, separated by commas.  \r\n   Filters can be built as follows:  \r\n   filter = new Filter(new Map([[<FILTER_KEY>, <FILTER_VALUES>]]));\r\n\r\n### Git and GitHub\r\n\r\n1. Open Git Bash, go to the local repository directory, and sync with the remote repository.\r\n\r\n2. Develop in a **Local** branch.\r\n\r\n- Create a new descriptive branch `git checkout -b my-local-branch-name` <br>**OR** rename the previous one `git branch -m my-local-branch-name`.\r\n- Make sure _my-local-branch-name_ is **NOT master** and that there is **no existing** branch with this name.\r\n\r\n3. Sync with the remote repository.\r\n\r\n- Fetch the code from the master branch by running `git fetch; git merge`.\r\n\r\n4. Make your local changes.\r\n\r\n- Run `npm install` to install dependencies.\r\n- Run `npm run test` to compile the TypeScript code to JavaScript and run tests.\r\n\r\n5. Commit and push.\r\n\r\n- **Do not push directly to master!!!**\r\n- Commit your changes and push to create a new branch on GitHub by running `git push origin my-local-branch-name`\r\n- For consecutive commits, **DO NOT** use `commit amend`. You should create a new commit and push to the same feature branch again. This will add an extra commit to your pull request and retrigger the voters.\r\n\r\n6. Open a pull request.\r\n\r\n- Click 'New pull request' next to your branch.\r\n- Edit the pull request name with BLI or BCP. For example: _\"BLI DEVXCORE-123: my new feature\"_ or _\"BCP 1670451810: Fix my bug\"_.\r\n- A new branch _(my-local-branch-name)_ is created in the GitHub repository.\r\n- The new code should enable all voters and code review to pass successfully.\r\n\r\n7. Update the existing pull request.\r\n\r\n- Stage your changes and create a new commit.\r\n- Perform Git fetch.\r\n- Perform Git merge on origin/master - Merge your changes with the most updated master branch.\r\n- Push your changes to your _my-local-branch-name_ (Git push origin _my-local-branch-name_).\r\n\r\n8. Merge the pull request.\r\n\r\n- If all voters passed (XMake + JaaS Voter), click 'Merge pull request'.\r\n- If your pull request contains several commits, you combine them in one commit from GitHub by selecting the 'Confirm squash and merge' option from the Merge dropdown list.\r\n\r\n9. Delete your branch.\r\n\r\n- After the merge is complete, go to **Code > Branches**.\r\n- Look for your merged pull request and click the delete branch icon.\r\n\r\n### Tests and Coverage\r\n\r\n- Run `npm run test` to run the unit tests written in Mocha and the coverage test.\r\n\r\n## Release\r\n\r\nBump the version in the \"package.json\" GitHub file.\r\n\r\n**_Notes:_**\r\nMake sure to follow this versioning concept:\r\n\r\n- When providing new features (when releasing at the end of the sprint or when a new feature is ready), bump a major version (for example, from 1.1.0 to 1.2.0).\r\n- When providing a bug fix to an existing version (\"hotfix\"), bump a minor version (for example, from 1.1.0 to 1.1.1).\r\n"}]