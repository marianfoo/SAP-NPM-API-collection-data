[{"name":"CHANGELOG.md","content":"## 4.3.1\r\nFeatures:\r\n- Use async 3.2.3\r\n\r\n## 4.3.0\r\nFeatures:\r\n- Choice of using either hana-client or hdb\r\n- hana-client ^2 >= 2.5 support\r\n- hdb ^0 support\r\n\r\n## 4.2.0\r\nFeatures:\r\n- hana-client 2.10.x support\r\n- added APIs `getDefaultContainerRoleAdminPrivileges`, `getDefaultCommonPrivileges` and `grant/revokeDISupportPrivilege` to HDI-API\r\n- added APIs `import/exportContainerForCopy` and `getDependencies` to Container-API\r\n- added APIs `import/exportContainerForCopy`, `grant/revokeContainerSupportPrivileges`, `getDefaultContainerRoleAdminPrivileges`, `getDefaultCommonPrivileges` and `enable/disableContainerUser` to ContainerGroup-API\r\n\r\n## 4.1.0\r\nFeatures:\r\n- Node 16.x support\r\n- hana-client 2.9.x support\r\n\r\nRemoved:\r\n- Node 8.x and 10.x support\r\n\r\n## 4.0.2\r\nFeatures:\r\n- hana-client 2.8.x support\r\n\r\n## 4.0.1\r\nFixes:\r\n- Cleanup package.json\r\n\r\n## 4.0.0\r\nChanges:\r\n- Moved hana-client from dependencies to peerDependencies, supported are versions 2.7.x\r\n\r\n## 3.0.2\r\nFeatures:\r\n- Use hana-client 2.7.21\r\n\r\n## 3.0.1\r\nFixes:\r\n- Correctly remove devDependencies and integrity hashes from npm-shrinkwrap.json\r\n\r\n## 3.0.0\r\nFeatures:\r\n- Use hana-client 2.7.16\r\n- Node 14.x support\r\n\r\nRemoved:\r\n- Node 6.x support\r\n\r\n## 2.2.7\r\nFixes:\r\n- Renamed developer-license-3.1.txt to LICENSE\r\n\r\n## 2.2.6\r\nFeatures:\r\n- Use hana-client 2.4.202\r\n\r\n## 2.2.5\r\nFeatures:\r\n- Use hana-client 2.4.182\r\n- Node 12.x support\r\n\r\n## 2.2.4\r\nFeatures:\r\n- Use hana-client 2.4.162\r\n\r\n## 2.2.3\r\nFeatures:\r\n- Use async 3.1.0 - removes lodash dependency\r\n\r\n## 2.2.2\r\nFeatures:\r\n- Updated dependencies\r\n- Node 10.x support\r\n\r\n## 2.2.1\r\nFixes:\r\n- Fixed bug that caused errors to be reported, even though only warnings occurred\r\n\r\n## 2.2.0\r\nFeatures:\r\n- Partially apply arguments and return function if no callback is supplied\r\n\r\n## 2.1.2\r\nFeatures:\r\n- Updated dependencies\r\n\r\n## 2.1.1\r\nFixes:\r\n- Error with npm-shrinkwrap.json\r\n\r\n## 2.1.0\r\nFeatures:\r\n- Added quoting of schema names\r\n- Switched from hdb to the official @sap/hana-client\r\n\r\n## 2.0.3\r\nFixes:\r\n- Locking now uses a second connection\r\n- Improved typeCheck to correctly detect arrays when using the API with xsjs\r\n\r\n## 2.0.2\r\nFeatures:\r\n- Passes a complete credentials object to the hdb driver, which allows passing additional parameters to the hdb connection.\r\n- Allows all instances of Readable as content for FileWithContent or FolderWithContent\r\n\r\nFixes:\r\n- Fixed a spelling error in ResultTuple\r\n\r\n## 2.0.1\r\nFixes:\r\n- Fixed a type check error when passing an empty array as parameter\r\n\r\n## 2.0.0\r\nFeatures:\r\n- Provides access to the Container Group API\r\n- Clearer split between the APIs, different classes for SYS_DI, Container and Container Group API\r\n- Removed dependency on async library\r\n"},{"name":"README.md","content":"@sap/hdi\r\n===============\r\n\r\n`@sap/hdi` is a [Node.js](https://nodejs.org) library that allows access to the SQL based API through Node.js. It provides access to the HDI-, Container-Group- and the Container-API.\r\n\r\n## Table of contents\r\n **Using the library**:\r\n- [General things](#general-things)\r\n- [Using the HDI API](#using-the-hdi-api)\r\n- [Using the Container Group API](#using-the-container-group-api)\r\n- [Using the Container API](#using-the-container-api)\r\n- [Using the API with xsjs](#using-the-api-with-xsjs)\r\n\r\n## General things\r\n\r\nNote: Either [@sap/hana-client](https://www.npmjs.com/package/@sap/hana-client) or [hdb](https://www.npmjs.com/package/hdb) must be installed by yourself. \r\n@sap/hana-client versions ^2 >= 2.5 are currently supported by @sap/hdi 4.3.0.\r\nTo install the latest @sap/hana-client simply run `npm install @sap/hana-client`.\r\n\r\nhdb version ^0 is currently supported by @sap/hdi 4.3.0.\r\nTo install the latest hdb simply run `npm install hdb`.\r\n\r\nRunning `npm install --save @sap/hdi` will install the package and add it as a dependency to your **package.json**.\r\n\r\nWe recommend using version 2.0.0 or higher. >=2.0.0 of the API brings access to the Container Group API, major refactoring of the HDI and Container API into separate components and lots of pre-defined classes to make working with the API easier.\r\n\r\nNote that >=2.0.0 is not backwards compatible to 1.x, code written with the old API will ***NOT*** run with new API. This documentation is for the 3.x API.\r\n\r\nAll APIs require that the connected user has EXECUTE privileges for the corresponding SQL procedures and SELECT for all table types in SYS_DI (TT*).\r\n\r\nAlmost all methods are asynchronous and require a standard node-style callback, where the first parameter is any errors that occurred and the second is the result.\r\nIf no callback is supplied, the arguments will be partially applied and a function will be returned, taking a callback as the first and only parameter. This way, the methods can be easily chained via async.\r\n\r\nIf you are using the methods in the easily chainable way, the error parameter will be supplied if the return code of the HDI call is not equal 0. If you are using the \"normal\" way, the error-parameter is only supplied when a \"technical\" error occurs. To check if the action was successful, you need to check the return code (rc) of the returned result. In order to \"automate\" this, you can wrap your callback with the function below:\r\n\r\n```javascript\r\nfunction wrap (callback) {\r\n  return function (error, result) {\r\n    if (error) {\r\n      return callback(error);\r\n    } else {\r\n      if (result.rc && result.rc !== 0) {\r\n        const e = new Error('HDI call failed!')\r\n        e.result = result\r\n        return callback(e, result);\r\n      } else {\r\n        return callback(null, result);\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n**This document only provides a really high-level and shallow overview of the API. For a more detailed, technical documentation, refer to the JSDoc. To generate the documentation, run `npm install jsdoc`,`npm install ink-docstrap` and then `npm run documentation`. The documentation can then be found in the `docs` folder.**\r\n\r\n## Using the HDI API\r\nAccess to the _SYS_DI API is provided by the `HDI` class. Access to this API requires HANA server version: 1.00.120 or newer. To work with the API, simply construct a new object, as can be seen in the following (ES6-based) example:\r\n\r\n```javascript\r\n'use strict';\r\nconst { HDI } = require('@sap/hdi');\r\n\r\n// This credentials object will be directly passed to the @sap/hana-client or hdb client. Any options accepted by the @sap/hana-client or hdb clients can be passed.\r\nconst credentials = {\r\n    host : <host>,\r\n    port : <port>,\r\n    user : <user>,\r\n    password: <password>\r\n};\r\n\r\nconst hdi = new HDI(credentials, parameterSchema, usehdb);\r\n\r\nhdi.connect((error,result) => {\r\n  if(error){\r\n    throw error;\r\n  }\r\n\r\n  hdi.listLibraries(null,(error,result) => {\r\n    if(error){\r\n      throw error;\r\n    }\r\n\r\n    console.log(result);\r\n  })\r\n})\r\n```\r\n\r\nTo construct an access object, you need the credentials for the HANA system and the `parameterSchema`. This schema will be used to create temporary tables to supply data to the underlying sql procedures.\r\n\r\n## Using the Container Group API\r\nThe Container Group API provides access to an **existing** container group. In order to use the API, you might need to first grant the correct rights by using `grantContainerGroupAPIPrivileges` of the HDI class.\r\n\r\nTo construct an access object, you need the credentials for the HANA system, the `parameterSchema` and the name of the container group.\r\n\r\n## Using the Container API\r\nThe Container API provides access to an **existing** container. In order to use the API, you might need to first grant the correct rights by using `grantContainerAPIPrivileges` of the ContainerGroup class.\r\n\r\nTo construct an access object, you need the credentials for the HANA system, the `parameterSchema` and the name of the container.\r\n\r\nExample: Deploying files to an existing container, assuming that the container exists and has been configured correctly.\r\n\r\n```javascript\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\nconst async = require('async');\r\nconst path = require('path');\r\n\r\nconst {Container, HDI, FileWithContent, FolderWithContent, File, Parameter} = require('@sap/hdi');\r\n\r\n// This credentials object will be directly passed to the @sap/hana-client or hdb client. Any options accepted by the @sap/hana-client or hdb clients can be passed.\r\nconst credentials = {\r\n  host: 'host',\r\n  port: 'port',\r\n  user: 'user',\r\n  password: 'password'\r\n};\r\n\r\nconst containerName = 'container_name';\r\n\r\n\r\nconst container = new Container(containerName, // Name of the container. Does not have to exist yet but has to exist before calling any methods.\r\n  credentials, // Credentials to use for the HANA system.\r\n  credentials.user // Schema where the user used for the connection has privileges to create temporary tables, for example the user's own schema.\r\n);\r\n\r\nconst fPath = 'folder/';\r\n\r\nconst cPath = 'folder/.hdiconfig';\r\nconst cContent = fs.createReadStream(`${__dirname}${path.sep}testdata${path.sep}.hdiconfig`);\r\n\r\nconst tPath = 'folder/table1.hdbtable';\r\nconst tContent = fs.createReadStream(`${__dirname}${path.sep}testdata${path.sep}table1.hdbtable`);\r\n\r\nconst rContent = fs.createReadStream(`${__dirname}${path.sep}testdata${path.sep}role.hdbrole`);\r\nconst rPath = 'folder/role.hdbrole';\r\n\r\nconst filesFoldersContent = [\r\n  new FolderWithContent(fPath),\r\n  new FileWithContent(cPath, cContent),\r\n  new FileWithContent(tPath, tContent),\r\n  new FileWithContent(rPath, rContent)\r\n];\r\n\r\nconst files = [new File(rPath), new File(cPath), new File(tPath)];\r\nconst params = [new Parameter('ignore_work', 'TRUE'), new Parameter('ignore_deployed', 'TRUE')];\r\n\r\n\r\nfunction wrap (callback) {\r\n  return function (error, result) {\r\n    if (error) {\r\n      return callback(error);\r\n    } else {\r\n      if (result.rc && result.rc !== 0) {\r\n        const e = new Error('HDI call failed!')\r\n        e.result = result\r\n        return callback(e, result);\r\n      } else {\r\n        return callback(null, result);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst tasks = [\r\n  (cb) => containerUser.connect(wrap(cb)),\r\n  (cb) => containerUser.lock(0, null, wrap(cb)),\r\n  (cb) => containerUser.write(filesFoldersContent, null, wrap(cb)),\r\n  (cb) => containerUser.status(null, null, wrap(cb)),\r\n  (cb) => containerUser.list(null, null, wrap(cb)),\r\n  (cb) => containerUser.make(files, null, null, null, wrap(cb)),\r\n  (cb) => containerUser.unlock(wrap(cb)),\r\n  (cb) => {\r\n    containerUser.disconnect(); cb(null, 'OK: disconnected.');\r\n  }\r\n];\r\n\r\nasync.series(tasks, (e, results) => {\r\n  if(e){\r\n    console.error(e);\r\n    process.exit(1);\r\n  } else {\r\n    console.log(results);\r\n\r\n    /**\r\n      Work with the results.\r\n    **/\r\n  }\r\n});\r\n```\r\n\r\n## Using the API with xsjs\r\nSince most of the methods of the HDI, ContainerGroup and Container class are asynchronous, you need to use the provided `sync` functionality to use them in xsjs code.\r\nBe aware that this requires a version of xsjs that uses at least `\"@sap/fibrous\": \"0.5.0-0\"` as a dependency. This fixes issues with `sync` in combination with class methods.\r\n\r\nIf your version of xsjs is up to date in that regard, simply add `sync` before your method calls. This\r\n\r\n```javascript\r\nconst { HDI } = require('@sap/hdi');\r\n\r\n// This credentials object will be directly passed to the @sap/hana-client or hdb client. Any options accepted by the @sap/hana-client or hdb clients can be passed.\r\nconst credentials = {\r\n    host : <host>,\r\n    port : <port>,\r\n    user : <user>,\r\n    password: <password>\r\n};\r\n\r\nconst hdi = new HDI(credentials, parameterSchema, usehdb);\r\n\r\nhdi.connect((error,result) => {\r\n  if(error){\r\n    throw error;\r\n  }\r\n\r\n  hdi.listLibraries(null,(error,result) => {\r\n    if(error){\r\n      throw error;\r\n    }\r\n\r\n    console.log(result);\r\n  })\r\n})\r\n```\r\nturns into this:\r\n```javascript\r\nvar { HDI } = $.require('@sap/hdi');\r\n\r\n// This credentials object will be directly passed to the @sap/hana-client or hdb client. Any options accepted by the @sap/hana-client or hdb clients can be passed.\r\nvar credentials = {\r\n    host : <host>,\r\n    port : <port>,\r\n    user : <user>,\r\n    password: <password>\r\n};\r\n\r\nvar hdi = new HDI(credentials, parameterSchema, usehdb);\r\n\r\nhdi.sync.connect();\r\nvar libraries = hdi.sync.listLibraries(null);\r\nconsole.log(libraries);\r\n```\r\n"}]