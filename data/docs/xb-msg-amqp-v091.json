[{"name":"CHANGELOG.md","content":"# Change Log\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## [0.9.10] - 2020-06-25\r\n\r\n- added: license file for new delivery channel\r\n- fixed: newer Node.js version for unit tests and coverage\r\n\r\n## [0.9.9] - 2019-12-11\r\n\r\n## [0.9.6] - 2019-02-11\r\n\r\n## [0.9.5] - 2019-02-11\r\n\r\n## [0.9.4] - 2019-02-11\r\n\r\n## [0.9.2] - 2018-05-30\r\n\r\n- encoder /decoder refactoring, same structure like in amqp 1.0\r\n- all failed callbacks will not provide an error object anymore if the pending call was discarded due to client disconnect; one can now distinguish real errors from discarded calls\r\n\r\n### Added\r\n\r\n### Changed\r\n\r\n### Removed\r\n"},{"name":"README.md","content":"# AMQP 0.9.1 Client Library\r\nProvides a client implementation for AMQP v0.9.1\r\n\r\n## Table of contents\r\n* [Prerequisites](#prerequisites)\r\n* [Install](#install)\r\n* [Overview](#overview)\r\n* [Getting started](#getting-started)\r\n* [API](#api)\r\n\r\n## Prerequisites\r\n\r\nMake sure to have a message broker available, e.g. [RabbitMQ](https://www.rabbitmq.com/download.html).\r\n \r\n## Install\r\n\r\nSee also:\r\n[https://www.npmjs.com/package/@sap/xb-msg-amqp-v091](https://www.npmjs.com/package/@sap/xb-msg-amqp-v091)\r\n\r\nTo add it to your project run:\r\n```bash\r\nnpm i @sap/xb-msg-amqp-v091\r\n```\r\n\r\nTo generate complete API documentation run inside the library package folder\r\n```bash\r\nnpm run doc\r\n```\r\n\r\n## Overview\r\n\r\nThis library provides a messaging client for [AMQP v0.9.1](http://www.amqp.org/specification/0-9-1/amqp-org-download).\r\nA single client instance represents one connection to the broker.\r\nEither TLS or NET socket is used depending on defined client options.\r\n\r\nThe API works completely asynchronous based on callbacks, often providing also done (resolve) and failed (reject) callbacks.\r\nThis means it would be simple to use Promise objects in the application even if the client library so far does not use it.\r\n\r\nAMQP v0.9.1 defines [classes and methods](http://www.rabbitmq.com/amqp-0-9-1-reference.html) (like remote procedure calls). Unfortunately, some of them do not allow a key-based mapping of responses to requests. Hence, for those methods the client has to wait for the response before a second request can be sent. The client encapsulates this and behaves always asynchronous for the caller.\r\n\r\n## Getting started\r\n\r\nThere are examples:\r\n* How to use plain API directly [publisher.js](examples/publisher.js) and [subscriber.js](examples/subscriber.js)\r\n* How to use unified streams [producer.js](examples/producer.js) and [consumer.js](examples/consumer.js)\r\n\r\nIt shall run with defaults immediately if a RabbitMQ is installed at localhost:5672 with user guest/guest.\r\n \r\nAll examples accept individual settings, e.g. to use a remote host or to try different settings.\r\nIt can be provided with a js-file given as command line parameter. The file shall just export the options.\r\nRun it like this if the file is stored in folder ```config```, same level as ```examples```.\r\n\r\n```bash\r\nnode .\\examples\\producer.js ..\\config\\my-options.js\r\n```\r\n\r\nFeel free to start testing with the following file content:\r\n\r\n```bash\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    net: {\r\n        host          : '127.0.0.1',\r\n        port          : 5672\r\n    },\r\n    sasl: {\r\n        mechanism     : 'PLAIN',\r\n        user          : 'guest',\r\n        password      : 'guest'\r\n    },\r\n    amqp: {\r\n        vhost         : '/'\r\n    }\r\n    data: {\r\n        exchange      : 'amq.topic',\r\n        routingKey    : 'a.b.c',\r\n        confirms      : true,  // producer\r\n        noAck         : false, // consumer\r\n        prefetchCount : 1000,  // consumer\r\n        payload       : Buffer.allocUnsafe(50).fill('X'),\r\n        maxCount      : 10000,\r\n        logCount      : 1000\r\n    }\r\n};\r\n```\r\n\r\nThe `data` section is ignored by the client, it is just used by the example programs.\r\n\r\n## API\r\nCreate a client instance:\r\n```bash\r\nconst options = {\r\n    tls: {\r\n        host: 'localhost',\r\n        port: 5671,\r\n        ca: [\r\n            fs.readFileSync('../truststore/cacert.pem'),\r\n            fs.readFileSync('../truststore/cert.pem')\r\n        ]\r\n    },\r\n    net: {\r\n        host: 'localhost',\r\n        port: 5672,\r\n    },\r\n    sasl: {\r\n        user: 'guest',\r\n        password: 'guest'\r\n    },\r\n    amqp: {\r\n        vhost: '/',\r\n    }\r\n};\r\nconst client = new AMQP.Client(options);\r\n```\r\nEither 'tls' [attributes](https://nodejs.org/api/tls.html#tls_tls_connect_options_callback) or 'net' [attributes](https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener) must be provided, 'tls' will be preferred.\r\n\r\nIt is also possible to provide connection data as [URI](https://www.rabbitmq.com/uri-spec.html):\r\n```bash\r\nconst options = {\r\n    uri: 'amqp://guest:guest@localhost:5672/vhost1?heartbeat=300' \r\n};\r\nconst client = new AMQP.Client(options);\r\n```\r\nOr using 'tls' again:\r\n```bash\r\nconst options = {\r\n    uri: 'amqps://guest:guest@localhost:5671?cacertfile=cacert.pem&cacertfile=cert.pem'\r\n};\r\nconst client = new AMQP.Client(options);\r\n```\r\n\r\nFinally, also an array of URIs can be provided:\r\n```bash\r\nconst options = {\r\n    uri: [\r\n        'amqp://guest:guest@localhost:5672/vh111',\r\n        'amqp://guest:guest@localhost:5672/vh222'\r\n    ]\r\n};\r\nconst client = new AMQP.Client(options);\r\n```\r\nThe client will start using the first URI and will try further URIs automatically in the given sequence until the connection can be established. If the client fails with all URIs then it stops and waits for another explicit call to connect. At this point an event `'disconnected'` is raised.\r\n\r\nAn application that requires a permanent opened connection shall always handle the `'disconnect'` event by calling `client.connect()` again, of course after a given delay time. Timers or other mechanisms may be used, depending on the application design. Keep in mind that NodeJS runtime does not guarantee precise timer execution, it depends on the event queue load.\r\n\r\nFinally, URIs can also be combined with all other options settings. It will just overwrite those fields that are explicitly defined in the URI. A typical example could be the following:\r\n```bash\r\nconst options = {\r\n    uri: [\r\n        'amqp://guest:guest@localhost:5672/vh111',\r\n        'amqp://guest:guest@localhost:5672/vh222'\r\n    ]\r\n    istreams:\r\n    {\r\n        in1: {channel: 1, exchange: 'amq.topic', routingKey: 'a.b.c', noAck: true},\r\n        in2: {channel: 1, exchange: '', routingKey: 'myQueue', noAck : false, prefetchCount : 1000}\r\n    }\r\n    ostreams:\r\n    {\r\n        out1: {channel: 1, exchange: 'amq.topic', routingKey: 'a.b.c', confirms : true},\r\n        out2: {channel: 1, exchange: 'amq.topic', routingKey: 'x.y.z', confirms : false}\r\n    }\r\n};\r\nconst client = new AMQP.Client(options);\r\n```\r\n"}]