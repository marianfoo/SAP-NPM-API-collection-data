[{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## 4.1.2 - 2022-06-20\r\n\r\n### Updated dependencies\r\n- deps: xsenv@3.3.2\r\n\r\n\r\n## 4.1.1 - 2022-06-14\r\n\r\n### Updated dependencies\r\n- deps: xsenv@3.3.1\r\n\r\n## 4.1.0 - 2022-05-10\r\n\r\n### Added\r\n- Create business services destinations\r\n\r\n### Updated dependencies\r\n- deps: async@3.2.3\r\n\r\n## 4.0.1 - 2022-03-08\r\n\r\n### Fixed\r\n- Vulnerability issues\r\n\r\n## 4.0.0 - 2022-03-07\r\n\r\n### Updated dependencies\r\n- deps: xsenv@3.1.1\r\n- deps: xssec@3.2.13\r\n- deps: axios@0.26.0\r\n\r\n### Added\r\n- Switched from Request to Axios, used by request-utils\r\n- nodejs versions ^6.0.0 and ^8.0.0 support removed\r\n- nodejs version ^16.0.0 support added\r\n\r\n### Fixed\r\n- increased request options content and body length\r\n\r\n## 3.2.0 - 2021-10-24\r\n\r\n### Added\r\n- Mutual Transport Layer Security (mTLS) handling\r\n\r\n### Fixed\r\n- html5-repo credentials handling\r\n\r\n## 3.1.1 - 2021-07-20\r\n\r\n### Fixed\r\n- Add xsappname in generated destinations\r\n- Add IAS domains in generated destinations\r\n\r\n## 3.1.0 - 2021-05-25\r\n\r\n### Added\r\n- Enable process exit after upload\r\n\r\n## 3.0.1 - 2021-05-09\r\n\r\n### Fixed \r\n- Destination type set to HTTP when creating destination configuration\r\n\r\n## 3.0.0 - 2021-03-11\r\n\r\n### Added\r\n- Asynchroneus upload support\r\n\r\n## 2.3.1 - 2021-02-16\r\n\r\n### Fixed\r\n- Failure when trying to obtain xsuaa token in Kyma flows\r\n\r\n## 2.3.0 - 2020-12-20\r\n\r\n### Added\r\n- Support the automatic creation of destinations that are pointing to xsuaa, app-host, ias service instances or backend applications\r\n\r\n## 2.2.0 - 2020-12-1\r\n\r\n### Added\r\n- Support node version 14\r\n- Use xsenv library to enable accessing credentials in Kyma\r\n\r\n## 2.1.1 - 2020-09-06\r\n\r\n### Updated dependencies\r\n- deps: archiver@5.0.0\r\n- deps: cf-nodejs-logging-support@6.4.3\r\n- deps: request@2.88.2\r\n\r\n## 2.1.0 - 2020-04-21\r\n\r\n### Added\r\n- Support node 8,10,12 versions\r\n\r\n## 2.0.3 - 2019-03-13\r\n\r\n### Fixed\r\n- On failure deploy return the error written to the log\r\n- Return correct error when deploy with empty resources folder\r\n- Support deploy without npm install\r\n\r\n## 2.0.2 - 2018-11-22\r\n\r\n### Fixed\r\n- Vulnerability issues\r\n\r\n\r\n## 2.0.1 - 2018-06-07\r\n\r\n### Fixed\r\n- Validation of binding for app-host\r\n\r\n## 2.0.0 - 2018-03-01\r\n\r\n### Added\r\n- Single Deployer to serve multiple applications\r\n\r\n## 1.1.8 - 2018-02-14\r\n\r\n### Added\r\n- Initial release as NPM\r\n\r\n## 1.1.0 - 2017-11-12\r\n\r\n### Added\r\n- Initial release\r\n"},{"name":"README.md","content":"@sap/html5-app-deployer\r\n==============\r\n[![Build Status](https://travis-ci.mo.sap.corp/html5-apps-repo/html5-app-deployer.svg?token=WNUCzC1QGN7ssw8yMAqk&branch=master)](https://travis-ci.mo.sap.corp/html5-apps-repo/html5-app-deployer)\r\n\r\n<!-- toc -->\r\n- [Overview](#overview)\r\n- [Deploying HTML5 Application Deployer App](#deploying-html5-application-deployer-app)\r\n  * [Deploying HTML5 Application Deployer App Using cf push](#deploying-html5-application-deployer-app-using-cf-push)\r\n  * [Deploying HTML5 Application Deployer App using cf deploy](#deploying-html5-application-deployer-app-using-cf-deploy)\r\n- [Undeploy HTML5 Application Deployer Apps](#undeploy-html5-application-deployer-apps)\r\n  * [Delete HTML5 Application Deployer App Using cf delete](#delete-html5-application-deployer-app-using-cf-delete)\r\n  * [Undeploy HTML5 Application Deployer App Using cf undeploy](#undeploy-html5-application-deployer-app-using-cf-undeploy)\r\n- [Redeploy HTML5 Application Deployer App](#redeploy-html5-application-deployer-app)\r\n- [Automatic Creation of Destination Configurations](#automatic-creation-of-destination-configurations)\r\n- [Enable Process Exit After Upload](#enable-process-exit-after-upload)\r\n\r\n\r\n## Overview\r\nHTML5 application deployer handles the upload of the HTML5 applications content to the HTML5 application repository.\r\n\r\nThe @sap/html5-app-deployer module can be consumed as a dependency in a node.js CF application or as a base image in the HTML5 application image.\r\n\r\nHere is an example of the node.js dependency:\r\n ```\r\n {\r\n   \"name\": \"myAppDeployer\",\r\n   \"engines\": {\r\n     \"node\": \">=6.0.0\"\r\n   },\r\n   \"dependencies\": {\r\n     \"@sap/html5-app-deployer\": \"2.0.1\"\r\n   },\r\n   \"scripts\": {\r\n     \"start\": \"node node_modules/@sap/html5-app-deployer/index.js\"\r\n   }\r\n }\r\n ```\r\n\r\nHere is an example of a Dockerfile of a base image:\r\n  ```\r\n  FROM build-milestones.common.repositories.cloud.sap/com.sap.html5.deployer/html5-app-deployer-3.1:3.1.1 \r\n\r\n  RUN sed -i -E 's/(CipherString\\s*=\\s*DEFAULT@SECLEVEL=)2/\\11/' /etc/ssl/openssl.cnf && \\\r\n  mkdir -p /app && \\\r\n  chown node.node /app\r\n\r\n  # Create app directory\r\n  WORKDIR /app\r\n\r\n  # Bundle app source\r\n  COPY . .\r\n\r\n  EXPOSE 5000\r\n  CMD [ \"npm\", \"start\" ]\r\n  ```\r\nTo login to SAP Artifactory you can use the following statement:\r\n  ```\r\n  docker login --username=<techical user> --password=<apiKey> build-milestones.common.repositories.cloud.sap\r\n  ```\r\n\r\nBelow the root folder, the HTML5 applications deployer app can contain a \"resources\" folder for the static files of the HTML5 application.\r\n\r\nIf no \"resources=\" tag is provided HTML5 application deployer will still try to upload files from resources folder. If no resources folder is found,the upload will fail. In the resources folder there should be one folder or one zip archive for each application that should be uploaded. \r\nIn each application folder/zip archive there should be two files at root level: `manifest.json` and `xs-app.json`. \r\n\r\nHere is an example of the HTML5 application deployer application:   \r\n  ```\r\n  myAppsDeployer\r\n    + node_modules\r\n    - resources\r\n      - app1\r\n        index.html\r\n        manifest.json\r\n        xs-app.json\r\n      - app2\r\n        ...\r\n    package.json\r\n    manifest.yaml\r\n   ```\r\nHere is an example of the HTML5 application deployer image:\r\n  ```\r\n  myApp\r\n    - resources\r\n      - app1\r\n        index.html\r\n        manifest.json\r\n        xs-app.json\r\n      - app2\r\n        ...\r\n    Dockerfile\r\n  ```\r\n\r\nThe manifest.json file should contain at least `sap.app.id` and `sap.app.applicationVersion.version`. \r\n\r\nNote that `sap.app.id` and `sap.app.applicationVersion.version` are used in the HTML5 application repository as applicationName and applicationVersion. If `sap.app.id` contains dots or dashes, they will be removed in the applicationName.\r\nThe version format must be xx.xx.xx, whereas x is a digit. For example: 1.0.10\r\n\r\nNote that different app-host service instances cannot be used to upload applications with the same application id/name.\r\n\r\nFor example (`manifest.json`):\r\n```\r\n   {\r\n     \"_version\": \"1.7.0\",\r\n     \"sap.app\": {\r\n       \"id\": \"app1\",\r\n       \"type\": \"application\",\r\n       \"i18n\": \"i18n/i18n.properties\",\r\n       \"applicationVersion\": {\r\n         \"version\": \"1.0.0\"\r\n       }\r\n     }\r\n   }\r\n```\r\n\r\nThe `xs-app.json` file that can be used by the application router to support application routing. \r\nFor example:\r\n   ```\r\n   \"welcomeFile\": \"index.html\",\r\n   \"authenticationMethod\": \"route\",\r\n   \"routes\": [\r\n    {\r\n      \"source\": \"^/be(.*)\",\r\n      \"target\": \"$1\",\r\n      \"destination\": \"mybackend\"\r\n    },\r\n    {\r\n      \"source\": \"^(/.*)\",\r\n      \"target\": \"$1\",\r\n      \"service\": \"html5-apps-repo-rt\"\r\n    }\r\n   ]\r\n   }\r\n   ```\r\n\r\nThe `@sap/html5-app-deployer` consumer application should be bound to a single html5-apps-repo service instance of the app-host service plan. \r\nWhen the `@sap/html5-app-deployer` consumer application is started, the `@sap/html5-app-deployer` module creates a zip archive for each folder in the “resources” folder - if it is not zipped already - and triggers the upload of all zip archives to the HTML5 application repository via multi-part request.\r\n\r\n## Deploying HTML5 Application Deployer App\r\nTo deploy an sap/html5-app-deployer consumer application in the Cloud Foundry environment you can choose one of the following procedures: \r\n\r\n### Deploying HTML5 Application Deployer App Using cf push\r\n\r\n#### 1. Create a `manifest.yaml` file in the following format:\r\n```\r\napplications:\r\n\r\n- name: myAppsDeployer\r\n  no-route: true\r\n  memory: 128M\r\n  services:\r\n    - myApps-app-host\r\n```\r\n\r\n#### 2. Create an html5-apps-repo service instance of the app-host plan using CF CLI\r\n```\r\ncf create-service html5-apps-repo app-host myApps-app-host\r\n```\r\n\r\n#### 3. Push to CF\r\n```\r\ncf push -f manifest.yaml\r\n```\r\n#### 4. Stop sap/html5-app-deployer consumer application\r\nAfter @sap/html5-app-deployer consumer application has uploaded the  content successfully, stop the application to avoid using up CF container resources.\r\n\r\n```\r\ncf stop myAppsDeployer\r\n```\r\n\r\n### Deploying HTML5 Application Deployer App using cf deploy\r\nTo use cf deploy the installation of the deploy plugin is required, see [deploy plugin documentation](https://github.com/SAP/cf-mta-plugin/blob/master/README.md)\r\nIn addition, create an *.mtar archive using WebIDE or MTA Build Tool.\r\n\r\n#### 1. Create an mtad.yaml file.\r\nThe MTA project should have an `mtad.yaml` file in the following format:\r\n```\r\nID: myApps.deployer                  //MTA ID \r\n_schema-version: '2.0'\r\nversion: 0.0.3\r\n \r\nmodules:\r\n - name: myAppsDeployer\r\n   type: com.sap.html5.application-content\r\n   path: deployer/\r\n   requires:\r\n    - name: myApps-app-host\r\n \r\n  \r\nresources:\r\n - name: myApps-app-host                 //Resource name\r\n   type: org.cloudfoundry.managed-service\r\n   parameters:\r\n     service: html5-apps-repo            //Service name\r\n     service-plan: app-host              //Service plan\r\n     service-name: myApps-app-host       //Service instance name\r\n```\r\n#### 2. Generate *.mtar file.\r\nUse the WebIDE build or the [MTA Build Tool](https://sap.github.io/cloud-mta-build-tool/) to generate a valid `myAppDeployer.mtar` file.\r\n\r\n#### 3. Deploy *.mtar file.\r\n```\r\ncf deploy myAppsDeployer.mtar\r\n```\r\nAfter deploying the `*.mtar` file, an application called myAppsDeployer (stopped) is shown in cf apps.\r\n\r\n## Undeploy HTML5 Application Deployer Apps\r\nWhen you undeploy the  HTML5 application deployer app using MTA ID, the related HTML5 application repository content should be deleted too.\r\n\r\n### Delete HTML5 Application Deployer App Using cf delete\r\nIf you have used the cf push command to deploy the app, delete the HTML5 application deployer app manually:\r\n\r\n#### 1. Unbind html5-apps-repo app-host service instance.\r\nFor example:\r\n```\r\ncf unbind-service  myAppsDeployer myApps-app-host\r\n```\r\n\r\n#### 2. Delete html5-apps-repo app-host service instance\r\nThis step deletes the HTML5 application respository content.\r\nFor example:\r\n```\r\ncf delete-service  myApps-app-host\r\n```\r\nThis step deletes the HTML5 application repository content.\r\n\r\n#### 3. Delete the HTML5 application deployer app.\r\nFor example:\r\n```\r\ncf delete  myAppsDeployer\r\n```\r\n\r\n### Undeploy HTML5 Application Deployer App Using cf undeploy\r\nWhen you undeploy the HTML5 application deployer app, the HTML5 application deployer app is deleted and you can - in the same step - delete the app-host service instance of the html5-apps-repo. To delete the app-host service instance of the html5-apps-repo, the  --delete-service parameter should be passed. \r\nNote that the undeploy requires the mta id, which can be obtained by calling cf mtas or from the `mtad.yaml` ID.\r\n\r\n#### 1. Undeploy HTML5 Application Deployer App and delete the service instance\r\nFor example:\r\n```\r\ncf undeploy myApps.deployer --delete-services\r\n```\r\n\r\n## Redeploy HTML5 Application Deployer App\r\nAfter making changes to the static content files of HTML5 applications, the new content can be redeployed to the HTML5 application repository. \r\nAll content referenced by the app-host service instance id is replaced by the new content. \r\n\r\n## Asynchronous Upload\r\nYou can specify that upload content should be performed asynchronously by adding environment variable ASYNC_UPLOAD to manifest.yaml or mta.yaml files.\r\nAsynchronous upload means that the html5 applications content will be handled synchronously to HTML5 Application Repository but the internal file validation and processing will be performed asynchronously.\r\nIn this setup, you will have to check the html5 application deployer logs to verify that the upload was completed successfully. \r\nUsing asynchronous upload is specially important when triggering upload of service instance with large content (more than 10 MB). In such cases synchronous upload might cause health check errors or connection timeout during upload.\r\n\r\n## Automatic Creation of Destination Configurations\r\nWhen using HTML5 Application Deployer in SAP Managed Approuter flows you can configure the automatic creation of the required instance level destination configurations.\r\n\r\nTo enable the automatic creation of destinations, provide the environment variable SAP_CLOUD_SERVICE.\r\n\r\nTo following types of destination configurations can be created:\r\n\r\n- A destination pointing to an xsuaa service instance (optional)\r\n- A destination pointing to an Identity Authentication service instance (optional)\r\n- A destination pointing to an html5-apps-repo/app-host service instance (mandatory)\r\n- A destinations pointing to a business  service instance (optional)\r\n- One or more backend destinations that point to a Cloud or an on- premise backend application. These destinations are modeled using the environment variable BACKEND_DESTINATIONS\r\n\r\nIf the creation of a destination pointing to an xsuaa or an Identity Authentication service instance is required, the xsuaa or the Identity Authentication instances should be bound to the HTML5 application deployer.\r\nIn addition a destination instance should be bound to the HTML5 application deployer.\r\n\r\nThis capability is typically used in Kubernetes where the HTML5 Application Deployer application is previously uploaded as a docker image to Artifactory or dockerhub\r\nFor example (Kubernetes deployment) :\r\n```\r\n---\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: html5appdeployer\r\n  namespace: default\r\n  labels:\r\n    app: html5appdeployer\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: html5appdeployer\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: html5appdeployer\r\n    spec:\r\n      containers:\r\n        - image: html5-apps-repo.docker.repositories.sap.ondemand.com/myapp-html5-app-deployer:1.0\r\n          name: html5appdeployer\r\n          volumeMounts:\r\n            - name: html5-repo-app-host-volume\r\n              mountPath: \"/etc/secrets/sapcp/html5-apps-repo/myapp-app-host-instance\"\r\n              readOnly: true\r\n            - name: xsuaa-volume\r\n              mountPath: \"/etc/secrets/sapcp/xsuaa/myapp-xsuaa-instance\"\r\n              readOnly: true\r\n            - name: destination-volume\r\n              mountPath: \"/etc/secrets/sapcp/destination/myapp-destination-instance\"\r\n              readOnly: true\r\n          env:\r\n            - name: PORT\r\n              value: \"5000\"\r\n            - name: SAP_CLOUD_SERVICE\r\n              value: \"com.sap.test.service\"\r\n            - name: BACKEND_DESTINATIONS\r\n              value: \"[{\r\n              \\\"Name\\\":\\\"myapp-backend\\\",\r\n              \\\"Description\\\":\\\"My application backend\\\",\r\n              \\\"Type\\\":\\\"HTTP\\\",\r\n              \\\"ProxyType\\\":\\\"Internet\\\",\r\n              \\\"URL\\\":\\\"https://<backendApplicationHost>/\\\",\r\n              \\\"Authentication\\\":\\\"NoAuthentication\\\",\r\n              \\\"HTML5.ForwardAuthToken\\\": true}]\"\r\n      imagePullSecrets:\r\n        - name: backend-dockersecret\r\n      volumes:\r\n        - name: html5-repo-app-host-volume\r\n          secret:\r\n            secretName: myapp-app-host-binding\r\n        - name: xsuaa-volume\r\n          secret:\r\n            secretName: myapp-xsuaa-binding\r\n        - name: destination-volume\r\n          secret:\r\n            secretName: myapp-destination-binding\r\n\r\n```\r\n## Enable Process Exit After Upload\r\nIn case it is required to automatically exit the html5 application deployer process, you can set the EXIT_PROCESS_AFTER_UPLOAD environment variable.\r\nIf this environment variable is set, after a successful upload the html5 application deployer application will be stopped. \r\nNote that when using deploy service this is no required because deploy service stops the html5 application deployer application automatically.\r\nIf you use native deployment mechanisms such as Cloud Foundry cf push or Kubernetes deployment, you may need to use this capability.\r\n\r\nExample:\r\n```\r\n---\r\napiVersion: batch/v1\r\nkind: Job\r\nmetadata:\r\n  name: html5appdeployer\r\n  namespace: default\r\n  labels:\r\n    app: html5appdeployer\r\nspec:\r\n  ttlSecondsAfterFinished: 0\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: html5appdeployer\r\n      annotations:\r\n        sidecar.istio.io/inject: \"false\"\r\n    spec:\r\n      restartPolicy: OnFailure\r\n      containers:\r\n        - image: html5-apps-repo.docker.repositories.sap.ondemand.com/myapp-html5-app-deployer:1.0\r\n          imagePullPolicy: Always\r\n          name: html5appdeployer\r\n          volumeMounts:\r\n            - name: html5-repo-app-host-volume\r\n              mountPath: \"/etc/secrets/sapcp/html5-apps-repo/myapp-app-host-instance\"\r\n              readOnly: true\r\n            - name: xsuaa-volume\r\n              mountPath: \"/etc/secrets/sapcp/xsuaa/myapp-xsuaa-instance\"\r\n              readOnly: true\r\n            - name: destination-volume\r\n              mountPath: \"/etc/secrets/sapcp/destination/myapp-destination-instance\"\r\n              readOnly: true\r\n          env:\r\n            - name: EXIT_PROCESS_AFTER_UPLOAD\r\n              value: \"true\"\r\n            - name: PORT\r\n              value: \"5000\"\r\n            - name: SAP_CLOUD_SERVICE\r\n              value: \"com.sap.test.service\"\r\n            - name: BACKEND_DESTINATIONS\r\n              value: \"[{\r\n              \\\"Name\\\":\\\"myapp-backend\\\",\r\n              \\\"Description\\\":\\\"My application backend\\\",\r\n              \\\"Type\\\":\\\"HTTP\\\",\r\n              \\\"ProxyType\\\":\\\"Internet\\\",\r\n              \\\"URL\\\":\\\"https://<backendApplicationHost>/\\\",\r\n              \\\"Authentication\\\":\\\"NoAuthentication\\\",\r\n              \\\"HTML5.ForwardAuthToken\\\": true}]\"\r\n      imagePullSecrets:\r\n        - name: backend-dockersecret\r\n      volumes:\r\n        - name: html5-repo-app-host-volume\r\n          secret:\r\n            secretName: myapp-app-host-binding\r\n        - name: xsuaa-volume\r\n          secret:\r\n            secretName: myapp-xsuaa-binding\r\n        - name: destination-volume\r\n          secret:\r\n            secretName: myapp-destination-binding\r\n\r\n```\r\n"}]