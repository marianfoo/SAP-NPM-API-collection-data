[{"name":"CHANGELOG.md","content":"# Change Log\r\n\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## Unreleased\r\n\r\n## [1.9.0] - 2019-01-16\r\n\r\n### Please note: This library will not receive feature and bugfix releases in the future. Please use the successor `@sap/odata-server`\r\n\r\n### Added\r\n- Support for geo types and geo functions\r\n\r\n### Changed\r\n- Errors with status codes 4xx are logged with log level WARNING instead of ERROR\r\n- Remove $Kind from EntitySets,Singletons, FunctionImports, ActionImports and add $Collection to EntitySets (Compatible change)\r\n    - See OASIS Issue: https://issues.oasis-open.org/browse/ODATA-1231\r\n\r\n## [1.8.0] - 2018-10-26\r\n### Added\r\n- Support for Upsert requests (PUT/PATCH on entity set with key and navigation to many with key)\r\n\r\n### Fixed\r\n- base64 encoding uses \"URL and Filename Safe Alphabet\" as required by the specification (#480)\r\n\r\n## [1.7.0] - 2018-09-19\r\n### Added\r\n- Support for EDM type Edm.Stream\r\n- It is now possible to create, update, and delete entities and references reached via navigation.\r\n\r\n## [1.6.1] - 2018-08-07\r\n\r\n### Changed\r\n- an empty JSON object is allowed as input for a create operation\r\n\r\n## [1.6.0] - 2018-08-02\r\n### Added\r\n- $apply support for accessing related entities in aggregation and grouping\r\n- Implemented the odata.metadataEtag annotation\r\n- Metadata-Etag changes, if the metadata document changes via a custom metadata handler\r\n- Support for function imports and bound functions\r\n- new method in ApplicationError to add an annotation \r\n\r\n### Changed\r\n- Definition of search words for $search in anticipation of OData version 4.01\r\n- Changed next() interface of ServiceHandler, MetadataHandler and localeNegotiator to behave like\r\n  the other data handlers -> next (error, { value: data })\r\n\r\n### Fixed\r\n- Context URL in case of deep inserts\r\n- the check which key properties can be omitted in case of referential constraints (#426)\r\n- serialization of annotations in XML error messages\r\n\r\n## [1.5.0] - 2018-06-13\r\n\r\n### Added\r\n\r\n- Retry Requests for ChangeSets\r\n- Support for locale specific metadata-requests\r\n- Support for $count as a pathsegment on expanded navigation properties\r\n- Support for containment navigation\r\n- Support for instance annotations in JSON serializer\r\n- $apply support for orderby, skip, and top transformations\r\n- Support for $expand=*, but not with the $levels option\r\n\r\n### Changed\r\n\r\n- Null property values can be omitted\r\n- Updated dependencies\r\n\r\n### Fixed\r\n- Canonical URL and context URL in case of omitted key values due to referential constraints\r\n- Context URL in case of bound actions that return an entityset\r\n- Support for ETags in expanded entities\r\n- Support for ETags in a Deep-Insert response\r\n\r\n## [1.4.1] - 2018-05-03\r\n\r\n### Fixed\r\n- Corrected behaviour when debug mode is not activated but requested by client\r\n\r\n## [1.4.0] - 2018-04-27\r\n### Added\r\n\r\n- Metadata serialization of EnumMember can use odata.type annotation if enum type is not available\r\n- Support for HEAD requests on the service document\r\n\r\n### Fixed\r\n\r\n- Default status code set to 200 OK for responses to action requests\r\n- Switched to more robust method of calling hasOwnProperty (#384)\r\n- Added format-parameter odata.metadata to the content-type header of json responses (#351)\r\n\r\n## [1.3.0] - 2018-04-04\r\n### Added\r\n- Support for request Prefer header and response Preference-Applied header\r\n\r\n\r\n## [1.2.0] - 2018-03-19\r\n\r\n### Added\r\n\r\n- Support for Accept-Charset and the charset format-parameter in Accept and $format \r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n## 1.1.1 - 2018-03-12 [Test]\r\n\r\n## 1.1.0 - 2018-03-12 [Okra Release for productive usage on XSA CF]\r\n### Added\r\n\r\n- $apply support for concat transformation\r\n\r\n### Changed\r\n\r\n### Fixed\r\n\r\n- Context-Url for expanded entities/entity sets #366\r\n\r\n## 1.0.0 - 2018-03-01 [Okra Release for productive usage on XSA/CF]\r\n\r\n### Added\r\n\r\n- Enumeration types\r\n- Enhanced Debug HTML View\r\n- $apply support for simple aggregate, groupby, filter, compute, identity, bottomcount, and topcount transformations\r\n- Server-driven paging\r\n- Create/Update entity and link with existing entity via bind operations\r\n- CRUD operations for references\r\n- ActionImports and Bound Action support\r\n- Deep insert support\r\n- Metadata/Annotations in data structure\r\n- Annotations in expanded entities (Etags)\r\n\r\n### Changed\r\n\r\n- Refactoring of `next(error, data, options)` interface. Data structure of `data` has changed\r\n\r\n### Fixed\r\n\r\n- Debug output for batch requests #337\r\n\r\n## 0.5.0 - 2017-10-18 [First Okra Release for productive usage on XSA/CF]\r\n### Added\r\n\r\n- Basic Cross Service Referencing\r\n- Node.js 6.X and 8.X support\r\n- CRUD Entity Requests\r\n- CUD Property Requests (Primitive-, Complex- and Collection Properties) \r\n- $batch requests\r\n- EnumMemberExpression in metadata\r\n- Conditional Request handling with ETAGs\r\n- Logging Facade\r\n- Documentation \r\n\r\n### Changed\r\n\r\n- CRUD handlers have to be registered with service.on() instead of service.use()\r\n\r\n## 0.0.1-alpha.4 - 2017-05-30 [Milestone]\r\n### Added\r\n\r\n- Create Entity Requests\r\n- Adapt JSON CSDL provider to preliminary OASIS CSDL version\r\n- Adapt samples to new CSDL format\r\n- Performance Test Cases\r\n\r\n## 0.0.1-alpha.3 - 2017-04-24 [Milestone]\r\n### Added\r\n\r\n- Read EntitySet(Key)/property (Primitive Property, Complex Property and their collections)\r\n- Delete Entity requests\r\n- New Dispatching architecture - Usage of handlers instead of processor interfaces\r\n- OData Version 4.0 in request and response\r\n- Annotations in metadata\r\n- Context URI Builder\r\n- Enhanced Debug View support\r\n- Content Negotiation\r\n- $filter parser\r\n- $orderby parser\r\n- $expand parser\r\n- $select parser\r\n- $search parser\r\n- $format validation\r\n- $expand in combination with query options for expanded entities\r\n- support for JSON format parameters IEEE754Compatible and ExponentialDecimals\r\n- standalone JSON serialization of properties\r\n- serialization of primitive-property raw values\r\n- JSON deserialization of entities and properties\r\n\r\n## 0.0.1-alpha.1 - 2016-10-28 [Milestone]\r\n\r\n### Added\r\n\r\n- First milestone version of the OData V4 library, that can be used for PoC's.\r\n- Library supports creating your OData EDM modell as well Read scenarios like\r\n  read EntityCollection, read Entity and Navigation between entities like:\r\n  - GET http://serviceRoot/EntitySet\r\n  - GET http://serviceRoot/EntitySet(key)\r\n  - GET http://serviceRoot/EntitySet(key)/NavigationProperty/..\r\n- The library supports the json format only.\r\n- CSDL providers to provide your OData EDM model via the sap-json format or programmatically\r\n- JSON Serializers for Entity and EntityCollection Serialization\r\n- Dispatching of request to processor methods\r\n- node.js 6.X support\r\n- debug view in json and html format\r\n"},{"name":"lib","nodes":[{"name":"csdl","nodes":[{"name":"info.md","content":"The CSDL objects are used to feed the corresponding EDM objects.\r\nThey are returned from the application by using a EdmProvider.\r\n\r\nUsing the CSDL objects is not mandatory, but a application will profit from some convenience\r\nmethods to easily fill an EDM. Of course an EDM can also be filled with using ad hoc created\r\nJSON objects (e.g., { ... }) providing the same attributes as the CSDL objects.\r\nA possible use case may be to store this objects on disk as JSON file if creating is slow\r\n( e.g., backend data required).\r\n\r\nClass requirements:\r\n\r\n* only attributes allowed\r\n* no class hierarchy\r\n* The Type of the entity set. Must be a full qualified type name\r\n\r\nRestrictions\r\n\r\n* Unsupported facets\r\n    * **unicode**\r\n        Using [unicode](odata-v4.0-os-part3-csdl.html#_Toc372793915) is not supported.\r\n        When using the CSDL object classes the class attribute *unicode* returns\r\n        always **true**.\r\n"}]},{"name":"info.md","content":"\r\n\r\n# Components\r\n \r\nCSDL Classes (location **./csdl**)\r\n\r\n* public API\r\n* more or less structures with little helpers for method chaining\r\n* naming oriented to spec \r\n\r\n\r\nEDM Classes (location **./edm**)\r\n\r\n* Only internal (for now)\r\n* Namespace resolution\r\n* Feed with CSDL Classes\r\n* Wrap CSDL Classes\r\n* Know Provider\r\n* Requests more EDM Data via Provider\r\n \r\nEDM Provider (location **./edm/provider**)\r\n\r\nUri Parser  (location **./uri/parser**)\r\n\r\n* Uses EDM\r\n\r\n  \r\n  \r\n"},{"name":"serializer","nodes":[{"name":"ResourceJsonSerialization.md","content":"# Serializing OData resources to JSON format\r\n\r\nIn order to serialize an OData resource such as entity or entity collection\r\nto OData JSON format, ResourceJsonSerializer class should be used.\r\nThe class has a number of methods taking an OData resource as an input and\r\nreturning the serialized resource as a JSON string.\r\n\r\n## Serializing entity\r\n\r\nIn order to serialize an entity to OData JSON format, serializeEntity method\r\nshould be called on an instance of ResourceJsonSerializer class. \r\n\r\nThe method takes EDM entity type, entity data and control information as\r\nthe input. The entity type of the entity must be  specified as an instance\r\nof EdmEntityType class. The entity data must be specified as a plain JSON\r\nobject with property-value pairs corresponding to the EDM properties of the\r\nentity type. Values for the entity properties must be formatted according to\r\nthe types of the corresponding EDM properties. \r\n\r\n### Serializing entity with primitive properties\r\n\r\nThe table below describes the formatting and mapping rules between the EDM\r\nprimitive types and JavaScript / Node.js types.\r\n\r\nEDM type | JS / Node.js type | Value format\r\n-------- | ----------------- | ------------\r\nEdm.Binary | Buffer |\r\nEdm.Boolean | boolean | \r\nEdm.Byte | number | integer number value in the range from 0 to 255\r\nEdm.SByte | number | integer number value in the range from -128 to 127\r\nEdm.Int16 | number | integer number in the range from -32768 to 32767\r\nEdm.Int32 | number | integer number in the range from -2147483648 to 2147483647\r\nEdm.Int64 | number or string | integer number in the range from -9223372036854775808 to 9223372036854775807. In case the value is too big to be correctly represented as an integer number in JavaScript, it should be specified as a string. The value can be in either decimal or in an exponential notation.\r\nEdm.Date | string | YYYY-MM-DD\r\nEdm.DateTimeOffset | string | YYYY-MM-DDThh:mm:ss.sTZD\r\nEdm.TimeOfDay | string | hh:mm:ss.s\r\nEdm.Duration | string | PnDTnHnMn.nS\r\nEdm.Decimal | number or string | number value represented as a JavaScript number or a string, in case the value is too big to be correctly represented as a number in JavaScript. The value can be in either decimal or in an exponential notation.\r\nEdm.Single | number | number with the absolute value in the range from 1.401298464324817E-45 to 3.4028234663852886E+38\r\nEdm.Double | number | \r\nEdm.Guid | string | 8HEXDIG-4HEXDIG-4HEXDIG-4HEXDIG-12HEXDIG\r\nEdm.String | string | \r\n\r\nOnly the aforementioned primitive types are supported. More information\r\nabout the format of the property values can be found in the ABNF\r\nConstruction Rules document for the OData specification.\r\n\r\nExample:\r\n```javascript\r\nconst edmEntityType = someEntityTypeValue;\r\n\r\nconst entity = {\r\n    '*@odata.context': '$metadata#SomeEntitySet/$entity',\r\n    value: {\r\n        PropertyInt16: 32767,\r\n        PropertyString: 'First Resource - positive values',\r\n        PropertyBoolean: true,\r\n        PropertyByte: 255,\r\n        PropertySByte: 127,\r\n        PropertyInt32: 2147483647,\r\n        PropertyInt64: 9007199254740991,\r\n        PropertySingle: 1.79E+20,\r\n        PropertyDouble: -1.79E+19,\r\n        PropertyDecimal: 34,\r\n        PropertyBinary: Buffer.from('ASNFZ4mrze8=', 'base64'),\r\n        PropertyDate: '2012-12-03',\r\n        PropertyDateTimeOffset: '2012-12-03T07:16:23Z',\r\n        PropertyDuration: 'P0DT0H0M6S',\r\n        PropertyGuid: '01234567-89ab-cdef-0123-456789abcdef',\r\n        PropertyTimeOfDay: '03:26:05'\r\n    }\r\n};\r\n\r\nconst resourceSerializer = new ResourceJsonSerializer();\r\nconst serializedEntity = resourceSerializer.serializeEntity(edmEntityType, entity);\r\n```\r\nThe serialized entity:\r\n```javascript\r\n{\t\r\n\t'@odata.context': \"$metadata#SomeEntitySet/$entity\" ,\r\n\tPropertyInt16: 32767,\r\n\tPropertyString: \"First Resource - positive values\",\r\n\tPropertyBoolean: true,\r\n\tPropertyByte: 255,\r\n\tPropertySByte: 127,\r\n\tPropertyInt32: 2147483647,\r\n\tPropertyInt64: 9007199254740991,\r\n\tPropertySingle: 179000000000000000000,\r\n\tPropertyDouble: -17900000000000000000,\r\n\tPropertyDecimal: 34,\r\n\tPropertyBinary: \"ASNFZ4mrze8=\",\r\n\tPropertyDate: \"2012-12-03\",\r\n\tPropertyDateTimeOffset: \"2012-12-03T07:16:23Z\",\r\n\tPropertyDuration: \"P0DT0H0M6S\",\r\n\tPropertyGuid: \"01234567-89ab-cdef-0123-456789abcdef\",\r\n\tPropertyTimeOfDay: \"03:26:05\"\r\n}\r\n```\r\n\r\nVery big values for Edm.Int64 or Edm.Decimal properties of the entity can\r\nnot be represented as numbers in JavaScript. They have to be passed to the\r\nserializer as strings. If the ResourceJsonSerializer is created with a\r\nconstructor parameter requesting IEEE754-compatible output, Edm.Int64 and\r\nEdm.Decimal values are serialized as strings. If standard output is\r\nrequested and numbers are not representable as Javascript numbers, an error\r\nis thrown.\r\n\r\nDecimal numbers are serialized in exponential notation if requested with the\r\nconstructor parameter. This works only if decimal numbers are serialized as\r\nstrings.\r\n\r\nExample:\r\n```javascript\r\nconst edmEntityType = someEntityTypeValue;\r\n\r\nconst entity = {\r\n    '*@odata.context': '$metadata#SomeEntitySet/$entity',\r\n    value: {\r\n        PropertyInt16: 32767,\r\n        PropertyString: 'First Resource - positive values',\r\n        PropertyBoolean: true,\r\n        PropertyByte: 255,\r\n        PropertySByte: 127,\r\n        PropertyInt32: 2147483647,\r\n        PropertyInt64: '9223372036854775807',   // too big integer value to be correctly represented in JavaScript\r\n        PropertySingle: 1.79E+20,\r\n        PropertyDouble: -1.79E+19,\r\n        PropertyDecimal: 34,\r\n        PropertyBinary: Buffer.from('ASNFZ4mrze8=', 'base64'),\r\n        PropertyDate: '2012-12-03',\r\n        PropertyDateTimeOffset: '2012-12-03T07:16:23Z',\r\n        PropertyDuration: 'P0DT0H0M6S',\r\n        PropertyGuid: '01234567-89ab-cdef-0123-456789abcdef',\r\n        PropertyTimeOfDay: '03:26:05'\r\n    }\r\n};\r\n\r\nconst resourceSerializer = new ResourceJsonSerializer(\r\n    new JsonContentTypeInfo()\r\n        .addParameter(JsonContentTypeInfo.FormatParameter.IEEE754, 'true')\r\n        .addParameter(JsonContentTypeInfo.FormatParameter.EXPONENTIAL_DECIMALS, 'true'));\r\nconst serializedEntity = resourceSerializer.serializeEntity(edmEntityType, entity);\r\n```\r\nThe serialized entity:\r\n```javascript\r\n{\t\r\n  @odata.context: \"$metadata#SomeEntitySet/$entity\" \r\n  PropertyInt16: 32767,\r\n  PropertyString: 'First Resource - positive values',\r\n  PropertyBoolean: true,\r\n  PropertyByte: 255,\r\n  PropertySByte: 127,\r\n  PropertyInt32: 2147483647,\r\n  PropertyInt64: '9223372036854775807',\r\n  PropertySingle: 179000000000000000000,\r\n  PropertyDouble: -17900000000000000000,\r\n  PropertyDecimal: '3.4e+1',\r\n  PropertyBinary: 'ASNFZ4mrze8=',\r\n  PropertyDate: '2012-12-03',\r\n  PropertyDateTimeOffset: '2012-12-03T07:16:23Z',\r\n  PropertyDuration: 'P0DT0H0M6S',\r\n  PropertyGuid: '01234567-89ab-cdef-0123-456789abcdef',\r\n  PropertyTimeOfDay: '03:26:05'\r\n}\r\n```\r\n\r\n### Serializing entity with complex properties\r\n\r\nIn case an entity with a complex property has to be serialized, the property\r\nvalue must be represented as an object with the property-value pairs\r\naccording to the properties of the corresponding EDM ComplexType.\r\n\r\nExample:\r\n```javascript\r\nconst entity = {\r\n    value: {\r\n        PropertyInt16: 7,\r\n            ComplexProperty: {\r\n            PropertyString: 'Second Resource - second',\r\n            PropertyBoolean: true,\r\n            PropertyByte: 255\r\n        }\r\n    }\r\n};\r\n```\r\nThe serialized entity:\r\n```javascript\r\n{\t\r\n  @odata.context: \"$metadata#SomeEntitySet/$entity\" \r\n  PropertyInt16: 7,\r\n  ComplexProperty: {\r\n  \tPropertyString: \"Second Resource - second\",\r\n\tPropertyBoolean: true,\r\n\tPropertyByte: 255\r\n  }\r\n}\r\n```\r\n\r\n### Serializing entity with collection properties\r\n\r\nIn case an entity with a collection property has to be serialized, the\r\nproperty value must be represented as an array. For primitive collection\r\nproperties, the array must contain primitive values, formatted according\r\nto the primitive property type. For complex collection properties, the array\r\nmust contain objects, where each of the objects corresponds to the structure\r\nof the EDM ComplexType, which is specified for the property.\r\n\r\n### Serializing entity with selected properties using $select\r\n\r\n$select may act on primitive, complex, and collection properties, whose\r\nvalues must conform the defined rules in the previous sections. Furthermore,\r\n$select may also act on navigation properties, which are unnecessary to be\r\npresent in the data.\r\n\r\nNote that selecting a property that belongs to the EDM properties of the\r\nentity type but is not present in the data causes the property to be\r\nserialized with a value of:\r\n\r\n* \"null\", for primitive and complex properties, or\r\n* an empty array [ ], for collection properties.\r\n\r\n### Serializing entity with expanded navigation properties using $expand\r\n\r\n$expand acts on navigation properties to-one and to-many.\r\n\r\n* Expand to-one navigation property:\r\nThe value of the navigation property should be given as a plain JSON object\r\nwith property-value pairs corresponding to the EDM properties of the target\r\nentity type. Serializing this JSON object is subject to the same defined\r\nrules in the previous sections.\r\nExample:\r\n```javascript\r\nconst entity = {\r\n    value: {\r\n        PropertyInt16: 1,\r\n        NavPropertyToOne: {\r\n            PropertyString: 'abc',\r\n            PropertyBoolean: true\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nIf the navigation property was not present in the data, it is serialized\r\nwith a \"null\" value.\r\n\r\n* Expand to-many navigation property:\r\nThe value of the navigation property must be specified as an array of JSON\r\nobjects with the same defined rules in the previous sections.\r\nExample:\r\n```javascript\r\nconst entity = {\r\n    value: {\r\n        PropertyInt16: 2,\r\n        NavPropertyToMany: [\r\n            {\r\n                PropertyString: 'abc',\r\n                PropertyBoolean: true\r\n            },\r\n            {\r\n                PropertyString: 'def',\r\n                PropertyBoolean: false\r\n            }\r\n        ]\r\n    }\r\n};\r\n```\r\n\r\nIf the navigation property was not present in the data, it is serialized\r\nwith an empty array [ ].\r\n\r\n## Serializing entity collection\r\n\r\nIn order to serialize an entity collection to OData JSON format,\r\nserializeEntityCollection method should be called on an instance of\r\nResourceJsonSerializer class. \r\n\r\nThe method takes EDM entity type, entity collection data and control\r\ninformation for the entity collection as the input. The entity type of the\r\nentities in the entity collection must be specified as an instance of\r\nEdmEntityType class. The entity collection data must be specified as an\r\narray of JSON objects with the same structure as the one described in\r\nthe 'Serializing entity' section.\r\n\r\nExample:\r\n```javascript\r\nconst entities = {\r\n    '*@odata.context': '$metadata#SomeEntitySet',\r\n    '*@odata.count': 3,\r\n    value:[\r\n        {\r\n            PropertyInt16: 1,\r\n            PropertyString: 'Test String1'\r\n        },\r\n        {\r\n            PropertyInt16: 2,\r\n            PropertyString: 'Test String2'\r\n        },\r\n        {\r\n            PropertyInt16: 3,\r\n            PropertyString: 'Test String3'\r\n        }\r\n    ]\r\n};\r\n\r\nconst entityType = someEntityType;\r\n\r\nconst resourceSerializer = new ResourceJsonSerializer();\r\n\r\nconst serializedEntityCollection =\r\n    resourceSerializer.serializeEntityCollection(entityType, entities);\r\n```\r\n\r\nThe serialized entity collection:\r\n```javascript\r\n{\r\n    \"@odata.context\": \"$metadata#SomeEntitySet\",\r\n    \"@odata.count\": 3,\r\n    \"value\": [\r\n        {\r\n            \"PropertyInt16\": 1,\r\n            \"PropertyString\": \"Test String1\"\r\n        },\r\n        {\r\n            \"PropertyInt16\": 2,\r\n            \"PropertyString\": \"Test String2\"\r\n        },\r\n        {\r\n            \"PropertyInt16\": 3,\r\n            \"PropertyString\": \"Test String3\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## Serializing primitive property or primitive-type value\r\n\r\nIn order to serialize a primitive-type property of an entity or a single\r\nprimitive-type value in OData JSON format, the `serializePrimitive` method\r\nshould be called on an instance of the `ResourceJsonSerializer` class.\r\n\r\nThe method takes the primitive EDM type or the EDM property, the value,\r\nand control information as the input. The value must be specified as a plain\r\nJSON object corresponding to the EDM type (of the property, if applicable).\r\n\r\nExample:\r\n```javascript\r\nconst edmType = EdmPrimitiveTypeKind.Boolean;\r\nconst value = {\r\n    '*@odata.context': '$metadata#Edm.Boolean',\r\n    value: true\r\n};\r\n\r\nconst resourceSerializer = new ResourceJsonSerializer();\r\nconst serialized = resourceSerializer.serializePrimitive(edmType, value);\r\n```\r\nThe serialized primitive value:\r\n```JSON\r\n{\r\n  \"@odata.context\": \"$metadata#Edm.Boolean\",\r\n  \"value\": true\r\n}\r\n```\r\n\r\n## Serializing complex property or complex-type value\r\n\r\nIn order to serialize a complex-type property of an entity or a single\r\ncomplex-type value in OData JSON format, the `serializeComplex` method\r\nshould be called on an instance of the ResourceJsonSerializer class.\r\n\r\nThe input is as described above, except that the value now must be a\r\nJavascript object with property-value pairs according to the properties\r\nof the corresponding EDM complex type.\r\n\r\nFurthermore, it is possible to pass an array of `SelectItem`s and an array\r\nof `ExpandItem`s as described above for entities.\r\n\r\nExample:\r\n```javascript\r\nconst data = {\r\n    '*@odata.context': '$metadata#Namespace1_Alias.CTTwoPrim',\r\n    value:{ PropertyInt16: 1, PropertyString: '2' }\r\n};\r\n\r\nconst resourceSerializer = new ResourceJsonSerializer();\r\nconst serialized = resourceSerializer.serializeComplex(edmType, data);\r\n```\r\nThe serialized complex value:\r\n```JSON\r\n{\r\n  \"@odata.context\": \"$metadata#Namespace1_Alias.CTTwoPrim\",\r\n  \"PropertyInt16\": 1,\r\n  \"PropertyString\": \"2\"\r\n}\r\n```\r\n\r\n## Serializing collection property or typed value collection\r\n\r\nIn order to serialize a (primitive or complex) collection property of an\r\nentity or a collection of (primitive or complex) typed values in OData JSON\r\nformat, the `serializePrimitiveCollection` or the\r\n`serializeComplexCollection` method, respectively, should be called on an\r\ninstance of the ResourceJsonSerializer class.\r\n\r\nThe input is as described above, except that the value now must be an array.\r\n\r\nExample:\r\n```javascript\r\nconst edmType = EdmPrimitiveTypeKind.Boolean;\r\nconst data = {\r\n    '*@odata.context': '$metadata#Collection(Edm.Boolean)',\r\n    value: [true, false, null]\r\n};\r\n\r\nconst resourceSerializer = new ResourceJsonSerializer();\r\nconst serialized = resourceSerializer.serializePrimitiveCollection(edmType, data);\r\n```\r\nThe serialized collection:\r\n```JSON\r\n{\r\n  \"@odata.context\": \"$metadata#Collection(Edm.Boolean)\",\r\n  \"value\": [true, false, null]\r\n}\r\n```\r\n"}]},{"name":"uri","nodes":[{"name":"info.md","content":"# Components\r\n\r\nTable of contents\r\n\r\n[How to use the UriParser](#how-to-use-the-uriparser)\r\n\r\n\r\n## How to use the UriParser\r\n\r\nThe UriParser takes the edm provider instance and returns an UriInfo object on calling the\r\n`.parse(uri)` method. Each original uri path segment has a corresponding UriResource path segment\r\nafter parsing the uri.\r\n\r\n```js\r\n\r\nconst UriParser = require('./lib/uri/UriParser');\r\nconst edm = getEdmProviderInstanceSomehow();\r\nconst uriParser = new UriParser(edm);\r\n\r\n\r\nconst uriInfo = uriParser.parse(\r\n    \"/YourEntitySetName(KeyName=1,Key2Name='2')/YourNavigationProperty/AnyProperty\"\r\n);\r\n\r\nuriInfo.getPathSegments() // --> [UriResource, UriResource, UriResource]\r\n\r\n// First path segment\r\nconst first = uriInfo.getPathSegments()[0]; // Returns UriResource\r\nfirst.getKind() // --> UriResource.ResourceKind.ENTITY\r\nfirst.getEntitySet() // --> EdmEntitySet\r\nfirst.getKeyPredicates() // --> [UriParameter, UriParameter]\r\nfirst.getKeyPredicates()[1].getValue() // --> '2'\r\nfirst.getKeyPredicates()[1].getEdmRef() // --> Returns the corresponding edm reference object\r\n\r\n// Second path segment\r\nconst second = uriInfo.getPathSegments()[1]; // Returns UriResource\r\nsecond.getKind() // --> UriResource.ResourceKind.NAVIGATION_TO_[ONE|MANY]\r\nsecond.getNavigationProperty() // --> EdmNavigationProperty\r\nsecond.getTarget() // --> The target of the navigation\r\n\r\n// Third path segment\r\nconst third = uriInfo.getPathSegments()[2]; // Returns UriResource\r\nthird.getKind() // --> UriResource.ResourceKind.[PRIMITIVE|COMPLEX|COMPLEX_COLLECTION|...]_PROPERTY\r\nthird.getProperty() // --> EdmProperty\r\n\r\n```\r\n\r\n## Filter Query Option ##\r\n\r\nAccessing the filter query option gets the root node of the filter\r\nexpression tree.\r\n\r\n## Orderby Query Option ##\r\n\r\nAccessing the orderby query option gets an array of orderby-item objects.\r\nEach of these objects can be queried for the root of its expression tree and\r\nfor the sorting direction.\r\n\r\n## Expand Query Option ##\r\n\r\nAccessing the expand query option gets an array of expand-item objects.\r\nEach of these objects can be queried for its path segments, whether all\r\nnavigation properties have to be expanded, and for options.\r\n\r\n## Select Query Option ##\r\n\r\nAccessing the select query option gets an array of select-item objects.\r\nEach of these objects can be queried for its path segments, whether all\r\nproperties have been selected, and whether all operations in a schema\r\nnamespace have been selected (in this case the namespace also can be\r\nretrieved).\r\n\r\n## Search Query Option ##\r\n\r\nAccessing the search query option gets the root node of the search expression\r\ntree. Three different kinds of nodes are possible: binary-expression nodes\r\n(where only AND and OR operators can occur), unary-expression nodes (where\r\nonly NOT is possible as operator) and literal nodes.\r\n\r\n## Expressions ##\r\n\r\n### Expression Kinds ###\r\n\r\nThere are different kinds of expressions. Each kind of expression is\r\nimplemented in a separate class with specialized access methods. But all have\r\na method to get their EDM type.\r\n\r\n### Literal Expression ###\r\n\r\nA literal expression represents a literal directly written in the expression.\r\n\r\n### Alias Expression ###\r\n\r\nAn alias expression represents a parameter alias. Written as an at-sign\r\nfollowed by an identifier, it represents a reference to an expression given\r\nas separate query option in the URI. The alias expression has a method to\r\naccess this referenced expression.\r\n\r\n### Unary Expression ###\r\n\r\nA unary expression represents an OData built-in unary operator.\r\nIts operand (an expression) can be accessed as well.\r\n\r\n### Binary Expression ###\r\n\r\nA binary expression represents an OData built-in binary operator.\r\nIts left and right operands (also expressions) can be accessed as well.\r\n\r\n### Method Expression ###\r\n\r\nA method expression represents an OData built-in method. Its parameters\r\n(which can in turn be expressions) can be accessed as well.\r\n\r\n### Member Expression ###\r\n\r\nA member expression represents a path expression to access, in the easiest\r\ncase, a member property of the entity the expression refers to. It has a\r\nmethod to access the URI resource elements the path consists of.\r\n\r\n### Type Literal Expression ###\r\n\r\nA type-literal expression represents a type name written literally in the\r\nexpression, used in the built-in type-related methods. A type cast used in\r\na path (member expression) does not result in a type-literal expression.\r\n"}]},{"name":"utils","nodes":[{"name":"info.md","content":"# Performance monitor\r\n\r\nThe performance monitor is able to measure time and heap space usage.\r\nYou can create childs on each monitor instance which will create a monitor tree\r\nfrom the top root monitor to the latest monitor at the bottom of the tree.\r\n\r\n# Usage\r\n\r\n```js\r\nconst PerformanceMonitorFactory = require('/lib/utils/PerformanceMonitor').PerformanceMonitorFactory;\r\n\r\n// Create the root monitor instance\r\nconst isActive = true;\r\nconst monitor = PerformanceMonitorFactory.getInstance(isActive);\r\n\r\n// Sets a starting time to the root monitor\r\nmonitor.start();\r\n\r\nsetTimeout(() => {\r\n    // Stops the root monitor\r\n    monitor.stop();\r\n}, 1000);\r\n\r\n// Create a child monitor and start it on the fly.\r\nconst childMonitor = monitor.createChild('A child monitor').start();\r\n\r\n// Create another child monitor from an existing child.\r\n\r\nconst child = childMonitor.createChild('A child of a child');\r\n\r\n// Selecting any child with a path.\r\nconst aChildMonitor = monitor.getChild('A child monitor');\r\nconst aChildOfAChildMonitor = monitor.getChild('A child monitor/A child of a child');\r\nconst aChildMonitor2 = aChildMonitor.getChild('A child of a child');\r\n\r\n// Getting the result of a monitor.\r\nconst result = monitor.getResult();\r\n\r\n```\r\n"}]}]},{"name":"README.md","content":"OData V4.0 Server Library\r\n=========================\r\n\r\n# Deprecated\r\n## This library will not receive feature and bugfix releases in the future. Please use the successor `@sap/odata-server`\r\n\r\n## Table of Contents\r\n\r\n- [Overview](#overview)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Releases and Milestones](#releases-and-milestones)\r\n\r\n# Overview\r\n\r\nWith the OData server library OData V4.0 services can be implemented based on the [OASIS OData standard](https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=odata).\r\nThe library can be directly used to build OData services and is also part of the SAP Fiori programming model as well the SAP Cloud Platform programming model, where the data model can be defined in CDS (Core data services) and the OData service be generated out of the model.\r\n\r\nThe library leaves the freedom to build OData services with any db or persistence layer. It is also possible\r\nto create services, that are calling external REST/OData services and mix up the data with your application data.\r\n\r\nThe library is modular and consists of the following main components:\r\n\r\n* EntityDataModel - Define your EDM in JSON format. Our provider creates the\r\n  EDM out of your model and caches EDM model elements\r\n* Handler Dispatcher - Maps requests to handler functions for CRUD operations\r\n* URI parsers - Parse the request URI including the OData system query options\r\n  (like $format, $select, $expand,...) and validates each URI segment against\r\n  the EDM model and the OData ABNF\r\n* Serializers and Deserializers for the request and response payload.\r\n  The deserializers validate the request payload and support type mapping between\r\n  OData EDM types and JavaScript Types\r\n* Automatic OData Reponse generation based on provided data\r\n* ServiceFactory to create the OData service along with the CRUD handler registration\r\n* Conditional request handling for optimistic concurrency control via ETAGs\r\n* Batch handling - Batch request parsing, dispatching to single batch requests,\r\n  Content-ID referencing and batch response generation\r\n* Flexible API to support all backends - The service developer has the free\r\n  choice of his backend system (e.g., databases, frameworks, calling additional\r\n  external OData services).\r\n\r\n# Installation\r\n```npm install @sap/odata-v4```\r\n\r\n# Usage\r\n\r\n```javascript\r\nconst odata = require('@sap/odata-v4');\r\n// Load your edm model.\r\nconst edmModel = require('./<your_edm_model>.json');\r\n\r\n// Create the service\r\nconst service = odata.ServiceFactory.createService(edmModel)\r\n\r\n    // Register the request handler for CRUD operations\r\n    .on('create', function create(request, response, next){...})\r\n    .on('update', function update(request, response, next){...})\r\n    .on('delete', function delete(request, response, next){...})\r\n    .on('read', function read(request, response, next){...})\r\n\r\n//Create the server\r\nconst port = 9000;\r\nconst server = http.createServer((req, res) => service.process(req, res))\r\n    .listen(port,\r\n        () => console.log(`Server listens on port ${port} - Service URL: http://localhost:${port}/serviceroot.svc/`)\r\n    );\r\n```\r\n\r\n# Supported Requests\r\n\r\n| Resource                      | Request                                                                                  | \r\n|:------------------------------|:-----------------------------------------------------------------------------------------|\r\n| **Read Request**              | **GET**                                                                                  | \r\n| Serviceoot                    | GET http&#58;//host/serviceRoot/                                                         | \r\n| Metadata                      | GET http&#58;//host/serviceRoot/$metadata                                                | \r\n| EntitySet                     | GET http&#58;//host/serviceRoot/EntitySet                                                |\r\n| EntitySet                     | GET http&#58;//host/serviceRoot/EntitySet/$count                                         |\r\n| Entity                        | GET http&#58;//host/serviceRoot/EntitySet(Key)                                           |\r\n| References                    | GET http&#58;//host/serviceRoot/EntitySet/$ref                                           | \r\n| Reference                     | GET http&#58;//host/serviceRoot/EntitySet(Key)/$ref                                      | \r\n| References(related)           | GET http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToMany/$ref             | \r\n| Reference(related)            | GET http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToMany/$ref             |  \r\n| Related Entity                | GET http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToOne                   |\r\n| Related Entities              | GET http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToMany                  |\r\n| Complex Property              | GET http&#58;//host/serviceRoot/EntitySet(Key)/ComplexProperty                           |\r\n| Complex Property Collection   | GET http&#58;//host/serviceRoot/EntitySet(Key)/ComplexPropertyCollection                 |\r\n| Primitive Property            | GET http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty                         |\r\n| Primitive Property Value      | GET http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty/$value                  |\r\n| Primitive Property Collection | GET http&#58;//host/serviceRoot/EntitySet(Key)/PrimitivePropertyCollection               |\r\n| **Create/Insert Requests**    | **POST**                                                                                 | \r\n| Entity                        | POST http&#58;//host/serviceRoot/EntitySet                                               | \r\n| Deep Insert                   | POST http&#58;//host/serviceRoot/EntitySet                                               | \r\n| Entity with bind operations   | POST http&#58;//host/serviceRoot/EntitySet                                               | \r\n| Reference                     | POST http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToMany/$ref            | \r\n| *Update Requests*             | *PUT/PATCH*                                                                              | \r\n| Entity                        | PUT/PATCH http&#58;//host/serviceRoot/EntitySet(Key)                                     |\r\n| Reference                     | PUT http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToOne/$ref              | \r\n| Complex Property              | PUT/PATCH http&#58;//host/serviceRoot/EntitySet(Key)/ComplexProperty                     |\r\n| Complex Property Collection   | PUT http&#58;//host/serviceRoot/EntitySet(Key)/ComplexPropertyCollection                 |\r\n| Primitive Property            | PUT http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty                         |\r\n| Primitive Property Value      | PUT http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty/$value                  |\r\n| Primitive Property Collection | PUT http&#58;//host/serviceRoot/EntitySet(Key)/PrimitivePropertyCollection               |\r\n| **Delete Requests**           | **DELETE**                                                                               | \r\n| Entity                        | DELETE http&#58;//host/serviceRoot/EntitySet(Key)                                        |\r\n| Reference                     | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToOne/$ref           | \r\n| Reference(To Many)            | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/NavigationPropertyToMany(Key)/$ref     | \r\n| Complex Property              | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/ComplexProperty                        |\r\n| Complex Property Collection   | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/ComplexPropertyCollection              |\r\n| Primitive Property            | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty                      |\r\n| Primitive Property Value      | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty/$value               |\r\n| Primitive Property Collection | DELETE http&#58;//host/serviceRoot/EntitySet(Key)/PrimitivePropertyCollection            |\r\n| **Actions and Functions**     | **GET/POST**                                                                             |\r\n| Function Import               | GET http&#58;//host/serviceRoot/FunctionImports/[Navigation- or PropertyPath]            |\r\n| boundFunction                 | GET http&#58;//host/serviceRoot/EntitySet/boundFunction                                  |\r\n| boundFunction                 | GET http&#58;//host/serviceRoot/EntitySet(Key)/boundFunction                             |\r\n| boundFunction                 | GET http&#58;//host/serviceRoot/EntitySet(Key)/ComplexProperty/boundFunction             |\r\n| boundFunction                 | GET http&#58;//host/serviceRoot/EntitySet(Key)/ComplexPropertyCollection/boundFunction   |\r\n| boundFunction                 | GET http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty/boundFunction           |\r\n| boundFunction                 | GET http&#58;//host/serviceRoot/EntitySet(Key)/PrimitivePropertyCollection/boundFunction |\r\n| ActionImport                  | POST http&#58;//host/serviceRoot/ActionImport                                            | \r\n| boundAction                   | POST http&#58;//host/serviceRoot/EntitySet/boundAction                                   |\r\n| boundAction                   | POST http&#58;//host/serviceRoot/EntitySet(Key)/boundAction                              |\r\n| boundAction                   | POST http&#58;//host/serviceRoot/EntitySet(Key)/ComplexProperty/boundAction              |\r\n| boundAction                   | POST http&#58;//host/serviceRoot/EntitySet(Key)/ComplexPropertyCollection/boundAction    |\r\n| boundAction                   | POST http&#58;//host/serviceRoot/EntitySet(Key)/PrimitiveProperty/boundAction            |\r\n| boundAction                   | POST http&#58;//host/serviceRoot/EntitySet(Key)/PrimitivePropertyCollection/boundAction  |\r\n\r\n# Supported System Query Options\r\n\r\n| System Query Option           | OASIS OData V4.0 Errata 3 - Query Option Description    | \r\n|:----------------|:-------------------------------------------------------------------------------------|\r\n| **$filter**              | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752358)   |                                                                       | \r\n| **$expand**              | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752359)  |                                                                        | \r\n| **$select**              | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752360) |                                                                         | \r\n| **$orderby**              | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752361)|\r\n| **$top and $skip**        | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752362)|\r\n| **$count**            | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752363)|\r\n| **$search**            | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752364)|\r\n| **$format**            | [Supported values see OASIS specification](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions-complete.html#_Toc453752365)|\r\n\r\n# [Analytical Queries - $apply](http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs01/odata-data-aggregation-ext-v4.0-cs01.html)\r\n\r\n| Transformation      | Sample                                                          | Limitations     |\r\n|:--------------------|:----------------------------------------------------------------| :---------------|\r\n| **aggregate**       | GET ~/Sales?$apply=aggregate(Amount with sum as Total)          | Keyword 'from' is not supported |\r\n| **topcount**        | GET ~/Sales?$apply=topcount(2,Amount)                           |       |\r\n| **topsum**          | GET ~/Sales?$apply=topsum(15,Amount)                            |       |\r\n| **toppercent**      | GET ~/Sales?$apply=toppercent(50,Amount)                        |       |\r\n| **bottomcount**     | GET ~/Sales?$apply=bottomcount(2,Amount)                        |       |\r\n| **bottomsum**       | GET ~/Sales?$apply=bottomsum(7,Amount)                          |       |\r\n| **bottompercent**   | GET ~/Sales?$apply=bottompercent(50,Amount)                     |       |\r\n| **identity**        | GET ~/Sales?$apply=identity                                     |       |\r\n| **concat**          | GET ~/Sales?$apply=concat(topcount(2,Amount),aggregate(Amount)) |       |\r\n| **groupby**         | GET ~/Sales?$apply=groupby((Customer/Country,Product/Name), aggregate(Amount with sum as Total)) | rollup and $all is not supported      |\r\n| **filter**          | GET ~/Sales?$apply=filter(Amount gt 3)                          | \r\n| **expand**          | Not supported                                                   | \r\n| **search**          | GET ~/Sales?$apply=search(coffee)                               | \r\n\r\n\r\n# Releases and Milestones\r\n\r\n[Changelog](./CHANGELOG.md)\r\n"}]