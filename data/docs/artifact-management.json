[{"name":"CHANGELOG.md","content":"## 1.13.0 - 21 June, 2022\r\n### Added\r\n* Support manual mta editing\r\n### Changed\r\n* Enhance CLI api 'get-data-info' for data first UI flow\r\n## 1.12.1 - 8 June, 2022\r\n### Fixed\r\n* Adjust the banner image for preview & launchpad.\r\n* Reference higher ui5 version for launchpad to enable latest features from FE app.\r\n## 1.12.0 - 27 May, 2022\r\n### Added\r\n* Added new CLI api `get-data-info` to support parsing data file (csv, xml)\r\n### Changed\r\n* Refactor mta.yaml to support CI/CD service\r\n## 1.11.1 - 17 May, 2022\r\n### Fixed\r\n* Reference ui5 with specific version for preview & launchpad.\r\n## 1.11.0 - 26 April, 2022\r\n### Added\r\n* Enable application logs service.\r\n## 1.10.0 - 7 April, 2022\r\n### Changed\r\n* Changed logic to identify PDM entities and service.\r\n### Fixed\r\n* Fixed Delta Deployment failure on first deploy issue.\r\n* Fixed the error thrown in getProjectInfo API when result is undefined.\r\n## 1.9.0 - 24 March, 2022\r\n### Added\r\n* Added support to create destination to workflow instance on deploy.\r\n## 1.8.1 - 17 March, 2022\r\n### Fixed\r\n* Duplicate MDK UI apps fixed.\r\n## 1.8.0 - 10 March, 2022\r\n### Added\r\n* Added support for Delta-build.\r\n* Added support for Delta-deploy.\r\n### Fixed\r\n* Fixed Deploy failure issue when MDK Task UI app uses Document FormCell control.\r\n* Fixed issue where wrong MDK display name was returned to homepage.\r\n* Fixed issue where incorrect description of role is added to mta.yaml.\r\n* Fixed Deploy failure issue if Role Collection already exists in this subaccount.\r\n\r\n## 1.7.0 - 24 February, 2022\r\n### Added\r\n* Added support for Personal Data Manager.\r\n### Fixed\r\n* Fixed Deploy failure issue due to missing xsappname from xs-security.json.\r\n* Fixed issue with generating new role on Cloud Foundry if the project is already deployed.\r\n\r\n## 1.6.0 - 10 February, 2022\r\n### Added\r\n* Added immutability/read-only view to Project-API result object data structures.\r\n### Changed\r\n* Removed in-memory cache for project summary.\r\n### Fixed\r\n* Fixed roles issue when xs-security.json is absent.\r\n\r\n## 1.5.0 - 28 January, 2022\r\n### Added\r\n* Support capability to return the user roles for LCAP application.\r\n### Changed\r\n* Enhanced taskUi item name to use name of the app instead of `TaskUI`.\r\n### Fixed\r\n* Fixed issue related to persistence of links even when dependency was deleted.\r\n* Fixed issue where click on the application tile in preview page was unresponsive.\r\n\r\n## 1.4.0 - 07 January, 2022\r\n### Added\r\n* Added new API getApplicationDeploymentSummary() which provides information about project overview url and the time of last successful deployment time in UTC format.\r\n### Fixed\r\n* Fixed UI issues on preview and application overview pages.\r\n* Fixed the issue where sample data for external service was not read immediately after creation.\r\n\r\n## 1.3.0 - 22 December, 2021\r\n### Added\r\n* Support dependency relationship between entity and sample data.\r\n* Support version deployment as per the version in project.\r\n* Support sample data for external services.\r\n* Added support for reading full name of external entity.\r\n* Set default runtime allocation for LCAP apps.\r\n### Changed\r\n* Updated open source libraries to newer versions. \r\n* Handling references from artifact-management and it's corresponding types.\r\n* Enhanced `getProjectOverviewURL` cache.\r\n### Fixed\r\n* Improved performance w.r.t. watch functionality.\r\n* Fixed launching of Fiori app while link opened without launchpad.\r\n* Fixed issue w.r.t. project in subfolder structure.\r\n\r\n## 1.2.0 - 24 November, 2021\r\n### Added\r\n* Added workflow section containing workflow apps such as My Inbox, Workflow Definitions and Workflow Instances in `Application overview page`.\r\n* Added cache implementation for `getProjectOverviewURL` api.\r\n* Enhanced info message codes to indicate the source module in case of exceptions.\r\n* Added item links between workflow and taskUi app, workflow and service entity, and two db entities.\r\n### Changed\r\n* Force update mdk module during deployment.\r\n* Enhanced the mechanism to identify the workflow folder.\r\n### Fixed\r\n* Fixed issue related to concurrent access to `readItems` api.\r\n\r\n\r\n## 1.1.2 - 16 November, 2021\r\n### Fixed\r\n* Fixed deploy issue with respect to launchpad.\r\n\r\n## 1.1.1 - 15 November, 2021\r\n### Changed\r\n* Changed the title of landing page after deployment from `Project Preview` to `Application Overview`.\r\n\r\n### Fixed\r\n* Fixed Fiori application deployement issue by adding @ui5/cli dependency for HTML5 module in mta.yaml.\r\n* Handled scenarios where CDS returns empty folders map.\r\n* Fixed import issues in artifact-management-types by adding correct references to artifact-management-base-types.\r\n\r\n## 1.1.0 - 25 October, 2021\r\n### Added\r\n* Added new api `getManifest` and corresponding CLI command `show-manifest` to get contents of mta.yaml.\r\n* Added new api `getProjectOverviewURL` and corresponding CLI command `get-projectoverview-url` to get the url of project overview page on CF.\r\n\r\n* Created separate package `@sap/artifact-management-types` for declaration files.\r\n* Created separate package `@sap/artifact-management-base` which contains helper classes and methods that are used by `@sap/artifact-management` and plugins.\r\n\r\n* Added `workflowTaskEnabled` tag to service entity which corresponds to the data model annotated as workflow task enabled.\r\n* Added `db` and `srv` tags to identify db and srv modules distinctly.\r\n\r\n* Added support of port option in run api.\r\n* Added support of identifying and reading projects when present in subfolders of given path.\r\n* Added support of info messages in project data which describe reasons for missing data or errors.\r\n* Added resource for connectivity in mta.yaml to support external services.\r\n\r\n### Changed\r\n* Enhanced mta.yaml creation to add workflow service only when workflow module is present in project.\r\n* Enhanced `run` and `deploy` api to generate project overview page which showcases web applications and services in a new UI.\r\n* Remove enum types from project.\r\n* Made tags non-optional.\r\n\r\n### Fixed\r\n* Removed log comments from CLI output\r\n* Fixed failure of logging to console even when debug option was provided in CLI command.\r\n* Fixed failure of `build` api when called for more than one project.\r\n\r\n\r\n----\r\n\r\n## 1.0.1 - 20 August, 2021\r\n### Added\r\n* Added support to package the library with webpack.\r\n\r\n### Changed\r\n* Removed workflow application from html5 app container of local run and Cloud Foundry deploy.\r\n\r\n### Fixed\r\n* Fixed failure of watch items when content of any file is invalid.\r\n\r\n----\r\n## 1.0.0 - 03 August, 2021\r\n* Initial release.\r\n"},{"name":"dist","nodes":[{"name":"types","nodes":[{"name":"README.md","content":"# Introduction\r\nThis package contains type definitions for [artifact-management](https://www.npmjs.com/package/@sap/artifact-management).\r\n\r\n# Usage\r\n npm i @sap/artifact-management-types"}]}]},{"name":"README.md","content":"# Introduction\r\n\r\nArtifact Management on SAP BTP facilitates the generation of project metadata comprising of multiple modules of different technologies,\r\nbundles the module into one single deployment artifact and supports one click deploy to Cloud Foundry\r\n\r\n## Key Capabilities\r\n* Access to project properties\r\n* Access to VSCode workspace\r\n* Provide list of modules and items of each module\r\n* Watchers to notify of changes to project\r\n* Support of tags and filter\r\n* Capability to Test run\r\n* Capability to generate \r\n[MTA yaml](https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.04/en-US/ebb42efc880c4276a5f2294063fae0c3.html) and \r\n[MTAR](https://sap.github.io/cloud-mta-build-tool)\r\n* Deployment of MTAR to [Cloud Foundry](https://www.cloudfoundry.org)\r\n* Plugins for SAP technologies such as \r\n[MDK](https://developers.sap.com/topics/mobile-development-kit.html),\r\n[FioriElement](https://sapui5.hana.ondemand.com/sdk/#/topic/03265b0408e2432c9571d6b3feb6b1fd),\r\n[Workflow](https://developers.sap.com/group.cp-workflow-cf.html),\r\n[CAP](https://cap.cloud.sap/docs/), \r\n[XSUAA](https://blogs.sap.com/2019/01/07/uaa-xsuaa-platform-uaa-cfuaa-what-is-it-all-about/)\r\n\r\n---\r\n\r\n### Pre-Requisites\r\n\r\n* Node.JS 12 or higher\r\n* CAP Development Kit (`npm install -g @sap/cds-dk`)\r\n\r\n### Pre-Requisites to Build and Deploy MTARs\r\n\r\n* [MTAR builder](https://www.npmjs.com/package/mbt) (`npm install -g mbt`)\r\n* Install [lerna] for mono-repo building (`npm install -g lerna`)\r\n* Install MDK-Tools, `npm install @sap/mdk-tools -g`\r\n* [Cloud Foundary CLI](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html), Install cf-cli and run command `cf install-plugin multiapps`.\r\n\r\n---\r\n\r\n### Initialization\r\n```\r\nnpm i -g @sap/artifact-management\r\n```\r\nThere are two main sets of classes provided by the library. \r\n- `ProjectApi`, `ProjectImpl` : These are the interface and implmentation classes respectively for project level usages.\r\n- `WorkspaceApi`, `WorkspaceImpl` : These are the interface and implmentation classes respectively for Workspace level usages.\r\n\r\nYou can import the module in your code as follows:\r\n`import { ProjectImpl } from '@sap/artifact-management';`\r\n\r\nTo initialise Project API, instance of ProjectImpl has to be created which takes absolute path of a project.\r\n```\r\nimport { ProjectImpl } from '@sap/artifact-management';\r\nconst path = '<my-application-folder-root-path>';\r\n\r\n/**\r\n* readModuleAsProject Default value is false.\r\n* If the boolean is false, then only lcap/cap projects are read.\r\n* If true then any project can also be read.\r\n*/\r\nconst readModuleAsProject = false\r\n\r\nconst project = new ProjectImpl(path ,readModuleAsProject);\r\n```\r\n\r\nTo initialise Workspace API, instance of WorkspaceImpl has to be created.\r\n```\r\nimport { WorkspaceImpl } from '@sap/artifact-management';\r\nconst workspace = new WorkspaceImpl();\r\n```\r\n\r\nThe library also provides CLI `dev-project` which can be used to visualise the outputs of APIs as shown in the following section.\r\n\r\n---\r\n# APIs & Examples\r\n\r\n## Access to VSCode workspace\r\n### Get Projects \r\n###### Description\r\nGet all the projects in the workspace. Get the project based on tag if provided and Return type is array of ProjectAPIs / Returns ProjectAPI based on the tag.\r\n###### Method\r\n`getProjects(tag?: Tag) : Promise<ProjectApi[]>`\r\n\r\n###### Parameters\r\n- tag: (Optional) `Tag` value which can be used to filter projects.\r\n###### returns\r\n- array of `ProjectApi` instance or `undefined`\r\n\r\n###### Example\r\n```\r\nimport {Tag} from @sap/artifact-management'  //Optional\r\nconst ws = new WorkspaceImpl();\r\nconst projects = await ws.getProjects();\r\n```\r\n\r\n\r\n### Get Project URIs\r\n###### Description\r\nGet all project Uris in the workspace.\r\n###### Method\r\n`getProjectUris(): Promise<Uri[]>`\r\n\r\n###### returns\r\n- array of `Uri` or `undefined`\r\n\r\n###### Example\r\n```\r\nconst ws = new WorkspaceImpl();\r\nconst projectUris = await ws.getProjectUris();\r\n```\r\n\r\n\r\n### Start Watch \r\n###### Description\r\nit detects File addition or deletions in workspace and triggers the updated event\r\n###### Method\r\n`startWatch() : void`\r\n\r\n###### returns\r\n- `void`\r\n\r\n###### Example\r\n```\r\nconst ws = new WorkspaceImpl();\r\nawait ws.startWatch();\r\n```\r\n\r\n\r\n### Stop Watch \r\n###### Description\r\nit stops the watch event \r\n###### Method\r\n`stopWatch() : void`\r\n\r\n###### returns\r\n- `void`\r\n\r\n###### Example\r\n```\r\nconst ws = new WorkspaceImpl();\r\nawait ws.stopWatch();\r\n```\r\n\r\n### onWorkspaceChanged\r\n###### Description\r\nit captures the add/remove events for the folders in the Workspace \r\n###### Method\r\n`onWorkspaceChanged(handler: (event: string, folders: WorkspaceFolder[]) => void) : void`\r\n\r\n###### Parameters\r\n- a `function` which takes a string `event` (\"add\" | \"remove\") and array of `WorkspaceFolder` as arguments\r\n\r\n###### returns\r\n- `void`\r\n\r\n###### Example\r\n```\r\nimport { WorkspaceFolder } from 'vscode';\r\nconst ws = new WorkspaceImpl();\r\nws.onWorkspaceChanged((event: string, folders: WorkspaceFolder[]) => {\r\n  // add implementation \r\n});\r\n```\r\n\r\n---\r\n\r\n## Access to project properties\r\n### Get Project Structure \r\n###### Description\r\nRead the entire project and return the information about project, its CAP modules and their items.\r\n###### Method\r\n`read(logger? : IChildLogger, tag? : Tag): Promise<Project | undefined>;`\r\n\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of Project API.\r\n- tag: (Optional) `Tag` value which can be used to filter projects.\r\n###### returns\r\n- `Project` instance or `undefined`\r\n\r\n###### Example\r\n```\r\nimport {Tag} from @sap/artifact-management'   //Optional\r\nconst api = new ProjectImpl(projectPath);\r\nconst project = await api.read();\r\n```\r\n###### CLI\r\n\r\n```\r\ndev-project show  <my-application-folder-root absolute path> \r\n```\r\n\r\n###### Sample Output\r\n```\r\n{\r\n  \"type\": \"com.sap.cap\",\r\n  \"path\": \"<Absolute Path of Project>\",\r\n  \"prefix\": \"DemoProject\",\r\n  \"cloudService\": \"com.DemoProject\",\r\n  \"name\": \"DemoProject\",\r\n  \"tags\": [\r\n    \"project\",\r\n    \"cap\"\r\n  ],\r\n  \"modules\": [\r\n    {\r\n      \"type\": \"com.sap.security.XsSecurity\",\r\n      \"name\": \"_To_Be_Generated_\",\r\n      \"path\": \"\",\r\n      \"items\": []\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Get Project information\r\n###### Description\r\nReads only Project level information without reading its modules and items.\r\n###### Method\r\n`getProjectInfo(logger? : IChildLogger): Promise<ProjectData | undefined>;`\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of Project API.\r\n###### returns\r\n- `ProjectData` or `undefined`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nconst project = await api.getProjectInfo();\r\n```\r\n###### CLI\r\n```\r\ndev-project get-project-info  <my-application-folder-root absolute path> \r\n```\r\n###### Sample Output\r\n```\r\n{\r\n  \"type\": \"com.sap.cap\",\r\n  \"path\": \"<Absolute Path of Project>\",\r\n  \"prefix\": \"DemoProject\",\r\n  \"cloudService\": \"com.DemoProject\",\r\n  \"name\": \"DemoProject\",\r\n  \"tags\": [\r\n    \"project\",\r\n    \"cap\"\r\n  ]\r\n}\r\n```\r\n---\r\n\r\n## Provide list of modules and items of each module\r\n### Get Modules information\r\n###### Description\r\nReads only module level information for all the modules in the project without reading their items.\r\n###### Method\r\n`getModules(logger? : IChildLogger): Promise<ModuleData[] | undefined>;`\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- Array of `ModuleData` or `undefined`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nconst project = await api.getModules();\r\n```\r\n###### CLI\r\n```\r\ndev-project get-modules-info  <my-application-folder-root absolute path> \r\n```\r\n###### Sample Output\r\n```\r\n[\r\n  {\r\n    \"type\": \"com.sap.security.XsSecurity\",\r\n    \"name\": \"_To_Be_Generated_\",\r\n    \"path\": \"\"\r\n  }\r\n]\r\n```\r\n\r\n### Read Items\r\n###### Description\r\nRead the entire project and return the information about all the items/entities in the project.\r\n###### Method\r\n`readItems(filter? : ItemFilter, logger? : IChildLogger) : Promise<Item[]>;`\r\n###### Parameters\r\n- filter: (Optional) `ItemFilter` which can be used to filter items in the project.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- An array of `Item`\r\n###### Example\r\n```\r\nimport {ItemFilter} from @sap/artifact-management'  //Optional\r\nconst api = new ProjectImpl(projectPath);\r\nconst project = await api.readItems();\r\n```\r\n\r\n###### CLI\r\n\r\nRead all items\r\n\r\n```\r\ndev-project list-items  <my-application-folder-root absolute path> \r\n```\r\n###### Sample Output\r\n\r\n```\r\n[\r\n    {\r\n      \"external\": false,\r\n      \"name\": \"fioriApp\",\r\n      \"namespace\": \"sap.ui.demoproject\",\r\n      \"path\": \"db/schema.cds\",\r\n      \"ref\": \"sap.ui.demoproject.fioriApp\",\r\n      \"tags\": [\r\n          \"item\",\r\n          \"cap\"\r\n      ],\r\n      \"type\": \"com.sap.cds/Entity\"\r\n    },\r\n    ...\r\n    ...\r\n    ...\r\n]\r\n```\r\n\r\n---\r\n\r\n\r\n## Watchers to notify of changes to project\r\n###### Description\r\nRead and watch the items/entities in the project. Any changes in the items addition, deletion or updation which match the watch criteria will be notified by the event `updated` which is listened by `ItemWatcherApi`.\r\n###### Method\r\n`watchItems(filter? : ItemFilter, logger? : IChildLogger) : Promise<ItemWatcherApi>;`\r\n###### Parameters\r\n- filter: (Optional) `ItemFilter` which can be used to filter items in the project.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `ItemWatcherApi`. This can be used to read the updated items.\r\n\r\n###### Example\r\n```\r\nimport {ItemFilter} from @sap/artifact-management'  //Optional\r\nconst project = new ProjectImpl(projectPath);\r\nconst itemWatcher = await project.watchItems();\r\nconst items = await itemWatcher.readItems();\r\nitemWatcher.on('updated', () => {\r\n    console.log('Items updated');\r\n});\r\n```\r\n\r\n###### CLI\r\n\r\nRead all items\r\n\r\n```\r\ndev-project watch-items  <my-application-folder-root absolute path> \r\n```\r\n\r\n---\r\n\r\n\r\n## Support of Filters\r\n###### Description\r\nItems can be filtered on basis of `type`, `tag` and `ref`\r\nThe filter can be passed in `readItems` and `watchItems` APIs as an argument which will return items based on the filter. Check `readItems` and `watchItems` APIs for further information\r\n\r\n###### Example \r\n```\r\nimport {ItemFilter} from @sap/artifact-management'\r\n\r\n// Filter by type\r\nconst filter: ItemFilter = {types: [\"com.sap.cds/Entity\"]};\r\n\r\n// Filter by tags\r\nconst filter: ItemFilter = {​​​tags: {​​​values: [\"db\", \"srv\"]}​​​}​​​;\r\n\r\n// Filter by refs\r\nconst filter: ItemFilter= {refs: [\"<item ref>\"]​​​}​​​;\r\n\r\n\r\nconst api = new ProjectImpl(projectPath);\r\nconst entities = await api.readItems(filter);\r\n```\r\n\r\n---\r\n\r\n## Capability to Test run\r\n###### Method\r\n`run(option?: string[] | undefined, logger? : IChildLogger ) : Promise<void>`\r\n###### Description\r\nIt starts the CDS server and watches for any modifications in the files, if any changes detected it automatically restarts to serve the new content \r\n###### Parameters\r\n- options: (Optional) run options. Comma separated list of options and their values. e.g. ['port', '8008', 'open']. Currently only supports port number and open option.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Promise<void>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nawait api.run();\r\n```\r\n###### CLI\r\n```\r\ndev-project run  <my-application-folder-root absolute path> port 9039 open\r\n```\r\n\r\n---\r\n\r\n## Capability to generate MTA yaml and MTAR\r\n###### Method\r\n`build(options? : MtaGeneratorSettings, logger? : IChildLogger) : Promise<void>;`\r\n###### Description\r\nGenerate manifest for the project and all the modules and create a `mta.yaml` and `<app-name>.mtar` file.\r\n###### Parameters\r\n- options: (Optional) `MtaGeneratorSettings` build options.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Promise<void>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nawait api.build();\r\n```\r\n###### CLI\r\n```\r\ndev-project build  <my-application-folder-root absolute path> \r\n```\r\n###### Sample Output\r\n```\r\n_schema-version: '3.1'\r\nID: DemoProject\r\nversion: 1.0.0\r\ndescription: A simple CAP project.\r\nparameters:\r\n  enable-parallel-deployments: true\r\nbuild-parameters:\r\n  before-all:\r\n    - builder: custom\r\n      commands:\r\n        - bash -c \"cds compile srv --to xsuaa > xs-security.json\"\r\n    - builder: custom\r\n      commands:\r\n        - npm install --production\r\n        - >-\r\n          bash -c \"cds -v 2>/dev/null >/dev/null || npm install --no-save\r\n          @sap/cds-dk\"\r\n        - npx cds build --production\r\nmodules:\r\n  - name: DemoProject-db-deployer\r\n    type: hdb\r\n    path: gen/db\r\n    parameters:\r\n      buildpack: nodejs_buildpack\r\n    build-parameters:\r\n      builder: npm\r\n      ignore:\r\n        - node_modules\r\n    requires:\r\n      - name: DemoProject-service-uaa\r\n      - name: DemoProject-service-db\r\n    ...\r\n    ...\r\n    ...\r\n\r\nresources:\r\n  - type: org.cloudfoundry.managed-service\r\n    name: DemoProject-service-uaa\r\n    parameters:\r\n      service: xsuaa\r\n      service-plan: application\r\n      service-name: DemoProject-uaa\r\n      path: xs-security.json\r\n    ...\r\n    ...\r\n    ...\r\n\r\n```\r\n\r\n---\r\n\r\n## Capability to generate MTA yaml and MTAD yaml\r\n###### Method\r\n`buildV2(options? : MtaGeneratorSettings, logger? : IChildLogger) : Promise<void>;`\r\n###### Description\r\nGenerate manifest for the project and the modules specified in .status_tracker file and create a `mta.yaml` and `mtad.yaml` file.\r\n###### Parameters\r\n- options: (Optional) `MtaGeneratorSettings` build options.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Promise<void>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nawait api.buildV2();\r\n```\r\n###### CLI\r\n```\r\ndev-project buildV2  <my-application-folder-root absolute path> \r\n```\r\n###### Sample Output\r\n```\r\n_schema-version: '3.1'\r\nID: DemoProject\r\nversion: 1.0.0\r\ndescription: A simple CAP project.\r\nparameters:\r\n  enable-parallel-deployments: true\r\nbuild-parameters:\r\n  before-all:\r\n    - builder: custom\r\n      commands:\r\n        - bash -c \"cds compile srv --to xsuaa > xs-security.json\"\r\n    - builder: custom\r\n      commands:\r\n        - npm install --production\r\n        - >-\r\n          bash -c \"cds -v 2>/dev/null >/dev/null || npm install --no-save\r\n          @sap/cds-dk\"\r\n        - npx cds build --production\r\nmodules:\r\n  - name: DemoProject-db-deployer\r\n    type: hdb\r\n    path: gen/db\r\n    parameters:\r\n      buildpack: nodejs_buildpack\r\n    build-parameters:\r\n      builder: npm\r\n      ignore:\r\n        - node_modules\r\n    requires:\r\n      - name: DemoProject-service-uaa\r\n      - name: DemoProject-service-db\r\n    ...\r\n    ...\r\n    ...\r\n\r\nresources:\r\n  - type: org.cloudfoundry.managed-service\r\n    name: DemoProject-service-uaa\r\n    parameters:\r\n      service: xsuaa\r\n      service-plan: application\r\n      service-name: DemoProject-uaa\r\n      path: xs-security.json\r\n    ...\r\n    ...\r\n    ...\r\n\r\n```\r\n\r\n#### Get MTA Manifest content\r\n###### Method\r\n`getManifest(logger? : IChildLogger) : Promise<any>;`\r\n###### Description\r\nGet the content of the `mta.yaml` file.\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of Project API.\r\n###### returns\r\n- `Promise<any>`\r\n###### CLI\r\n```\r\n./src/project-api/bin/dev-project show-manifest ../risk-management-example\r\n```\r\n###### Sample Output\r\n```\r\n_schema-version: '3.1'\r\nID: cpapp\r\nversion: 1.0.0\r\ndescription: \"A simple CAP project.\"\r\nparameters:\r\n  enable-parallel-deployments: true\r\n\r\nbuild-parameters:\r\n  before-all:\r\n   - builder: custom\r\n     commands:\r\n      - npm install --production\r\n      ...\r\n      ...\r\n\r\nmodules:\r\n - name: cpapp-app\r\n   type: html5\r\n   path: app\r\n   build-parameters:\r\n     builder: custom\r\n     commands:\r\n      - bash build.sh\r\n     supported-platforms: []\r\n     build-result: dist\r\n  ...\r\n  ...\r\n\r\n```\r\n---\r\n\r\n## Deployment of MTAR to Cloud Foundry\r\n###### Method\r\n`deploy(logger? : IChildLogger) : Promise<void>;`\r\n###### Description\r\nDeploy the generated `<app-name>.mtar` file to currently targeted CF space.\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Promise<void>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nawait api.deploy();\r\n```\r\n###### CLI\r\nBuild and deploy in one step\r\n```\r\ndev-project deploy  <my-application-folder-root absolute path> \r\n```\r\n\r\n---\r\n\r\n## Deployment of MTAR to Cloud Foundry\r\n###### Method\r\n`deployV2(logger? : IChildLogger) : Promise<void>;`\r\n###### Description\r\nGenerate the `<app-name>.mtar` file based on contents of .status_tracker file and deploy to currently targeted CF space.\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Promise<void>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nawait api.deployV2();\r\n```\r\n###### CLI\r\nBuild and deploy in one step\r\n```\r\ndev-project deployV2  <my-application-folder-root absolute path> \r\n```\r\n\r\n---\r\n\r\n## Get Project Overview URL\r\n###### Method\r\n`getProjectOverviewURL(logger? : IChildLogger) : Promise<string | undefined>;`\r\n###### Description\r\nGet the Project Overview URL of application deployed to currently targeted CF space.\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of Project API.\r\n###### returns\r\n- `Promise<string | undefined>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nconst projectOverviewURL = await api.getProjectOverviewURL();\r\n```\r\n###### CLI\r\n```\r\ndev-project get-projectoverview-url <my-application-folder-root absolute path>\r\n```\r\n###### Sample Output\r\n```\r\n{\r\n  applicationOverviewURL : <projectOverviewURL>\r\n}\r\n```\r\n---\r\n\r\n## Get Application Deployment Summary\r\n###### Method\r\n`getApplicationDeploymentSummary(logger? : IChildLogger) : Promise<{ ProjectOverviewURL?: string; DeployedUTCTime?: String; } | undefined>;`\r\n###### Description\r\nGet the Application Deployment Summary of application deployed to currently targeted CF space which contains ProjectOverviewURL and DeployedUTCTime.\r\n###### Parameters\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of Project API.\r\n###### returns\r\n- `Promise<{ ProjectOverviewURL?: string; DeployedUTCTime?: String; } | undefined>`\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nconst applicationSummary = await api.getApplicationDeploymentSummary();\r\n```\r\n###### CLI\r\n```\r\ndev-project get-application-deployment-summary <my-application-folder-root absolute path>\r\n```\r\n###### Sample Output\r\n```\r\n{\r\n  applicationOverviewURL : <projectOverviewURL>,\r\n  DeployedUTCTime : <deployedUTCTime>\r\n}\r\n```\r\n---\r\n\r\n## Get Detail Information of Entities\r\n#### Get Detail information\r\n###### Method\r\n`getDetailInfo(type: ItemType, ref: string, entityPath?: string, logger? : IChildLogger) :Promise<Item | undefined>;`\r\n###### Description\r\nGet additional detail information about a particular item.\r\n###### Parameters\r\n- type: `ItemType` type of the Item.\r\n- ref: Unique reference of the Item.\r\n- entityPath: (Optional) Path of the item.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Item` or `undefined`\r\n\r\n###### Example\r\n```\r\nimport {ItemType} from \"src/project-glue/ItemType.ts\"  //Optional\r\nconst api = new ProjectImpl(projectPath);\r\nconst entities = await api.getDetailInfo(type, ref, entityPath)\r\n```\r\n###### CLI\r\n```\r\ndev-project get-detail-info  <my-application-folder-root absolute path> <type> <ref>\r\n```\r\n###### Sample Output\r\n```\r\n{\r\n  \"type\": \"com.sap.cds/Entity\",\r\n  \"name\": \"fioriApp\",\r\n  \"ref\": \"sap.ui.demoproject.fioriApp\",\r\n  \"path\": \"schema.cds\",\r\n  \"info\": {\r\n    \"ID\": {\r\n      \"@Core.Computed\": true,\r\n      \"key\": true,\r\n      \"type\": \"cds.UUID\"\r\n    },\r\n    \"title\": {\r\n      \"type\": \"cds.String\",\r\n      \"length\": 100\r\n    },\r\n    \"owner\": {\r\n      \"type\": \"cds.String\"\r\n    },\r\n    \"descr\": {\r\n      \"type\": \"cds.String\"\r\n    },\r\n    \"miti\": {\r\n      \"type\": \"cds.Association\",\r\n      \"target\": \"sap.ui.demo.ui5App\"\r\n    },\r\n    \"impact\": {\r\n      \"type\": \"cds.Integer\"\r\n    },\r\n    \"criticality\": {\r\n      \"type\": \"cds.Integer\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n## Get Data Information\r\n###### Method\r\n`getDataInfo(data: any, mainEntityName?: string, logger? : IChildLogger): Promise<any>;`\r\n###### Description\r\nRead and parse an Excel data file (CSV or XML format), or generate the main entity for a data model.\r\n###### Parameters\r\n- data: Path of the data file, or a data model parsed from an Excel file.\r\n- mainEntityName: (Optional) Name of the entity taken as the main entity.\r\n- logger: (Optional) An instance of IChildLogger which can be implemented by consumers of this library.\r\n###### returns\r\n- `Promise<any>`\r\n\r\n###### Example\r\n```\r\nconst api = new ProjectImpl(projectPath);\r\nconst data = await api.getDataInfo(filePath);\r\nconst dataWithMainEntity = await api.getDataInfo(data, 'mainEntity');\r\n```\r\n###### CLI\r\n```\r\ndev-project get-data-info  <data file absolute path>\r\n```\r\n###### Sample Output\r\n```\r\n[\r\n  {\r\n    \"entity\": \"entity\",\r\n    \"values\": [\r\n      [\r\n        \"9a8a4cad-19c1-46b2-a599-4b735e82374f\",\r\n        \"1\",\r\n        \"1000000\",\r\n        \"Technology\"\r\n      ],\r\n      [\r\n        \"c84a8e54-ce5a-423b-923e-dab637d298c1\",\r\n        \"2\",\r\n        \"1500000\",\r\n        \"Products\"\r\n      ],\r\n      [\r\n        \"939be63d-7175-4b53-b593-aa0dde74a04e\",\r\n        \"3\",\r\n        \"2000000\",\r\n        \"Technology\"\r\n      ]\r\n    ],\r\n    \"labels\": [\r\n      {\r\n        \"label\": \"ID\",\r\n        \"value\": \"ID\"\r\n      },\r\n      {\r\n        \"label\": \"Capex Request\",\r\n        \"value\": \"capex_request\"\r\n      },\r\n      {\r\n        \"label\": \"Total Cost\",\r\n        \"value\": \"total_cost\"\r\n      },\r\n      {\r\n        \"label\": \"Department\",\r\n        \"value\": \"department\"\r\n      }\r\n    ],\r\n    \"props\": [\r\n      {\r\n        \"name\": \"ID\",\r\n        \"kind\": \"dataType\",\r\n        \"type\": \"UUID\"\r\n      },\r\n      {\r\n        \"name\": \"capex_request\",\r\n        \"kind\": \"dataType\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name\": \"total_cost\",\r\n        \"kind\": \"dataType\",\r\n        \"type\": \"String\"\r\n      },\r\n      {\r\n        \"name\": \"department\",\r\n        \"kind\": \"dataType\",\r\n        \"type\": \"String\"\r\n      }\r\n    ],\r\n    \"dbProps\": [\r\n      \"ID\",\r\n      \"capex_request\",\r\n      \"total_cost\",\r\n      \"department\"\r\n    ]\r\n  }\r\n]\r\n```\r\n---"}]