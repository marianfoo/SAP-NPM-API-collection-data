[{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## 3.1.0 - 2022-01-12\r\n\r\n### Added\r\n- Support for Node.js 16.x\r\n\r\n## 3.0.0 - 2020-12-01\r\n\r\n### Added\r\n- Support for Node.js 14.x\r\n\r\n### Removed\r\n- Support for Node.js 6.x\r\n\r\n## 2.1.0 - 2019-12-06\r\n\r\n### Added\r\n- Support for Node.js 12.x\r\n\r\n## 2.0.0 - 2019-04-25\r\n\r\n### Removed\r\n- Support for Node.js v0.12 and v4\r\n\r\n<a name=\"1.4.1\"></a>\r\n## 1.4.1 - 2019-01-15\r\n\r\n### Fixed\r\n- Update shrinkwrap\r\n\r\n<a name=\"1.4.0\"></a>\r\n## 1.4.0 - 2019-01-15\r\n\r\n### Added\r\n- Node.js version 10 support\r\n\r\n## 1.3.0 - 2018-01-19\r\n\r\n### Added\r\n- npm-shrinkwrap.json\r\n\r\n## 1.2.0 - 2018-01-08\r\n\r\n### Added\r\n- CHANGELOG.md\r\n- Node.js version 8 support\r\n\r\n## 1.1.3 - 2017-07-04\r\n\r\n### Removed\r\n- Remove lodash as a productive dependency.\r\n\r\n## 1.1.2 - 2017-01-24\r\n\r\n### Changed\r\n- Rename package to use *sap* scope.\r\n"},{"name":"README.md","content":"# @sap/e2e-trace\r\n\r\nNode.js package with end to end tracing capabilities.\r\n\r\n\r\n## Overview\r\n\r\n### SAP Passport\r\n\r\nSAP Passports allow to identify a specific request in an end-to-end scenario involving several components communicating with each other.\r\nThis is especially helpful in the task of following the state of a business transaction across different systems.\r\nTo achieve that, the client should send a special header ('sap-passport') containing the SAP Passport to the first component.\r\nThe SAP Passport is a hex string with a special structure. The client can send one via a browser plugin or via SAPUI5 application frontend.\r\nWhenever an SAP Passport comes into a component, this component should also include the unique identifiers of the SAP Passport in its logs/traces,\r\nupdate it with component specific data and then forward it to the next system.\r\n\r\nSee the diagram below:\r\n\r\n![SAP Passport overview diagram](diagram.png \"Overview diagram\")\r\n\r\nAn application receives an SAP Passport in the 'sap-passport' header. The same header is used when the SAP Passport is getting forwarded over the HTTP protocol to another system.\r\nIf it is being sent to HANA, the SAP Passport should be set as the 'SAP_PASSPORT' session variable of the database connection.\r\n\r\n#### API\r\n\r\n- Loading the package:\r\n\r\n```js\r\nvar SAPPassport = require('@sap/e2e-trace').Passport;\r\n```\r\n\r\n- Creating an SAP Passport instance\r\n\r\n```js\r\nfunction requestHandler(req, res) {\r\n  var encodedPassport = req.headers[SAPPassport.HEADER_NAME];\r\n  if (encodedPassport) {\r\n    var passport = new SAPPassport(encodedPassport);\r\n  }\r\n}\r\n```\r\n\r\nThe library provides a constant for the 'sap-passport' header: `SAPPassport.HEADER_NAME`.\r\n\r\nThe `passport` variable is an instance with which you may read/modify the SAP Passport in your component.\r\n\r\n- Reading the unique identifiers of an SAP Passport\r\n\r\n```js\r\nvar identifiers = passport.readUniqueIdentifiers();\r\n```\r\n\r\nThe returned value (assigned to the `identifiers` variable) is an object that has the following properties: `transactionID`, `rootContextID`, `connectionID`, `connectionCounter`.\r\nThese SAP Passport fields got to be present in the logs/traces of the component.\r\nIf you are using the `sap-logging` library, refer to its documentation to check whether the specific version is capable of handling SAP Passports or not.\r\n\r\n\r\n- Updating the SAP Passport - this is done right before forwarding it to the next component.\r\n\r\n```js\r\npassport.update({\r\n  previousComponent: 'my-application',\r\n  connectionID: '00112233445566778899AABBCCDDEEFF',\r\n  connectionCounter: 36\r\n});\r\n```\r\n\r\nThis method takes an object with the following properties:\r\n\r\nProperty      | Value      | Mandatory | Semantics\r\n------------- | ---------- | --------- | --------------------------\r\n`previousComponent` | ASCII string. Up to 32 characters. | | This is the name of the current component which is about to make an outbound connection to another component. Defaults to _XSA Node.js_.\r\n`connectionID` | GUID, 16-byte hex | yes | Every connection between the current component and the next component should have an ID which is passed as that property.\r\n`connectionCounter`| Positive integer, up to 4 bytes | yes | States for which time the connection with the given `connectionID` is being reused.\r\n\r\n- Compacting the SAP Passport - HANA DB has a limitation over the SAP Passport size.\r\nThis is why it is recommended to call the method `compact` before forwarding an SAP Passport to HANA.\r\n\r\n```js\r\npassport.compact();\r\n```\r\n\r\n- Generating a hex string out of the updated SAP Passport - the SAP Passport can be send to other components in this format.\r\n\r\n```js\r\nvar http = require('http');\r\nvar url = require('url');\r\n\r\nvar encodedPassport = passport.serialize();\r\n\r\nvar options = url.parse('http://my-host:1234/my/path');\r\noptions.headers = {};\r\noptions.headers[SAPPassport.HEADER_NAME] = encodedPassport;\r\n\r\nvar request = http.request(options);\r\nrequest.on('error', function (err) { /* ... */ });\r\nrequest.on('response', function (response) { /* ... */ });\r\nrequest.end();\r\n```\r\n\r\n\r\n### DSR records\r\n\r\nDistributed Statistics Records contain statistical information regarding an incoming request.\r\nThe library writes every record on the standard output in a JSON format.\r\nGathering DSR statistics is triggered when a request containing an SAP passport is received.\r\n\r\n#### API\r\n\r\n```js\r\nvar connect = require('connect');\r\nvar createDsrMiddleware = require('@sap/e2e-trace').createDsrMiddleware;\r\n\r\nvar app = connect();\r\n\r\napp.use(createDsrMiddleware());\r\napp.use('/path', function (req, res, next) {\r\n  // ...\r\n});\r\n```\r\n\r\nThe DSR middleware (can be used with frameworks like `connect` and `express`) should be the first middleware in the request processing flow.\r\n\r\nExample DSR record:\r\n\r\n```json\r\n{\"action\":\"https://host:5555/path?a=1&b=2\",\"receivedBytes\":1230,\"sentBytes\":110,\"respTime\":18,\"transId\":\"104A7DB661D31EE69DE912281546ED81\",\"userId\":\"n.a.\",\"startTime\":1473506434377}\r\n```\r\n\r\nProperties in a DSR record:\r\n\r\nProperty      | Description\r\n------------- | -----------\r\nstartTime     | Time at which request processing starts (milliseconds elapsed since 1 January 1970 00:00:00 UTC).\r\naction        | The requested URL.\r\nreceivedBytes | Number of bytes the incoming HTTP request contains (lengths of request line, headers section and body included). **Note**: due to a bug in Node.js, this field might be 0 in some runtime versions. Refer to the `engines/node` property in _package.json_ for recommended Node.js versions.\r\nsentBytes     | Number of bytes the outgoing HTTP response contains (lengths of status line, headers section and body included).\r\nrespTime      | Number of milliseconds spent in request processing (until the whole outgoing HTTP response has been handed off to the operating system for transmission over the network).\r\ntransId       | The Transaction ID field of the SAP Passport that has triggered the DSR record.\r\nuserId        | User ID of the current user taken from the request object. Defaults to `n.a.`.\r\n"}]