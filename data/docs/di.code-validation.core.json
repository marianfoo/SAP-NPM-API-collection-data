[{"name":"README.md","content":"# di.code-validation.core  \r\ncode validation controller for DI.\r\nreturning issues in code according to validators configured\r\n\r\n### install\r\n\r\nnpm install di.code-validation.core --save-dev\r\n\r\n### CodeValidation API\r\n\r\n```javascript\r\nexecuteForProject(projectPath, workspaceRootName, configuration, callbackFunction)\r\n```\r\n\r\n_basePath_ - full path for the validated folder location\r\n\r\n_options_ - an object to set additional options for execution and return values processing.\r\n\r\n_options.pathPrefix_ - validation issues paths are relative to the project path. _pathPrefix enable to set constant prefix to the returned path.\r\n\r\n_configuration_ - configuration of the validators to execute.  object of type _ValidationConfig_\r\n\r\n_callbackFunction_ - callback of results. (TBD: add also failure for callback?)\r\n\r\n_ValidationConfig_ structure:\r\n```javascript\r\n  {\r\n      \"validators\" : {\r\n          \"validator1\" : {\r\n              \"extensions\" : ['.js', '.xsjs'],\r\n              \"filters\": {\r\n                  \"levels\" :[\"error\", \"warning\", \"info\"]\r\n              }\r\n          },\r\n          \"validator2\" : {\r\n              \"extensions\" : ['.new'],\r\n              \"filters\": {\r\n                  \"levels\" :[\"error\"]\r\n              }\r\n          }\r\n          ....\r\n      }\r\n  }\r\n```\r\n\r\n_result_ structure:\r\n```javascript\r\n{\r\n    \"validator_id\" : {\r\n        \"issues\" : {\r\n            \"relative_file_path\" : [\r\n                {\r\n                    \"category\" : \"Possible Error\",\r\n                    \"checker\" : \"validator checker name\",\r\n                    \"column\" : 1,\r\n                    \"line\" : 14,\r\n                    \"message\" : \"some message\",\r\n                    \"path\" : \"relative_file_path\",\r\n                    \"ruleId\" : \"optional name of rule\",\r\n                    \"severity\" : \"error\"\r\n                }\r\n                ....\r\n            ]\r\n        }\r\n        ....\r\n    }\r\n}\r\n```\r\n\r\n#### validator API\r\n\r\nEach validator should implement following API:\r\n\r\n```javascript\r\n  validateFiles(validationMetadata, fileResources)\r\n```\r\n\r\n  _validationMetadata_ - contains following methods:\r\n  \r\n      getRootPath() - workspaceRootName\r\n  \r\n      getLevels() - array of levels of issues to return\r\n  \r\n  _fileResources_ - array of files to validate (TBD: enable validation by extension of regular expression)\r\n  \r\n      getPath() - returns the file full path\r\n      \r\n      getText() - returns the text in the file\r\n\r\n#### run validation from command line\r\n\r\nnode di.code-validation.core\\bin\\run.js \"project file location\" \"client workspace root path\"\r\n\r\n--c \"configuration file location\" - file with validation configuration. if not supplied defaults used.\r\n\r\nExample for configuration file:\r\n\r\n```javascript\r\n  var configParam = { \r\n    \"validators\" : { \r\n      \"di.code-validation.js\" : { \r\n          \"extensions\" : [\".js\", \".xsjs\"], \r\n          \"filters\": { \r\n            \"levels\" :[\"error\", \"warning\", \"info\"] \r\n            } \r\n          } \r\n        } \r\n      };\r\n  module.exports =  configParam;\r\n```\r\n\r\n--l \"log file\" - location of the outpul log file. default is the execution directory\r\n\r\n### default configuration:\r\n\r\n```javascript\r\n  validators: {\r\n    \"di.code-validation.js\": {\r\n      extensions: [\".js\", \".xsjs\"]\r\n    },\r\n    \"di.code-validation.xml\": {\r\n      extensions: [ \".xml\"]\r\n    }\r\n  }\r\n```\r\n\r\n"}]