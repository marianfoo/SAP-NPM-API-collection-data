[{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## 6.1.2 - 2022-06-10\r\n\r\n### Updated\r\n- Updated devDep async to 3.2.4\r\n\r\n## 6.1.1 - 2022-04-08\r\n\r\n### Updated\r\n- Update moment to version 2.29.2\r\n\r\n### Removed\r\n- Node.js 8.x support\r\n\r\n### Changed\r\n- Changed istanbul test framework with c8\r\n\r\n## 6.1.0 - 2022-01-24\r\n\r\n### Added\r\n- Node.js 16.x support.\r\n\r\n### Fixed\r\n- Update *@sap/e2e-trace* dependency to v3.1.0\r\n\r\n\r\n## 6.0.3 - 2021-02-22\r\n\r\n### Fixed\r\n- Update _lodash_ to v4.17.21\r\n- Update _moment_ to v2.29.1\r\n\r\n## 6.0.2 - 2020-12-15\r\n\r\n### Fixed\r\n- Fixed the custom field logging format on the Cloud Foundry platform\r\n\r\n## 6.0.1 - 2020-12-08\r\n\r\n### Fixed\r\n- Update *@sap/e2e-trace* dependency to v3.0.0\r\n- Added null/undefined check to `_containsCustomField` in `lib/contexts/AppContext.js`\r\n\r\n## 6.0.0 - 2020-11-11\r\n\r\n### Added\r\n- Node.js 14.x support.\r\n\r\n### Removed\r\n- Node.js 6.x support\r\n\r\n### Fixed\r\n- Update _lodash_ to v4.17.20\r\n- Update _moment_ to 2.29.0\r\n\r\n## 5.3.1 - 2020-07-28\r\n\r\n### Fixed\r\n- Update *lodash* dependency to v4.17.19.\r\n\r\n## 5.3.0 - 2020-04-14\r\n\r\n### Added\r\n- Support for custom fields on Cloud Foundry platform\r\n\r\n## 5.2.0 - 2020-01-08\r\n\r\n### Added\r\n- Added `organization_id` and `organization_name` to the log output\r\n\r\n## 5.1.0 - 2019-12-02\r\n\r\n### Added\r\n- Node.js 12.x support.\r\n\r\n## 5.0.2 - 2019-07-10\r\n\r\n### Fixed\r\n- Update *lodash* dependency to v4.17.13.\r\n\r\n## 5.0.1 - 2019-05-13\r\n\r\n### Fixed\r\n- Update *@sap/e2e-trace* dependency to v2.0.0.\r\n\r\n## 5.0.0 - 2019-05-02\r\n\r\n### Removed\r\n- Node.js v4 support\r\n\r\n## 4.1.0 - 2019-01-16\r\n\r\n### Added\r\n- Support for Node.js 10\r\n\r\n## 4.0.2 - 2018-09-16\r\n\r\n### Fixed\r\n- Update *lodash* dependency to v4.17.11.\r\n\r\n## 4.0.1 - 2018-09-04\r\n\r\n### Fixed\r\n- `logContext.id` is used as a fallback value for correlation id if no other value is available.\r\n\r\n## 4.0.0 - 2018-08-20\r\n\r\n### Removed\r\n- Support for writing entries to files (the `logLocation` and `traceLocation` options are no longer taken into account).\r\n- The `STORAGE` property exposed by the library.\r\n- Node 0.12 support.\r\n- Coloring when writing to console.\r\n- `ApplicationContext.prototype.createRequestContext`.\r\n\r\n### Changed\r\n- The exposed middleware can be consumed via the `middleware` property instead of `expressMiddleware`.\r\n- Back slashes cannot be used in category names.\r\n- middleware does not take an application context, but an object with an `appContext` property\r\nand optionally - a `logNetwork` property.\r\n- _x-correlationid_ header is no longer taken into account when resolving request id.\r\n- An error is thrown if the level set through the `XS_APP_LOG_LEVEL` environment variable is not valid.\r\n\r\n### Added\r\n- Performance improvements.\r\n- Support for CF Log format.\r\n- Possibility to explicitly set correlation id via JavaScript API.\r\n- Correlation id (if present) will be set to ListLog entries as well.\r\n- `AppContext.prototype.createLogContext`.\r\n- `LogContext.prototype.enableNetworkLog`.\r\n\r\n## 3.4.0 - 2018-04-26\r\n\r\n### Added\r\n- Possibility to enable logging of the current user via the `XS_LOG_USER` environment variable.\r\nFrom this version onwards the user is not being logged by default.\r\n\r\n## 3.3.2 - 2018-04-05\r\n\r\n### Fixed\r\n- Update dependencies.\r\n- Unsetting tracer locations.\r\n- `tracer.exiting` when the argument for the return value of the function is falsy.\r\n\r\n## 3.3.1 - 2018-02-05\r\n\r\n### Fixed\r\n - Replace new lines in traces when running on XS Advanced.\r\n - Replace new lines in logs when running on XS Advanced.\r\n\r\n## 3.3.0 - 2018-01-19\r\n\r\n### Added\r\n- npm-shrinkwrap.json\r\n\r\n## 3.2.1 - 2017-12-01\r\n\r\n### Fixed\r\n- Update momentjs to 2.19.3\r\n\r\n## 3.2.0 - 2017-11-23\r\n\r\n### Added\r\n- The request id can be taken from the request headers 'x-request-id', 'x-correlationid', 'x-vcap-request-id' (if available).\r\n- The request id is exposed through the `requestId` property of the request context.\r\n- Improvements to the documentation.\r\n\r\n### Fixed\r\n- Handling of tracer locations.\r\n- Process does not exit even if there is no other activity keeping the event loop running.\r\n\r\n## 3.1.0 - 2017-08-14\r\n\r\n### Added\r\n- Support for Node.js v8.\r\n- Performance improvements in tracing.\r\n\r\n## 3.0.0 - 2017-04-12\r\n\r\n### Changed\r\n- Automatic location tracking for tracers has been removed due to severe performance impact. This affects application code as follows:\r\n  * A location (path to a file) needs to be explicitly passed to the `getTracer` functions as first argument. Passing `__filename` as a location is recommended.\r\n  * A tracer is no longer associated with the script it is currently being used in, but with the location provided for its instantiation.\r\n  * A function name (a string) should be passed as a first argument to the `entering`, `exiting`, `throwing` and `catching` methods of tracers.\r\n\r\n## 2.2.0 - 2017-02-07\r\n\r\n### Fixed\r\n- support for the 'xs unset-logging-level' command\r\n\r\n### Added\r\n- 'unsetLevel' method on application level contexts\r\n\r\n## 2.1.2 - 2017-01-24\r\n\r\n### Fixed\r\n- Minor improvements\r\n\r\n## 2.1.1 - 2017-01-24\r\n\r\n### Changed\r\n- Rename package to use @sap scope\r\n\r\n## 2.1.0 - 2017-01-09\r\n\r\n### Added\r\n- Log session id when available.\r\n\r\n## 2.0.3 - 2016-12-01\r\n\r\n### Fixed\r\n- Minor fixes.\r\n\r\n## 2.0.2 - 2016-11-08\r\n\r\n### Fixed\r\n- Minor fixes.\r\n\r\n## 2.0.1 - 2016-11-08\r\n\r\n### Fixed\r\n- Minor fixes.\r\n\r\n## 2.0.0 - 2016-10-25\r\n\r\n### Changed\r\n- By default logs and traces are written to standard output and standard error respectively.\r\n\r\n### Fixed\r\n - Replace new lines in logs.\r\n\r\n### Removed\r\n- The package no longer fallbacks to the environment variables  _XS_APPLICATION_LOG_FILE_ and _XS_TRACE_FILE_.\r\n"},{"name":"migration.md","content":"# Migration Guide\r\n\r\n## Version 3 ==> Version 4\r\n\r\n### Changes to application code\r\n\r\n#### Application context\r\n\r\n`logLocation` and `traceLocation` are no longer considered.\r\nThe library writes entries to standard output and to standard error only.\r\nThis makes providing these options unnecessary:\r\n\r\n```js\r\nvar logging = require('@sap/logging');\r\n\r\nvar appContext = logging.createAppContext({\r\n  // these options are unnecessary in version 4\r\n  logLocation: logging.STORAGE.CONSOLE,\r\n  traceLocation: 'path-to-file'\r\n});\r\n```\r\n\r\n#### Middleware\r\n\r\nCode like:\r\n\r\n```js\r\nvar logging = require('@sap/logging');\r\nvar appContext = logging.createAppContext();\r\n\r\n// ...\r\n\r\napp.use(logging.expressMiddleware(appContext));\r\n```\r\n\r\nshould be transformed to:\r\n\r\n```js\r\nconst logging = require('@sap/logging');\r\nconst appContext = logging.createAppContext();\r\n\r\n// ...\r\n\r\napp.use(logging.middleware({ appContext: appContext }));\r\n```\r\n\r\n#### Loggers and tracers from application context\r\n\r\nCode like:\r\n\r\n```js\r\nappContext.getLogger('/Application/Category');\r\n// or\r\nappContext.getTracer(__filename);\r\n```\r\n\r\nshould be transformed to one of the following variants:\r\n\r\n- when getting a logger/tracer when a message from messaging service is received or a job run is triggered:\r\n\r\n```js\r\nappContext.createLogContext().getLogger('/Application/Category');\r\n// or\r\nappContext.createLogContext().getTracer(__filename);\r\n```\r\n\r\nWith the snippet above, the context id will be auto-generated.\r\nIt is still possible to provide a custom value.\r\n\r\n- when getting a logger/tracer for logging/tracing purposes during application startup:\r\n\r\n```js\r\nappContext.createLogContext({ id: '' }).getLogger('/Application/Category');\r\n// or\r\nappContext.createLogContext({ id: '' }).getTracer(__filename);\r\n```\r\n\r\n**Note**: The context id defaults to an auto-generated value.\r\nTherefore, it is recommended to explicitly pass an empty string as `id` for the log context used on application startup to distinguish these entries from entries produced during job runs or during the processing of other events more easily.\r\n\r\n#### Loggers and tracers from request context\r\n\r\nCode like:\r\n\r\n```js\r\nappContext.createRequestContext(req).getLogger('/Application/Category');\r\n// or\r\nappContext.createRequestContext(req).getTracer(__filename);\r\n```\r\n\r\nshould be transformed to:\r\n\r\n```js\r\nappContext.createLogContext({ req }).getLogger('/Application/Category');\r\n// or\r\nappContext.createLogContext({ req }).getTracer(__filename);\r\n```\r\n\r\n#### Request id\r\n\r\nCode like:\r\n\r\n```js\r\nappContext.createRequestContext(req).requestId\r\n```\r\n\r\nshould be transformed to:\r\n\r\n```js\r\nappContext.createLogContext({ req }).id\r\n```\r\n"},{"name":"README.md","content":"@sap/logging\r\n===========\r\n\r\nA package that provides logging and tracing functionalities for Node.js applications.\r\n\r\n<!-- toc -->\r\n\r\n- [Example](#example)\r\n- [Logging & Tracing](#logging--tracing)\r\n- [Categories & Locations](#categories--locations)\r\n- [Location values](#location-values)\r\n- [Wildcard support](#wildcard-support)\r\n- [Formats](#formats)\r\n- [Severity Levels](#severity-levels)\r\n- [*XS_APP_LOG_LEVEL* environment variable](#xs_app_log_level-environment-variable)\r\n- [Changing severity levels for an application](#changing-severity-levels-for-an-application)\r\n  * [XS Advanced](#xs-advanced)\r\n  * [Cloud Foundry](#cloud-foundry)\r\n- [Logging sensitive data](#logging-sensitive-data)\r\n- [API](#api)\r\n  * [Application context](#application-context)\r\n  * [Log context](#log-context)\r\n  * [Log context id](#log-context-id)\r\n  * [Middleware](#middleware)\r\n  * [Loggers](#loggers)\r\n  * [Tracers](#tracers)\r\n  * [Custom fields (in CF)](#custom-fields)\r\n  * [Convenient tracing methods](#convenient-tracing-methods)\r\n  * [Other](#other)\r\n- [Migration guide](#migration-guide)\r\n\r\n<!-- tocstop -->\r\n\r\n### Example\r\n\r\nFollowing is an example of how to consume the package using [express](https://www.npmjs.com/package/express):\r\n\r\n```js\r\nvar logging = require('@sap/logging');\r\nvar express = require('express');\r\n\r\nvar app = express();\r\n\r\nvar appContext = logging.createAppContext();\r\n\r\napp.use(logging.middleware({ appContext: appContext, logNetwork: true }));\r\n\r\napp.get('/demo', function (req, res) {\r\n  var logger = req.loggingContext.getLogger('/Application/Network');\r\n  var tracer = req.loggingContext.getTracer(__filename);\r\n\r\n  logger.info('Retrieving demo greeting ...');\r\n  tracer.info('Processing GET request to /demo');\r\n\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.listen(3000, function() {\r\n  console.log('Server started');\r\n});\r\n```\r\n\r\nIn general, you just need to:\r\n- Initialize the logging library with some application-wide options.\r\n- Use the provided middleware that will extract request specific information.\r\nIt is recommended that this middleware is the first one to be called in order to have the logging context available as early as possible.\r\nIt is also recommended to have the middleware that sets the user of the request (if the application intends to log the current user)\r\nright after the one provided by this library.\r\n- Instantiate a logger and a tracer via the _loggingContext_ property of the request.\r\n- Log and trace whatever you need.\r\n\r\nSee more details below.\r\n\r\n### Logging & Tracing\r\n\r\nLogs are addressed to an administrator of an application. Traces - to a developer or support staff.\r\n- Events that need to be logged are related to how the app operates - e.g. the app cannot display some results taken from a remote HTTP service because the remote server is down.\r\nAn administrator of an app does not need to know how it is implemented, he/she should just be able to determine the state of the app itself.\r\n- Traces are mainly used when a problem has occurred and further investigation on code level has to take place.\r\n\r\nThe logging library writes log entries to standard output and trace entries - to standard error.\r\n\r\n### Categories & Locations\r\n\r\n- Categories - represent a feature area in an application. For example, different layers - Network layer, Database layer etc.\r\nThe concept of categories is used in logging.\r\n- Locations - represent a location in the source code - e.g. a path to a file. Used in the context of tracing. Getting a tracer object requires explicitly providing a location. It is recommended to pass as argument the location of the current script - `__filename`.\r\n\r\n### Location values\r\n\r\nThe path to the application root is removed from the source file paths in the trace output to reduce duplication.\r\nThe application root directory is taken from the _HOME_ environment variable. If it is not defined, absolute file paths are used in the trace output.\r\nExample:\r\n\r\nLet's assume the structure of your application looks like the following:\r\n\r\n<pre>\r\n+-- demo-app\r\n|   +-- package.json\r\n|   +-- lib\r\n|   |   +-- index.js\r\n|   |   +-- services\r\n|   |   |   +-- customer-service.js\r\n|   |   |   +-- sales-service.js\r\n</pre>\r\n\r\nHere is how the location of a script (path to a file) will look like in the trace entries (having in mind `__filename` has been passed as location to the tracer):\r\n\r\n| Script | _HOME_ environment variable is set  | _HOME_ environment variable is not set |\r\n| ------ | ----------------------------------- | -------------------------------------- |\r\n| index.js | /lib/index.js | /path/from/root/demo-app/lib/index.js |\r\n| customer-service.js | /lib/services/customer-service.js | /path/from/root/demo-app/lib/services/customer-service.js |\r\n\r\nThe same applies to Windows systems as well.\r\n\r\n**Note**: The path separator in the trace entries is always a forward slash, no matter the platform.\r\n\r\n### Wildcard support\r\n\r\nThe asterisk (*) is the only wildcard character supported by the library.\r\nIt corresponds to zero or more characters (no matter what they are).\r\nLet's illustrate the wildcard usage using the example application structure from the\r\nprevious section,\r\nassuming the _HOME_ environment variable is set to the root of the application (as it would be on XS Advanced or Cloud Foundry):\r\n\r\n| Pattern | Result |\r\n| ------- | ------ |\r\n| /Application/Network | Match a certain Category |\r\n| /Application/Network/* | Match all subcategories |\r\n| /lib/services/users-service.js | Match a specific file |\r\n| /lib/services/* | Match all files in all subdirectories of _services_ |\r\n\r\n### Formats\r\n\r\n- [ListLog](http://help.sap.com/saphelp_nw73ehp1/helpdata/en/53/82dae7c2f5439a8afd1b0ee95c2e45/content.htm) format is used for logs in XS Advanced and during local development\r\n- [Trace](http://help.sap.com/saphelp_nw74/helpdata/en/48/4f3966e39472d2e10000000a42189c/content.htm) format is used for traces in XS Advanced and during local development\r\n- [CF Log](https://github.com/SAP/cf-java-logging-support/blob/master/cf-java-logging-support-core/beats/request-metrics/docs/fields.asciidoc) format is used for logs and traces in Cloud Foundry\r\n\r\n**Note**: Instead of thread-name (in ListLog and Trace formats), a context id is used. This is an identifier that helps to distinguish which entries are logged/traced because of which requests/events.\r\nMore info on that is available in [this section](#log-context-id).\r\n\r\n### Severity Levels\r\n\r\nThe following table shows which severity levels are available for loggers and tracers:\r\n\r\n| Logging | Tracing |\r\n| ------- | ------- |\r\n|         | debug   |\r\n|         | path    |\r\n| info    | info    |\r\n| warning | warning |\r\n| error   | error   |\r\n| fatal   | fatal   |\r\n\r\nHere you can find when to use which level:\r\n\r\n| Level   | When to use |\r\n| -----   | ----------- |\r\n| debug   | Used to output the internal status of a program. |\r\n| path    | Used to analyze the execution flow of a program. |\r\n| info    | Used for events that do not need any follow up activity. They show the normal operations within an app. |\r\n| warning | Used for events that need follow up activity in order to prevent errors in the future. |\r\n| error   | Used when the desired tasks cannot be completed and the application is still usable. |\r\n| fatal   | Used in case of errors, because of which the application is no longer usable. |\r\n\r\nThe default severity level for loggers is _info_ and the default one for tracers is _error_.\r\n\r\n### *XS_APP_LOG_LEVEL* environment variable\r\n\r\nThe `XS_APP_LOG_LEVEL` environment variable can be used to configure severity levels for logging and tracing.\r\nValid values are severity levels from `debug` to `fatal`. The level specified in this environment variable\r\nwill be used instead of all already set levels.\r\n`none` is also a valid value for `XS_APP_LOG_LEVEL`. In that case all logging and tracing is disabled (useful for automated tests).\r\nThe library throws an error if the value of `XS_APP_LOG_LEVEL` is not a valid severity level or `none`.\r\n\r\n### Changing severity levels for an application\r\n\r\n#### XS Advanced\r\n\r\nYou can enable debug logs and traces for an application deployed on XS Advanced via the command:\r\n\r\n```sh\r\nxs set-logging-level <application-name> \"*\" debug\r\n```\r\n\r\nThis can be reverted via the command:\r\n\r\n```sh\r\nxs unset-logging-level <application-name> \"*\"\r\n```\r\n\r\nRestart of the application is not required for those commands to take effect.\r\n\r\nThe example above shows how to enable _debug_ level for all loggers and tracers.\r\nIt is possible to use the command for setting levels for a single category or location\r\n(e.g. `xs set-logging-level <application-name> \"/index.js\" debug`),\r\nor multiple by using the asterisk wildcard (e.g. `xs set-logging-level <application-name> \"/Application/Network/*\" debug`).\r\nThe comparison with the actual category/location of a logger/tracer is executed in a case insensitive manner.\r\n\r\n#### Cloud Foundry\r\n\r\nYou can enable debug logs and traces for an application deployed on Cloud Foundry via setting the environment variable `XS_APP_LOG_LEVEL`:\r\n\r\n```sh\r\ncf set-env <application-name> XS_APP_LOG_LEVEL debug\r\n```\r\n\r\nThis can be reverted via the command:\r\n\r\n```sh\r\ncf unset-env <application-name> XS_APP_LOG_LEVEL\r\n```\r\n\r\n**Note**: Application restart is required after each of the commands above in order the changes to the environment to take effect.\r\n\r\n### Logging sensitive data\r\n\r\nLogging sensitive data is not enabled by default. The following table shows which environment variable enables (when set to `true`) which fields and for which formats:\r\n\r\n| Environment Variable     | Field   | Taken from               | Format           |\r\n| ------------------------ | ------- | -----------------------  | ---------------  |\r\n| `XS_LOG_USER`            | user/remote_user    | `req.user.id` property   | ListLog, CF Log  |\r\n| `XS_LOG_REFERER`         | referer | `referer` request header | CF Log           |\r\n| `XS_LOG_CONNECTION_DATA` | remote_ip, remote_host, remote_port, x_forwarded_for | `req.connection.remoteAddress` property, `req.connection.remotePort` property, `x-forwarded-for` header | CF Log           |\r\n\r\n### API\r\n\r\nTo consume the logging package, an [application context](#application-context) needs to be created.\r\nIt contains information that is valid for the whole application.\r\nNext a [log context](#log-context) needs to be created.\r\nIt contains information that is valid for the current context.\r\nA separate log context should be created for each new event (HTTP request received, job execution started, message from messaging service received).\r\nBecause of the asynchronous nature of Node.js, entries produced during the processing of different events can be mixed.\r\nAll entries contain information specific to the log context they are associated with,\r\nwhich helps to distinguish between entries produced during the processing of different events.\r\n[Loggers](#loggers) and [tracers](#tracers) are obtained from the log context.\r\n\r\n\r\n#### Application context\r\n\r\n```js\r\nvar logging = require('@sap/logging');\r\n\r\nvar appContext = logging.createAppContext({\r\n  // options\r\n});\r\n```\r\n\r\nTo create the application context, pass some application-wide options.\r\nHere is a list of the properties you may optionally pass:\r\n\r\n| Property      | Description |\r\n| ------------- | ----------- |\r\n| csnComponent  | *String* Only applicable to SAP applications. |\r\n\r\nYou may use the application context to change severity levels (with [wildcards](#wildcard-support) for flexibility):\r\n```js\r\nappContext.setLevel('/Application/*', 'warning'); // for a logger\r\nappContext.setLevel(pathToFile, 'debug'); // for a tracer\r\n```\r\n\r\nThe method throws an error in case of an incorrect level.\r\n\r\nSeverity levels can be unset with:\r\n```js\r\nappContext.unsetLevel('/Application/*'); // for a logger\r\nappContext.unsetLevel(pathToFile); // for a tracer\r\n```\r\n\r\nTo set custom fields, you could do:\r\n```js\r\nappContext.setCustomFields([\"abc\"]);\r\n```\r\n\r\n\r\n#### Log context\r\n\r\n```js\r\nappContext.createLogContext({\r\n  // options\r\n});\r\n```\r\n\r\nA log context needs to be created in order to obtain a logger or a tracer.\r\n\r\nHere is a list of the options that can be provided to the log context (all are optional):\r\n\r\n| Option        | Description |\r\n| ------------- | ----------- |\r\n| id            | *String* Included in all logs and traces, should be unique. Used to distinguish entries from different log contexts. Defaults to an auto-generated value. If `req` is provided, the value is taken from the request headers `x-request-id` and `x-vcap-request-id` if present. It is recommended to explicitly pass an empty string for log contexts used during application startup. If `req` is present, then this id can be thought of as a request id, because all log/trace entries for that request will have the same id. See [this section](#log-context-id) for more information. |\r\n| correlationId | *String* Used to correlate entries for a logical transaction which involves processing within different applications. If the value is not set explicitly, then it is taken from the `x-correlationid` header (if `req` is provided and the header is present) or from the `id` of the log context. |\r\n| req           | *Object* Represents an HTTP request. |\r\n\r\nThe log context exposes the following functions:\r\n\r\n| Function        | Description |\r\n| --------------- | ----------- |\r\n| getAppContext   | AppConext object associated with this log context |\r\n\r\n\r\nThe log context exposes the following read-only properties:\r\n\r\n| Property      | Description |\r\n| ------------- | ----------- |\r\n| id            | The id of the log context. |\r\n| correlationId | The correlation id of the log context. This property is useful when the value needs to be sent to another application. |\r\n\r\nLoggers and tracers can be obtained from the log context as follows:\r\n\r\n```js\r\nlet logger = logContext.getLogger('/Application/Network');\r\nlet tracer = logContext.getTracer(__filename);\r\n```\r\n\r\nIt is possible to log request metrics for an HTTP request using the `enableNetworkLog` method:\r\n\r\n```js\r\nlogContext.enableNetworkLog(res);\r\n```\r\n\r\nIt takes a response object as argument.\r\nA `req` object needs to be passed in advance as option when creating the log context.\r\nThis method registers a handler for the `finish` event of the HTTP response.\r\nAn entry (of `info` severity level), containing request metrics will be logged when the event is emitted.\r\n`enableNetworkLog` should be called once for a request-response pair:\r\n\r\n```js\r\nhttp.createServer(function (req, res) {\r\n  var reqContext = appContext.createLogContext({ req: req });\r\n  reqContext.enableNetworkLog(res);\r\n\r\n  res.end('Hello World');\r\n});\r\n```\r\n\r\nThe log entry uses category `/LoggingLibrary/NetworkLog`.\r\nIt can be used to turn off the network log at runtime with [xs set-logging-level](#xs-advanced) or with [appContext.setLevel](#application-context).\r\n\r\n#### Log context id\r\n\r\nLet's take HTTP requests as an example: Because of the single-threaded nature and the event loop mechanism in Node.js, you may:\r\n- receive a request\r\n- start some async I/O operation\r\n- in the meantime start processing another request before returning a response to the first one\r\n\r\nThis means that the log entries for the two requests will be mixed a bit. To overcome this issue, each request (and the corresponding log context) is\r\nassociated with a unique id which is present in the logs and traces for that request.\r\nIn that way one can distinguish between the logs from the first request and the logs from the second request.\r\n\r\nThe same concept applies to messages received from a messaging service and to job runs triggered according to a schedule.\r\n\r\n#### Middleware\r\n\r\nThere is a utility middleware that can be used (see [this example](#example)).\r\nIt automatically attaches a property named _\"loggingContext\"_ to the request object.\r\nIt accepts an object with properties:\r\n\r\n| Property      | Description |\r\n| ------------- | ----------- |\r\n| appContext    | *Mandatory* An application context object. |\r\n| logNetwork    | *Optional* Defaults to `false`, boolean specifying whether an entry containing request metrics will be logged for every finished HTTP request. |\r\n\r\nThe middleware sets the _x-request-id_ response header to the context id for the current request,\r\nso in case of any troubles you may see the value in the response header and then filter the logs to see what the entries for that request are.\r\n\r\n#### Loggers\r\n\r\nYou may create a logger in the following way:\r\n\r\n```js\r\nvar logger = req.loggingContext.getLogger('/Application/Network');\r\n```\r\n\r\nThe log context has got the _\"getLogger\"_ function that takes 1 string argument - the category. Categories are names of functional areas in an application.\r\nWe recommend your categories to always begin with _\"/Application\"_. The categories form a hierarchy with forward slash as a separator. Using back slashes in categories is not allowed.\r\n\r\nYou may always get the severity level (a string) of a logger with such code:\r\n```js\r\nvar level = logger.getLevel();\r\n```\r\n\r\nIt is also possible to check whether an entry with a specific severity level will be logged with the current level configuration:\r\n\r\n```js\r\nvar willItBeLogged = logger.isEnabled('info');\r\n```\r\n\r\nLogging entries:\r\n\r\n```js\r\nlogger.info('Successful login of user %s - ', user, new Date());\r\nlogger.warning('Job could not finish successfully. An app admin should retrigger it.');\r\nlogger.error(new Error('Uups, an error has occurred'));\r\nlogger.fatal('We are in trouble');\r\n```\r\n\r\nYou may use the same string interpolation mechanism as with [util.format](https://nodejs.org/api/util.html#util_util_format_format_args)\r\n\r\nLogging errors:\r\n```js\r\nfunction callback(err, result) {\r\n  if (err) {\r\n    logger.error(err, 'Error during operation X');\r\n  }\r\n  // ...\r\n}\r\n```\r\nIf the first argument is an error, its message is appended to the log message.\r\nAlso, the error stack is written to the trace.\r\nThis works for all severity levels and also with tracers.\r\n\r\n#### Tracers\r\n\r\nAll you need to do to obtain a tracer instance is:\r\n\r\n```js\r\nvar tracer = req.loggingContext.getTracer(__filename);\r\n```\r\n\r\nMethods regarding level getting and checking are provided (similarly to loggers):\r\n\r\n```js\r\nvar level = tracer.getLevel();\r\nvar willItBeTraced = tracer.isEnabled('path');\r\n// etc.\r\n```\r\n\r\n#### Custom Fields\r\n\r\n##### Note: This feature is available in Cloud Foundry and not in XS Advanced.\r\n\r\nIf you want to use custom fields, you need to set them to the application context. The expected format is a string based array:\r\n\r\n```js\r\n      appContext.setCustomFields([\"custom1\", \"custom2\"]);\r\n```\r\n\r\nWhen logging, if the last argument is an object with a custom field, the custom field will be included in the log output as a custom field and not as part of the message:\r\n\r\n```js\r\napp.get('/', function (req, res) {\r\n  logger.info('Let me say hi ...' ,{\r\n    \"abc\": \"data\"\r\n  });\r\n  // ... \"custom_fields\": {\"abc\": \"data\"} ...\r\n```\r\n\r\n\r\n#### Convenient tracing methods\r\n\r\n**Note**: The first argument to all of these methods should be a string with the name of the function in which entries are being traced.\r\n\r\nThere are several methods that the API provides for convenience (they use severity level _path_):\r\n- entering - used to record that a function has been entered in the program flow. You may pass all of the arguments of your function to the _entering_ function and they will be traced.\r\n- exiting - typically used in pair with the _entering_ method. You may pass the return value of your function to the _exiting_ function.\r\n\r\n```js\r\nfunction myFunction(tracer, a, b ,c) {\r\n  tracer.entering('myFunction', a, b, c);\r\n\r\n  var result = // some logic here ...\r\n\r\n  tracer.exiting('myFunction', result);\r\n  return result;\r\n}\r\n```\r\n\r\n- throwing - used when you would like to trace when the code is about to throw an error. You may pass the error that is about to be thrown as an argument.\r\n- catching - used in catch blocks. You may pass the caught error as an argument.\r\n\r\n```js\r\nfunction func1(tracer) {\r\n  var error = new Error('An error has occurred');\r\n  tracer.throwing('func1', error);\r\n  throw err;\r\n}\r\n\r\nfunction func2(tracer) {\r\n  try {\r\n    func1(tracer);\r\n  } catch (err) {\r\n    tracer.catching('func2', err);\r\n    // logic for processing the error\r\n  }\r\n}\r\n```\r\n\r\n#### Other\r\n\r\nThe library supports SAP Passports. When a log context is created with a request object that has the `sap-passport` header,\r\nthe unique identifiers of the received SAP Passport will be part of the log entries for ListLog format.\r\n\r\n### Migration guide\r\n\r\nGuide on how to adopt new major versions of the library can be found [here](./migration.md).\r\n"}]