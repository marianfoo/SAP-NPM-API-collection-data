[{"name":"API.md","content":"## Classes\r\n\r\n<dl>\r\n<dt><a href=\"#PropertiesParser\">PropertiesParser</a></dt>\r\n<dd><p>Parse a Java .properties definition</p>\r\n</dd>\r\n<dt><a href=\"#ResourceManager\">ResourceManager</a></dt>\r\n<dd><p>ResourceManager class manages a collection of localized text bundles</p>\r\n</dd>\r\n<dt><a href=\"#TextBundle\">TextBundle</a></dt>\r\n<dd><p>TextBundle classes manages text resources for a given locale.</p>\r\n</dd>\r\n</dl>\r\n\r\n<a name=\"PropertiesParser\"></a>\r\n\r\n## PropertiesParser\r\nParse a Java .properties definition\r\n\r\n**Kind**: global class  \r\n\r\n* [PropertiesParser](#PropertiesParser)\r\n    * [new PropertiesParser(content)](#new_PropertiesParser_new)\r\n    * [.load(propertyFile)](#PropertiesParser.load) ⇒ <code>Promise</code>\r\n    * [.loadSync(propertyFile)](#PropertiesParser.loadSync) ⇒ <code>[PropertiesParser](#PropertiesParser)</code>\r\n\r\n<a name=\"new_PropertiesParser_new\"></a>\r\n\r\n### new PropertiesParser(content)\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| content | <code>string</code> | Content of the .properties file to parse |\r\n\r\n<a name=\"PropertiesParser.load\"></a>\r\n\r\n### PropertiesParser.load(propertyFile) ⇒ <code>Promise</code>\r\nLoads and parses a .properties file\r\n\r\n**Kind**: static method of <code>[PropertiesParser](#PropertiesParser)</code>  \r\n**Returns**: <code>Promise</code> - Returns a promise eventually fulfilled to a newly created PropertiesParser  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| propertyFile | <code>string</code> | Path to the .properties file (must be UTF-8 encoded) |\r\n\r\n<a name=\"PropertiesParser.loadSync\"></a>\r\n\r\n### PropertiesParser.loadSync(propertyFile) ⇒ <code>[PropertiesParser](#PropertiesParser)</code>\r\nLoads and parses synchronously a .properties file\r\n\r\n**Kind**: static method of <code>[PropertiesParser](#PropertiesParser)</code>  \r\n**Returns**: <code>[PropertiesParser](#PropertiesParser)</code> - Returns a newly created PropertiesParser  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| propertyFile | <code>string</code> | Path to the .properties file (must be UTF-8 encoded) |\r\n\r\n<a name=\"ResourceManager\"></a>\r\n\r\n## ResourceManager\r\nResourceManager class manages a collection of localized text bundles\r\n\r\n**Kind**: global class  \r\n**Properties**\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| logger | <code>Logger</code> | Logger object which can be injected on the ResourceManager instance. It should have a bunyan/sap-json-logging compatible API. |\r\n\r\n\r\n* [ResourceManager](#ResourceManager)\r\n    * [new ResourceManager(basePath)](#new_ResourceManager_new)\r\n    * [.getTextBundle(locale)](#ResourceManager+getTextBundle) ⇒ <code>[TextBundle](#TextBundle)</code>\r\n    * [.loadTextBundle(locale)](#ResourceManager+loadTextBundle) ⇒ <code>Promise</code>\r\n    * [.getMiddleware([localeAccessor])](#ResourceManager+getMiddleware) ⇒ <code>function</code>\r\n\r\n<a name=\"new_ResourceManager_new\"></a>\r\n\r\n### new ResourceManager(basePath)\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| basePath | <code>string</code> | Base path of the localized text resource files |\r\n\r\n<a name=\"ResourceManager+getTextBundle\"></a>\r\n\r\n### resourceManager.getTextBundle(locale) ⇒ <code>[TextBundle](#TextBundle)</code>\r\nReturns a TextBundle for a given locale\r\n\r\n**Kind**: instance method of <code>[ResourceManager](#ResourceManager)</code>  \r\n\r\n| Param | Type |\r\n| --- | --- |\r\n| locale | <code>string</code> | \r\n\r\n<a name=\"ResourceManager+loadTextBundle\"></a>\r\n\r\n### resourceManager.loadTextBundle(locale) ⇒ <code>Promise</code>\r\nRetrieves a TextBundle for a given locale. Resources for the locale are loaded if they are not yet available.\r\n\r\n**Kind**: instance method of <code>[ResourceManager](#ResourceManager)</code>  \r\n**Returns**: <code>Promise</code> - Promise eventually fulfilled to a TextBundle for the requested locale  \r\n\r\n| Param | Type |\r\n| --- | --- |\r\n| locale | <code>string</code> | \r\n\r\n<a name=\"ResourceManager+getMiddleware\"></a>\r\n\r\n### resourceManager.getMiddleware([localeAccessor]) ⇒ <code>function</code>\r\nReturns a middleware function taking care of loading the resources for the request locale.\r\n\r\n**Kind**: instance method of <code>[ResourceManager](#ResourceManager)</code>  \r\n\r\n| Param | Type | Default | Description |\r\n| --- | --- | --- | --- |\r\n| [localeAccessor] | <code>string</code> &#124; <code>function</code> | <code>&quot;&#x27;locale&#x27;&quot;</code> | Accessor property of function to extract the locale from the HTTP Request. Default to 'locale' (i.e. locale is req.locale) |\r\n\r\n<a name=\"TextBundle\"></a>\r\n\r\n## TextBundle\r\nTextBundle classes manages text resources for a given locale.\r\n\r\n**Kind**: global class  \r\n**Properties**\r\n\r\n| Name | Type | Description |\r\n| --- | --- | --- |\r\n| locale | <code>string</code> | TestBundle main locale |\r\n\r\n\r\n* [TextBundle](#TextBundle)\r\n    * [new TextBundle([propertyFile], [locale], [options])](#new_TextBundle_new)\r\n    * _instance_\r\n        * [.getLocale()](#TextBundle+getLocale) ⇒ <code>string</code>\r\n        * [.getText(key, [...args])](#TextBundle+getText) ⇒ <code>string</code>\r\n        * [.load()](#TextBundle+load) ⇒ <code>Promise</code>\r\n        * [.loadSync()](#TextBundle+loadSync)\r\n    * _static_\r\n        * [.fallbackLocale](#TextBundle.fallbackLocale) ⇒ <code>string</code>\r\n\r\n<a name=\"new_TextBundle_new\"></a>\r\n\r\n### new TextBundle([propertyFile], [locale], [options])\r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| [propertyFile] | <code>string</code> | Path to the base text resource property file. If not provided, options.path is taken. Either propertyFile or options.path must be provided. |\r\n| [locale] | <code>string</code> | Bundle locale (use of standard BCP 47 locales is recommended, POSIX is supported), default to 'en'. 'propertyFile' argument is required to be able to pass locale as string argument. |\r\n| [options] | <code>object</code> | Bundle options (for legacy compatibility). |\r\n| options.locale | <code>string</code> | Bundle locale (for legacy compatibility). |\r\n| options.path | <code>string</code> | Path to the base text resource property file (for legacy compatibility). |\r\n\r\n<a name=\"TextBundle+getLocale\"></a>\r\n\r\n### textBundle.getLocale() ⇒ <code>string</code>\r\nReturns the TextBundle main locale\r\n\r\n**Kind**: instance method of <code>[TextBundle](#TextBundle)</code>  \r\n<a name=\"TextBundle+getText\"></a>\r\n\r\n### textBundle.getText(key, [...args]) ⇒ <code>string</code>\r\nReturns a formatted message for the given resource key and arguments\r\n\r\n**Kind**: instance method of <code>[TextBundle](#TextBundle)</code>  \r\n\r\n| Param | Type | Description |\r\n| --- | --- | --- |\r\n| key | <code>string</code> | Resoruce key |\r\n| [...args] | <code>object</code> |  |\r\n\r\n<a name=\"TextBundle+load\"></a>\r\n\r\n### textBundle.load() ⇒ <code>Promise</code>\r\nAsynchronously loads a bundle resources (including the full fallback chain)\r\n\r\n**Kind**: instance method of <code>[TextBundle](#TextBundle)</code>  \r\n**Returns**: <code>Promise</code> - Promise eventually fulfilled to the bundle.  \r\n<a name=\"TextBundle+loadSync\"></a>\r\n\r\n### textBundle.loadSync()\r\nSynchronously loads a bundle resources for its main locale (without the fallback chain)\r\n\r\n**Kind**: instance method of <code>[TextBundle](#TextBundle)</code>  \r\n<a name=\"TextBundle.fallbackLocale\"></a>\r\n\r\n### TextBundle.fallbackLocale ⇒ <code>string</code>\r\nReturns the fallback of a given locale (e.g. 'fr_FR' => 'fr' => 'en' => '')\r\n\r\n**Kind**: static property of <code>[TextBundle](#TextBundle)</code>  \r\n\r\n| Param | Type |\r\n| --- | --- |\r\n| locale | <code>string</code> | \r\n\r\n"},{"name":"CHANGELOG.md","content":"# Change Log\r\nAll notable changes to this project will be documented in this file.\r\n\r\nThis project adheres to [Semantic Versioning](http://semver.org/).\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\r\n\r\n## 4.1.0 - 2022-01-12\r\n\r\n### Added\r\n- Node.js 16.x support.\r\n\r\n## 4.0.0 - 2021-02-04\r\n\r\n### Added\r\n- Node.js 14.x support.\r\n\r\n### Fixed\r\n- Reworked the \"langtag\" regex\r\n\r\n### Removed\r\n- Node.js 6.x support\r\n\r\n## 3.1.0 - 2019-12-06\r\n\r\n### Added\r\n- Node.js 12.x support.\r\n\r\n## 3.0.0 - 2019-05-02\r\n\r\n### Removed\r\n- Node.js v0.12 support\r\n- Node.js v4 support\r\n\r\n## 2.3.0 - 2018-12-18\r\n\r\n### Added\r\n- Node.js version 10 support\r\n\r\n## 2.2.1 - 2018-02-07\r\n\r\n### Fixed\r\n- Missing typings from package\r\n\r\n## 2.2.0 - 2018-01-09\r\n\r\n### Added\r\n- Node.js version 8 support\r\n- CHANGELOG.md\r\n- Typings\r\n\r\n## 2.1.0 - 2017-07-04\r\n\r\n### Added\r\n- Static function TextBundle.fallbackLocale.\r\n\r\n## 2.0.6 - 2017-01-25\r\n\r\n### Changed\r\n- Rename package to use @sap scope.\r\n"},{"name":"README.md","content":"@sap/textbundle\r\n==========\r\n\r\nSimple tool for text internationalization in Node.js. Based on the same concept as SAP UI5, this module works with UTF-8 encoded properties files.\r\nLanguage defaulting is also borrowed from SAP UI5 with the idea the UI and server-side code\r\nuse the same text internationalization approach.\r\n\r\n## [API documentation](./API.md)\r\n\r\n## Usage\r\n\r\nAssuming you have these files in directory ./test/properties:\r\n\r\n*i18n_en_EN.properties*\r\n```\r\ngreeting = Hello {0}, you are {1} years old.\r\n```\r\n\r\n*i18n_de.properties*\r\n```\r\ngreeting = Hallo {0}, Sie sind {1} Jahre alt.\r\n```\r\n\r\n### Creating a TextBundle\r\n#### Old API\r\n```js\r\nvar TextBundle = require('@sap/textbundle').TextBundle;\r\n\r\nvar bundle = new TextBundle({path: 'test/properties/i18n', locale: 'en_EN' } );\r\n```\r\n\r\n#### New API\r\n```js\r\nvar TextBundle = require('@sap/textbundle').TextBundle;\r\n\r\nvar bundle = new TextBundle('test/properties/i18n', 'en_EN');\r\n```\r\n\r\n#### Constructing localized messages\r\n```js\r\nvar TextBundle = require('@sap/textbundle').TextBundle;\r\n\r\nvar bundle = new TextBundle(path.resolve(__dirname, 'test/properties/i18n'), 'en_EN');\r\n\r\nbundle.getText('greeting'); // will return 'Hello {0}, you are {1} years old.'\r\nbundle.getText('greeting', ['Stefan']); // will return 'Hello Stefan, you are undefined years old.'\r\nbundle.getText('greeting', ['Stefan', '21']); // will return 'Hello Stefan, you are 21 years old.'\r\n\r\n// using DE locale\r\nvar bundle = new TextBundle(path.resolve(__dirname, 'test/properties/i18n'), 'de');\r\nbundle.getText('greeting', ['Stefan', '21']); // will return 'Hallo Stefan, Sie sind 21 Jahre alt.'\r\n```\r\n\r\n### Loading bundles\r\nBundles can be loaded by providing the absolute path to the resource bundle or relative path. If relative a path is used it will be resolved with respect to your JavaScript file. Absolute path to the resource bundle should be favored for TextBundles. \r\n\r\nDefault file extension is `.properties`. If your file has a different extension, you just need to append it to the path you provide.\r\nThe format of the file still has to be UTF-8, and the structure has to be properties-like.\r\n\r\n```js\r\nvar TextBundle = require('@sap/textbundle');\r\nvar txtBundle = new TextBundle({path: './test/txt/i18n.txt'});\r\n```\r\n\r\n### Getting texts and language defaulting\r\n\r\nGetting text is straight forward - shown on the examples above already.\r\n\r\nMessage retrieval from properties files is done using fall-back mechanism that searches for the provided key\r\nin a hierarchical order and returns the text associated with this key from the first occurrence in some of the files.\r\n\r\nFollowing order is applied when text is retrieved for specific locale:\r\n\r\n```\r\n  language -> country -> en -> root -> 'not-found, return the key'\r\n```\r\n\r\n\r\nA simple example:  locale is 'de_DE', bundle name is 'i18n', the order in which properties files are checked for key existence is following:\r\n\r\n```\r\n  i18n_de_DE\r\n  i18n_de\r\n  i18n_en\r\n  i18n\r\n  // if not found, the key is returned back\r\n```\r\n\r\n### Locale fallback\r\nThe static function `TextBundle.fallbackLocale` returns the fallback of a given locale (e.g. 'fr_FR' => 'fr' => 'en' => ''). \r\nThis lets you set up a locale fallback chain for your own purpose.\r\n \r\n```js\r\nvar TextBundle = require('@sap/textbundle').TextBundle;\r\n\r\nvar parent = TextBundle.fallbackLocale('en_US');\r\n```\r\n\r\n### ResourceManager \r\nResourceManager class allows managing resources for your module by caching the various TextBundle in order to avoid repeatedly loading them. \r\n\r\n```js\r\nvar ResourceManager = require('@sap/textbundle').ResourceManager;\r\nvar rm = new ResourceManager(path.resolve(__dirname, 'test/properties/i18n'));\r\n\r\nvar bundle = rm.getTextBundle('en_EN');\r\nbundle.getText('greeting');\r\n```\r\n\r\n### Asynchronous resource loading\r\nIn order to improve server scalability, resources should be loaded through asynchronous file system operations.   \r\n\r\n```js\r\nvar ResourceManager = require('@sap/textbundle').ResourceManager;\r\nvar rm = new ResourceManager(path.resolve(__dirname, 'test/properties/i18n'));\r\n\r\nrm.loadTextBundle('en_EN')\r\n    .then(function (bundle) {\r\n        bundle.getText('greeting');\r\n    });\r\n```\r\n\r\n### Resource loading middleware\r\n\r\n```js\r\nvar ResourceManager = require('@sap/textbundle').ResourceManager;\r\nvar rm = new ResourceManager(path.resolve(__dirname, 'test/properties/i18n'));\r\nvar express = require('express');\r\n\r\nvar app = express();\r\n\r\nfunction requestLocale(req) {\r\n    var locale = req.locale = req.acceptsLanguages(['en-US', 'en', 'de-DE', 'de', 'fr-FR', 'fr']) || 'en';\r\n    return locale;\r\n}\r\n\r\napp.use('/', rm.getMiddleware(requestLocale));\r\n\r\napp.use('/myHandler', function (req, res, next) {\r\n    // resources for request locale have been loaded at this stage \r\n    var bundle = rm.getTextBundle(req.locale);\r\n    bundle.getText('greeting');\r\n});\r\n```\r\n"}]