[{"name":"README.md","content":"# @sap/service-provider-apis\r\n## Overview\r\n**service-provider-apis** is an npm package that provides the APIs necessary for exposing services using the 'SAP Service Center'.\r\n\r\n## Usage\r\nTo add this package as a dependency in your **package.json** file, under the \"dependencies\" section, add the following dependency: `\"@sap/service-provider-apis\": [Version]`\r\n\r\n## APIs\r\nThis object exposes APIs for the exploration of SAP systems and services.\r\n\r\n### __getServices__  \r\n\r\nThis API retrieves a list of services from a specific provider system.  \r\n\r\n  `getServices(options?: Record<string, any>): Promise<Service[]>;`  \r\n  \r\n**options (this is optional)**: The following parameters are optional:  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *credentials (this is optional)*: for services that require authentication.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *filter (this is optional)*: used to filter for relevant services.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.      \r\n\r\n### __getMetadata__  \r\n\r\nThis API retrieves the metadata of a specific service.  \r\n\r\n  `getMetadata(\r\n    service: Service,\r\n    encoding: EncodingMode,\r\n    options?: Record<string, any>,\r\n    relativeUrl?: string,\r\n    credentials?: Authentication\r\n  ): Promise<ServiceMetadata>;`  \r\n  \r\n**service**: Defines the service from which the metadata will be retrieved.  \r\n**encoding**: Defines the required encoding requested by the consumer.  \r\n**options (this is optional)**: The following parameters are optional:  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *credentials (this is optional)*: for services that require authentication.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *filter (this is optional)*: used to filter for relevant services.  \r\n&nbsp;&nbsp;&nbsp;&nbsp; *relativeUrl* (this is optional)*: for a non-full URL - provides the relative URL to the service.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.   \r\n\r\n### __getAnnotations__  \r\n\r\nThis API retrieves the annotations of a specific service.  \r\n\r\n  `getAnnotations(service: Service, options?: Record<string, any>): Promise<Annotation[]>`  \r\n  \r\n**service**: Defines the service from which the metadata will be retrieved.  \r\n**options (this is optional)**: The following parameters are optional:   \r\n&nbsp;&nbsp;&nbsp;&nbsp; *credentials (this is optional)*: for services that require authentication.  \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error message.   \r\n\r\n### __getJsonLiveData__  \r\n\r\nThis API retrieves data for a specific service's entity.  \r\n\r\n  `getJsonLiveData(service: Service, entity: string, options?: Record<string, any>): Promise<ServiceCommon>`  \r\n  \r\n**service**: The service for which to return the entity's data.</br> \r\n**entity**:  The name of the entity for which we are retrieving the data.  \r\n**options (this is optional)**: The following are optional:   \r\n&nbsp;&nbsp;&nbsp;&nbsp; *credentials*: For services that require authentication. </br> \r\n&nbsp;&nbsp;&nbsp;&nbsp; *relativeUrl*: The relative path to the service (used in a non-full URL service). </br> \r\n&nbsp;&nbsp;&nbsp;&nbsp; *filter*: A map of OData request parameters that affect the data response for the entity.  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for example: `new Filter(new Map([[\"$top\", [\"2\"]]]]))` returns only the two top data rows.   \r\n**throws ServiceProviderError**: If there is an error, this throws a \"ServiceProviderError\" error type.   \r\n\r\n\r\n## Optional Parameters  \r\n*Create credentials object - used to access a system or service that requires authentication*  \r\n`const credentials = getCredentialsObject(\"username\", \"password\");`  \r\n\r\n- **credentials**: *an object that enables you to add credentials to your system request.  \r\n    &nbsp;&nbsp;&nbsp;&nbsp; *USER*: system username  \r\n    &nbsp;&nbsp;&nbsp;&nbsp; *PSW*: system password  \r\n    Credentials can be built as follows:*  \r\n    credentials = new Authentication(<USR>, <PSW>);  \r\n\r\n*Create a filter object - used to filter for needed services*  \r\n`const filter = getNewFilter(\"protocol\", [\"odatav2\"]);`  \r\n\r\n- **filter**: an object that enables you to filter for systems that you want to receive.  \r\n    &nbsp;&nbsp;&nbsp;&nbsp; *FILTER_KEY*: (string) A key used to filter the list of systems.  \r\n    &nbsp;&nbsp;&nbsp;&nbsp; *FILTER_VALUES*: (array of strings) accepted values of the filter key, separated by commas.  \r\n    Filters can be built as follows:  \r\n    filter = new Filter(new Map([[<FILTER_KEY>, <FILTER_VALUES>]]));  \r\n\r\n### Git and GitHub\r\n\r\n1. Open Git Bash, go to the local repository directory and sync with the remote repository.\r\n2. Develop in a **Local** branch.\r\n\r\n- Create a new descriptive branch `git checkout -b my-local-branch-name` <br>**OR** rename the previous one `git branch -m my-local-branch-name`.\r\n- Make sure _my-local-branch-name_ is **NOT master** and that there is **no existing** branch with this name.\r\n\r\n3. Sync with the remote repository.\r\n\r\n- Fetch the code from the master branch by running `git fetch; git merge`.\r\n\r\n4. Make your local changes.\r\n\r\n- Run `npm install` to install dependencies.\r\n- Run `npm run test` to compile the TypeScript code to JavaScript and run tests.\r\n\r\n5. Commit and push.\r\n\r\n- **Do not push directly to master!!!**\r\n- Commit your changes and push to create a new branch on GitHub by running `git push origin my-local-branch-name`\r\n- On consecutive commits **DO NOT** use `commit amend`. You should create a new commit and push to the same feature branch again. This will add an extra commit to your pull request and retrigger the voters.\r\n\r\n6. Open a pull request.\r\n\r\n- Click 'New pull request' next to your branch.\r\n- Edit the pull request name with BLI or BCP. For example: _\"BLI DEVXCORE-123: my new feature\"_ or _\"BCP 1670451810: Fix my bug\"_.\r\n- A new branch _(my-local-branch-name)_ is created in the GitHub repository.\r\n- The new code should enable all voters and code review to pass successfully.\r\n\r\n7. Update the existing pull request.\r\n\r\n- Stage your changes and create a new commit.\r\n- Perform Git fetch.\r\n- Perform Git merge on origin/master - Merge your changes with the most updated master branch.\r\n- Push your changes to your _my-local-branch-name_ (Git push origin _my-local-branch-name_).\r\n\r\n8. Merge the pull request.\r\n\r\n- If all voters passed (XMake + JaaS Voter), click 'Merge pull request'.  \r\n- If your pull request contains several commits, you combine them in one commit from GitHub by selecting the 'Confirm squash and merge' option from the Merge dropdown list.\r\n\r\n9. Delete your branch.\r\n\r\n- After the merge is complete, go to **Code > Branches**.\r\n- Look for your merged pull request and click the delete branch icon.\r\n\r\n### Tests and Coverage\r\n\r\n- Run `npm run test` to run the unit tests written in Mocha and the coverage test.\r\n\r\n## Release\r\n\r\nBump the version in the \"package.json\" GitHub file.\r\n\r\n**_Notes:_**\r\nMake sure to follow this versioning concept:\r\n- When providing new features (when releasing at end of the sprint or when a new feature is ready), bump a major version (for example, from 1.1.0 to 1.2.0).\r\n- When providing a bug fix to an existing version (\"hotfix\"), bump a minor version (for example, from 1.1.0 to 1.1.1).\r\n"}]