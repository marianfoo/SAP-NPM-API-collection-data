[{"name":"README.md","content":"HTML5 Repo Mock\r\n===============\r\n\r\nHTML5 Repo Mock is a development web server that allows to run [AppRouter][1] based \r\napplication that intend to serve files from HTML5 Application Repository in non-CF \r\nenvironment (e.g personal workstation, docker or K8S) the very same way as it would\r\nrun in CF.\r\n\r\nForm AppRouter point of view, there is no difference between real HTML5 Repo and\r\nit's mock. Both of them are business services that expose all relevant information\r\nrequired by AppRouter via service binding (available via `VCAP_SERVICES` environment\r\nvariable).\r\n\r\nWith HTML5 Repo Mock it is also possible to serve multiple HTML5 applications and\r\nnavigate between them.\r\n\r\nHTML5 Repo Mock is capable to resolve HTML5 application default version, which allows\r\naccessing HTML5 applications without specifying the version.\r\n\r\n## Getting Started\r\n\r\n1. Download or clone current repository\r\n2. Install dependencies `npm install`\r\n3. Run `MOCK_DIR=test/applications node lib/index.js`\r\n4. Open `http://localhost:5000/app/index.html`\r\n\r\n## Usage\r\n\r\nHTML5 Repo Mock main usage scenario is to enable preview of HTML5 modules of MTA without deploying it.\r\nThere are multiple development flows that HTML5 Repo Mock supports, and they are described in the \r\nfollowing sub-sections. All flows below assume MTA project with at least AppRouter and HTML5 module.\r\n\r\n__package.json of AppRouter application__\r\n```json\r\n{\r\n  ...\r\n  \"devDependencies\": {\r\n    \"html5-repo-mock\": \"*\"    \r\n  },\r\n  \"scripts\": {\r\n    ...\r\n    \"start-local\": \"node node_modules/@sap/html5-repo-mock/index.js\"\r\n  }\r\n}\r\n```\r\n\r\n### Standalone\r\n\r\nDeveloper created MTA project with AppRouter and HTML5 module. There are no provisioned CF\r\nservices available yet. Developer would like to preview the UI only.\r\n\r\nIn this scenario HTML5 Repo Mock serves as both HTML5 Repo and XSUAA. It will start AppRouter\r\nwith `VCAP_SERVICES` described in [Default VCAP_SERVICES](#default-vcap_services) section.\r\nDuring startup, AppRouter will call `http://localhost:5001/oauth/token` to obtain JWT of\r\nHTML5 Repo Mock and will use it with all followup requests.\r\n\r\n__Mock Token__\r\n\r\n```json\r\n{\r\n  \"access_token\": \"MOCK.ACCESS.TOKEN\",\r\n  \"token_type\": \"bearer\",\r\n  \"expires_in\": 43199,\r\n  \"scope\": \"uaa.resource\",\r\n  \"jti\": \"915f7795bf2f4ea5a77b138dc8a50709\"\r\n}\r\n```\r\n\r\nThis scenario is good to start with, since it requires minimum effort, but is not suitable \r\nfor cases where there are scope constraints defined on routes in `xs-app.json` and for \r\ncases where some HTML5 atrifacts are not part of the project (e.g. reuse libraries).\r\nConsumption of business services and destination service subaccount level destinations\r\nis also not possible using this approach.\r\n\r\n### With XSUAA\r\n\r\nIn case developer would like to test behaviour of HTML5 application with real XSUAA, for example\r\nto test error handling for users with not sufficient permissions, it is possible to define \r\n`VCAP_SERVICES` environment variable that contains XSUAA binding information. In this case\r\nHTML5 Repo Mock will merge binding information of HTML5 Repo Mock into provided `VCAP_SERVICES`\r\nand run AppRouter with both of them. This allows to define routes with scope constraints in\r\n`xs-app.json`\r\n\r\n```json\r\n{\r\n  \"routes\": [{\r\n      \"source\": \"^(.*)$\",\r\n      \"target\": \"$1\",\r\n      \"service\": \"html5-apps-repo-rt\",\r\n      \"scope\": [\"$XSAPPNAME.Read\", \"$XSAPPNAME.Write\"]\r\n  }]\r\n}\r\n```\r\n\r\nAlso providing XSUAA credentials allows to consume business services and subaccount level \r\ndestinations, binding information of which should also be passed via `VCAP_SERVICES`.\r\n\r\n```json\r\n{\r\n  \"routes\": [{\r\n      \"source\": \"^/dest/(.*)$\",\r\n      \"target\": \"$1\",\r\n      \"destination\": \"DESTINATION_NAME\"\r\n  }, {\r\n      \"source\": \"^(.*)$\",\r\n      \"target\": \"$1\",\r\n      \"service\": \"some-business-service\",\r\n      \"endpoint\": \"v1\"\r\n  }]\r\n}\r\n```\r\n\r\nDisadvantage of this approach is that it still does not allow to consume HTML5 applications\r\noutside of the project (e.g. business service UIs).\r\n\r\n### With Real HTML5 Repo\r\n\r\nIf HTML5 module depends on some reusable library, which is deployed to real HTML5 Repo, it\r\nis required to use both: real HTML5 Repo and the HTML5 Repo Mock. To enable this scenario,\r\nbinding information of real HTML5 Repo may be defined in `VCAP_SERVICES` environment variable.\r\nHTML5 Repo Mock will replace it with [Default VCAP_SERVICES](#default-vcap_services) before\r\nrunning AppRouter. In addition, it will fallback to real HTML5 Repo in case no matching HTML5 \r\napplication is found in local environment.\r\n\r\nThis approach allows consuming not only applications from current project, but also UIs of\r\nbusiness services and reuse libraries. This scenario may also be mixed with XSUAA.\r\n\r\n### With Mock FLP\r\n\r\nIf there are multiple HTML5 applications it is beneficial to have a dashboard with links\r\npointing to each one of them. In production it is usually done with Portal Service (aka FLP).\r\n\r\nHTML5 Repo Mock may provide similar capabilities by utilizing \"Fiori Sandbox\" environment, which\r\nprovides FLP-like experience and display tiles pointing to applications in local environment.\r\n\r\nTo enable FLP Mock, `--flp` flag should be passed as command line argument to HTML5 Repo Mock.\r\n\r\n### With Relative URIs\r\n\r\nIf target platform to which HTML5 application will be deployed is not Cloud Foundry, it may be\r\nrequired to set absolute paths (e.g. `/sap/opu/odata/snce/PO_S_SRV;v=2/`) in manifest.json data \r\nsource URIs. This makes impossible to test these applications with HTML5 Repo Mock, because it \r\nwill treat first segment of the data source path as application name. To solve the issue,\r\nwithout modifying source code for testing purposes, the `--relative` flag is supported by HTML5\r\nRepo Mock. Once it is set, HTML5 Repo Mock will remove leading slashes from all data source\r\nURIs, when serving manifest.json files.\r\n\r\nTo enable relative URIs, `--relative` flag should be passed as command line argument to \r\nHTML5 Repo Mock.\r\n\r\n### With Custom UI5 Configuration\r\n\r\nIn case some of SAP UI5 bootstrap configuration should be overridden, it is possible to specify\r\n`--ui5` command line argument to the HTML5 Repo Mock in the following format:\r\n\r\n```json\r\n{\"version\": \"1.72.0\", \"theme\": \"sap_belize\"}\r\n```\r\n\r\nThe `version` will be inserted before `/resources` in all URLs appearing in HTML file that have\r\nthe same origin as `<script id=\"sap-ui-bootstrap\" ... >` tag.\r\n\r\nAll other keys of configuration object will be used to set attributes of UI5 bootstrap script,\r\nprefixed with `data-sap-ui-`. For example `{\"theme\":\"sap_hcb\"}` will cause \r\n`<script id=\"sap-ui-bootstrap\" data-sap-ui-theme=\"sap_hcb\" ... >`.\r\n\r\n### With Business Service For Login\r\n\r\nIn case of developing HTML5 applications that will be deployed to and consumed from some business\r\nservice (e.g. ABAP Steampunk), creating XSUAA instance for local development only is an overhead\r\nwhich may be avoided by using `--login` command line argument followed by `sap.cloud.service` value.\r\n\r\nFor example, development of HTML5 application for ABAP Steampunk may be done by setting \r\n`VCAP_SERVICES` environment variable to include service key of the corresponding service\r\n\r\n```javascript\r\n{\r\n  \"abap\": [{\r\n    \"credentials\": { // <- service key goes here\r\n        \"sap.cloud.service\": \"com.sap.cloud.abap\",\r\n        ...\r\n    },\r\n    ...\r\n  }]\r\n }\r\n```\r\n\r\nThen run HTML5 Repo Mock as \r\n\r\n```\r\nnode node_modules/@sap/html5-repo-mock/index.js --login com.sap.cloud.abap\r\n```\r\n\r\n### With Inject\r\n\r\nIf it is required to inject content in `.html` files, it is possible to provide `--inject` command\r\nline argument followed by JSON array of objects or single object. Each object should contain `place`\r\nproperty with one of the following values: `head-start`, `head-end`, `body-start` or  `body-end`.\r\nIn addition, object should have either `script` or `content` property. In case of `script`, the\r\n`<script>` tag with corresponding URL will be injected to the place specified in `place` property.\r\nIn case of `content`, arbitrary content will be injected to the place specified in `place` property.\r\n\r\n```shell script\r\nnode node_modules/@sap/html5-repo-mock/index.js --inject '{\"place\":\"head-start\", \"script\":\"http://test.com/script.js\"}'\r\n```\r\n\r\n```shell script\r\nnode node_modules/@sap/html5-repo-mock/index.js --inject '{\"place\":\"body-end\", \"content\":\"<p>Footer</p>\"}'\r\n```\r\n\r\n### With MIME Types\r\n\r\nIn case HTML5 application contains resource(s) with file extension that is required to be served\r\nwith custom value of `Content-Type` header, it is possible to pass `--mime-types` command line\r\nargument followed with JSON that has file extension (without a dot) as key and corresponding\r\nMIME Type (`Content-Type` header value) as value.\r\n\r\n```shell script\r\nnode node_modules/@sap/html5-repo-mock/index.js --mime-types '{\"my-ext\":\"application/x-my-ext\"}'\r\n```\r\n\r\n### With Additional Headers\r\n\r\nIn case it is desired to send additional headers along with each request to destination target,\r\nit is possible to specify them as additional properties of AppRouter environment variable\r\n`destinations`, following the naming convention `URL.headers.<header_name>`.\r\n\r\n```shell script\r\ndestinations=[{\"URL.headers.APIKey\": \"1111-2222-3333\", \"name\":\"api\", \"url\":\"https://api.sap.com/SOME_SRV\"}]\r\n```\r\n\r\n## Configuration\r\n\r\nHTML5 Repo Mock supports various configuration options via command line arguments and environment variables.\r\nIn case of both environment variable and command line argument for the same configuration option are set,\r\nthe command line argument has higher priority.\r\n\r\n| Command line argument            | Environment variable              | Default value                       | Description                                                                                                 |\r\n|----------------------------------|-----------------------------------|-------------------------------------|-------------------------------------------------------------------------------------------------------------|\r\n| `--APIKey <key>`                 | API_KEY                           | &lt;not set&gt;                     | Override manifest.json OData models to send `APIKey` header with given value                                |\r\n| `--baseURL <url>`                | AR_BASE                           | http://localhost:$PORT              | AppRouter base URL. used for printing application URLs                                                      |\r\n| `--workingDirectory <dir>`       | AR_DIR                            | $PWD                                | The AppRouter working directory                                                                             |\r\n| `--destination`                  | MOCK_DESTINATION                  | &lt;not set&gt;                     | If set, HTML5 Repo Mock will mock destination service                                                       |\r\n| `--mockDir <dir(s)>`             | MOCK_DIR                          | $PWD/..                             | Single or multiple directories in which HTML5 Repo Mock search for HTML5 applications                       |\r\n| `--flp`                          | MOCK_FLP                          | &lt;not set&gt;                     | If set, AppRouter serves Fiori Sandbox at `/cp.portal/site`                                                 |\r\n| `--inject <json>`                | MOCK_INJECT                       | &lt;not set&gt;                     | Inject arbitrary HTML content or script with URL to specified place                                         |\r\n| `--login <sap.cloud.service>`    | MOCK_LOGIN                        | &lt;not set&gt;                     | Use service with specified `sap.cloud.service` as XSUAA (for login)                                         |\r\n| `--lookupDirs <dir(s)>`          | MOCK_LOOKUP_DIRS                  | [\"\", \"dist\", \"webapp\"]              | Folders relative to `xs-app.json` from where to serve HTML5 assets                                          |\r\n| `--mime-types <json>`            | MOCK_MIME_TYPES                   | &lt;not set&gt;                     | JSON mapping file extensions to `Content-Type` values                                                       |\r\n| `--mockPort <port>`              | MOCK_PORT                         | 5001                                | TCP port of HTML5 Repo Mock                                                                                 |\r\n| `--relative`                     | MOCK_RELATIVE                     | &lt;not set&gt;                     | Remove leading slash in data source URIs of manifest.json files                                             |\r\n| `--service-instance-destination` | MOCK_SERVICE_INSTANCE_DESTINATION | &lt;not set&gt;                     | If set, AppRouter sends destinations service instance credentials in `bas-destination-instance-cred` header |\r\n| `--ui5 <json>`                   | MOCK_UI5                          | &lt;not set&gt;                     | Rewrite UI5 bootstrap configuration and version in HTML files                                               |\r\n| `--standalone <url>`             | MOCK_WELCOME                      | &lt;not set&gt;                     | If set, changes welcome file of AppRouter's xs-app.json to provided value                                   |\r\n|                                  | PORT                              | 5000                                | TCP port of AppRouter. Used for printing application URLs                                                   |\r\n| `--sap-ui-bootstrap-url <url>`   | SAP_UI_BOOTSTRAP_URL              | https://sapui5.hana.ondemand.com    | Base URL form which SAP UI5 resources of FLP sandbox will be loaded                                         |\r\n|                                  | VCAP_SERVICES                     | [See below](#default-vcap_services) | Service binding information that will be overridden and passed to AppRouter                                 |\r\n\r\n### Default VCAP_SERVICES\r\n\r\n```json\r\n{\r\n  \"html5-apps-repo\": [\r\n    {\r\n      \"binding_name\": null,\r\n      \"credentials\": {\r\n        \"grant_type\": \"client_credentials\",\r\n        \"sap.cloud.service\": \"html5-apps-repo-rt\",\r\n        \"uaa\": {\r\n          \"clientid\": \"mock_client_id\",\r\n          \"clientsecret\": \"mock_client_secret\",\r\n          \"identityzone\": \"mock_idz\",\r\n          \"identityzoneid\": \"mock_idz_id\",\r\n          \"sburl\": \"http://localhost\",\r\n          \"tenantid\": \"mock_tenant_id\",\r\n          \"tenantmode\": \"dedicated\",\r\n          \"uaadomain\": \"localhost:5001\",\r\n          \"url\": \"http://localhost:5001\",\r\n          \"verificationkey\": \"-----BEGIN PUBLIC KEY-----***-----END PUBLIC KEY-----\",\r\n          \"xsappname\": \"mock_xsappname\"\r\n        },\r\n        \"uri\": \"http://localhost:5001\",\r\n        \"vendor\": \"SAP\"\r\n      },\r\n      \"instance_name\": \"mock-html5-apps-repo\",\r\n      \"label\": \"html5-apps-repo\",\r\n      \"name\": \"mock-html5-apps-repo\",\r\n      \"plan\": \"app-runtime\",\r\n      \"provider\": null,\r\n      \"syslog_drain_url\": null,\r\n      \"tags\": [\r\n        \"html5appsrepo\",\r\n        \"html5-apps-repo-rt\",\r\n        \"html5-apps-rt\",\r\n        \"html5-apps-repo-dt\",\r\n        \"html5-apps-dt\"\r\n      ],\r\n      \"volume_mounts\": []\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Troubleshooting\r\n\r\nIf HTML5 Repo Mock running and producing unexpected results, it is possible to see some diagnostic information\r\nby accessing one of the URLs below.\r\n\r\n| URL                     | Description                                                 |\r\n|-------------------------|-------------------------------------------------------------|\r\n| /logs                   | Tracing logs for the bootstrap and each request             |\r\n| /conf                   | HTML5 Repo Mock configuration                               |\r\n| /vcap                   | Value of `VCAP_SERVICES` that AppRouter was configured with |\r\n| /applications/metadata/ | List of metadata for all discovered applications            |\r\n\r\n## Support channel\r\nFor reporting an issue, open a BCP ticket with component CA-BAS-RUN-HTML5 For reporting a feature request,\r\nplease open an influence request (https://influence.sap.com/sap/ino/#campaign/2538)\r\n\r\n[1]: https://www.npmjs.com/package/@sap/AppRouter\r\n"}]